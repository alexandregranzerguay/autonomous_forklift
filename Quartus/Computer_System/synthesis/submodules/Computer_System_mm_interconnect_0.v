// Computer_System_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 17.1 593

`timescale 1 ps / 1 ps
module Computer_System_mm_interconnect_0 (
		input  wire [11:0] ARM_A9_HPS_h2f_axi_master_awid,                                           //                                          ARM_A9_HPS_h2f_axi_master.awid
		input  wire [29:0] ARM_A9_HPS_h2f_axi_master_awaddr,                                         //                                                                   .awaddr
		input  wire [3:0]  ARM_A9_HPS_h2f_axi_master_awlen,                                          //                                                                   .awlen
		input  wire [2:0]  ARM_A9_HPS_h2f_axi_master_awsize,                                         //                                                                   .awsize
		input  wire [1:0]  ARM_A9_HPS_h2f_axi_master_awburst,                                        //                                                                   .awburst
		input  wire [1:0]  ARM_A9_HPS_h2f_axi_master_awlock,                                         //                                                                   .awlock
		input  wire [3:0]  ARM_A9_HPS_h2f_axi_master_awcache,                                        //                                                                   .awcache
		input  wire [2:0]  ARM_A9_HPS_h2f_axi_master_awprot,                                         //                                                                   .awprot
		input  wire        ARM_A9_HPS_h2f_axi_master_awvalid,                                        //                                                                   .awvalid
		output wire        ARM_A9_HPS_h2f_axi_master_awready,                                        //                                                                   .awready
		input  wire [11:0] ARM_A9_HPS_h2f_axi_master_wid,                                            //                                                                   .wid
		input  wire [63:0] ARM_A9_HPS_h2f_axi_master_wdata,                                          //                                                                   .wdata
		input  wire [7:0]  ARM_A9_HPS_h2f_axi_master_wstrb,                                          //                                                                   .wstrb
		input  wire        ARM_A9_HPS_h2f_axi_master_wlast,                                          //                                                                   .wlast
		input  wire        ARM_A9_HPS_h2f_axi_master_wvalid,                                         //                                                                   .wvalid
		output wire        ARM_A9_HPS_h2f_axi_master_wready,                                         //                                                                   .wready
		output wire [11:0] ARM_A9_HPS_h2f_axi_master_bid,                                            //                                                                   .bid
		output wire [1:0]  ARM_A9_HPS_h2f_axi_master_bresp,                                          //                                                                   .bresp
		output wire        ARM_A9_HPS_h2f_axi_master_bvalid,                                         //                                                                   .bvalid
		input  wire        ARM_A9_HPS_h2f_axi_master_bready,                                         //                                                                   .bready
		input  wire [11:0] ARM_A9_HPS_h2f_axi_master_arid,                                           //                                                                   .arid
		input  wire [29:0] ARM_A9_HPS_h2f_axi_master_araddr,                                         //                                                                   .araddr
		input  wire [3:0]  ARM_A9_HPS_h2f_axi_master_arlen,                                          //                                                                   .arlen
		input  wire [2:0]  ARM_A9_HPS_h2f_axi_master_arsize,                                         //                                                                   .arsize
		input  wire [1:0]  ARM_A9_HPS_h2f_axi_master_arburst,                                        //                                                                   .arburst
		input  wire [1:0]  ARM_A9_HPS_h2f_axi_master_arlock,                                         //                                                                   .arlock
		input  wire [3:0]  ARM_A9_HPS_h2f_axi_master_arcache,                                        //                                                                   .arcache
		input  wire [2:0]  ARM_A9_HPS_h2f_axi_master_arprot,                                         //                                                                   .arprot
		input  wire        ARM_A9_HPS_h2f_axi_master_arvalid,                                        //                                                                   .arvalid
		output wire        ARM_A9_HPS_h2f_axi_master_arready,                                        //                                                                   .arready
		output wire [11:0] ARM_A9_HPS_h2f_axi_master_rid,                                            //                                                                   .rid
		output wire [63:0] ARM_A9_HPS_h2f_axi_master_rdata,                                          //                                                                   .rdata
		output wire [1:0]  ARM_A9_HPS_h2f_axi_master_rresp,                                          //                                                                   .rresp
		output wire        ARM_A9_HPS_h2f_axi_master_rlast,                                          //                                                                   .rlast
		output wire        ARM_A9_HPS_h2f_axi_master_rvalid,                                         //                                                                   .rvalid
		input  wire        ARM_A9_HPS_h2f_axi_master_rready,                                         //                                                                   .rready
		input  wire [11:0] ARM_A9_HPS_h2f_lw_axi_master_awid,                                        //                                       ARM_A9_HPS_h2f_lw_axi_master.awid
		input  wire [20:0] ARM_A9_HPS_h2f_lw_axi_master_awaddr,                                      //                                                                   .awaddr
		input  wire [3:0]  ARM_A9_HPS_h2f_lw_axi_master_awlen,                                       //                                                                   .awlen
		input  wire [2:0]  ARM_A9_HPS_h2f_lw_axi_master_awsize,                                      //                                                                   .awsize
		input  wire [1:0]  ARM_A9_HPS_h2f_lw_axi_master_awburst,                                     //                                                                   .awburst
		input  wire [1:0]  ARM_A9_HPS_h2f_lw_axi_master_awlock,                                      //                                                                   .awlock
		input  wire [3:0]  ARM_A9_HPS_h2f_lw_axi_master_awcache,                                     //                                                                   .awcache
		input  wire [2:0]  ARM_A9_HPS_h2f_lw_axi_master_awprot,                                      //                                                                   .awprot
		input  wire        ARM_A9_HPS_h2f_lw_axi_master_awvalid,                                     //                                                                   .awvalid
		output wire        ARM_A9_HPS_h2f_lw_axi_master_awready,                                     //                                                                   .awready
		input  wire [11:0] ARM_A9_HPS_h2f_lw_axi_master_wid,                                         //                                                                   .wid
		input  wire [31:0] ARM_A9_HPS_h2f_lw_axi_master_wdata,                                       //                                                                   .wdata
		input  wire [3:0]  ARM_A9_HPS_h2f_lw_axi_master_wstrb,                                       //                                                                   .wstrb
		input  wire        ARM_A9_HPS_h2f_lw_axi_master_wlast,                                       //                                                                   .wlast
		input  wire        ARM_A9_HPS_h2f_lw_axi_master_wvalid,                                      //                                                                   .wvalid
		output wire        ARM_A9_HPS_h2f_lw_axi_master_wready,                                      //                                                                   .wready
		output wire [11:0] ARM_A9_HPS_h2f_lw_axi_master_bid,                                         //                                                                   .bid
		output wire [1:0]  ARM_A9_HPS_h2f_lw_axi_master_bresp,                                       //                                                                   .bresp
		output wire        ARM_A9_HPS_h2f_lw_axi_master_bvalid,                                      //                                                                   .bvalid
		input  wire        ARM_A9_HPS_h2f_lw_axi_master_bready,                                      //                                                                   .bready
		input  wire [11:0] ARM_A9_HPS_h2f_lw_axi_master_arid,                                        //                                                                   .arid
		input  wire [20:0] ARM_A9_HPS_h2f_lw_axi_master_araddr,                                      //                                                                   .araddr
		input  wire [3:0]  ARM_A9_HPS_h2f_lw_axi_master_arlen,                                       //                                                                   .arlen
		input  wire [2:0]  ARM_A9_HPS_h2f_lw_axi_master_arsize,                                      //                                                                   .arsize
		input  wire [1:0]  ARM_A9_HPS_h2f_lw_axi_master_arburst,                                     //                                                                   .arburst
		input  wire [1:0]  ARM_A9_HPS_h2f_lw_axi_master_arlock,                                      //                                                                   .arlock
		input  wire [3:0]  ARM_A9_HPS_h2f_lw_axi_master_arcache,                                     //                                                                   .arcache
		input  wire [2:0]  ARM_A9_HPS_h2f_lw_axi_master_arprot,                                      //                                                                   .arprot
		input  wire        ARM_A9_HPS_h2f_lw_axi_master_arvalid,                                     //                                                                   .arvalid
		output wire        ARM_A9_HPS_h2f_lw_axi_master_arready,                                     //                                                                   .arready
		output wire [11:0] ARM_A9_HPS_h2f_lw_axi_master_rid,                                         //                                                                   .rid
		output wire [31:0] ARM_A9_HPS_h2f_lw_axi_master_rdata,                                       //                                                                   .rdata
		output wire [1:0]  ARM_A9_HPS_h2f_lw_axi_master_rresp,                                       //                                                                   .rresp
		output wire        ARM_A9_HPS_h2f_lw_axi_master_rlast,                                       //                                                                   .rlast
		output wire        ARM_A9_HPS_h2f_lw_axi_master_rvalid,                                      //                                                                   .rvalid
		input  wire        ARM_A9_HPS_h2f_lw_axi_master_rready,                                      //                                                                   .rready
		input  wire        System_PLL_sys_clk_clk,                                                   //                                                 System_PLL_sys_clk.clk
		input  wire        ADC_reset_reset_bridge_in_reset_reset,                                    //                                    ADC_reset_reset_bridge_in_reset.reset
		input  wire        ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset, // ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset.reset
		input  wire        JTAG_to_FPGA_Bridge_clk_reset_reset_bridge_in_reset_reset,                //                JTAG_to_FPGA_Bridge_clk_reset_reset_bridge_in_reset.reset
		input  wire        Nios2_2nd_Core_reset_reset_bridge_in_reset_reset,                         //                         Nios2_2nd_Core_reset_reset_bridge_in_reset.reset
		input  wire        Nios2_reset_reset_bridge_in_reset_reset,                                  //                                  Nios2_reset_reset_bridge_in_reset.reset
		input  wire [31:0] JTAG_to_FPGA_Bridge_master_address,                                       //                                         JTAG_to_FPGA_Bridge_master.address
		output wire        JTAG_to_FPGA_Bridge_master_waitrequest,                                   //                                                                   .waitrequest
		input  wire [3:0]  JTAG_to_FPGA_Bridge_master_byteenable,                                    //                                                                   .byteenable
		input  wire        JTAG_to_FPGA_Bridge_master_read,                                          //                                                                   .read
		output wire [31:0] JTAG_to_FPGA_Bridge_master_readdata,                                      //                                                                   .readdata
		output wire        JTAG_to_FPGA_Bridge_master_readdatavalid,                                 //                                                                   .readdatavalid
		input  wire        JTAG_to_FPGA_Bridge_master_write,                                         //                                                                   .write
		input  wire [31:0] JTAG_to_FPGA_Bridge_master_writedata,                                     //                                                                   .writedata
		input  wire [31:0] Nios2_data_master_address,                                                //                                                  Nios2_data_master.address
		output wire        Nios2_data_master_waitrequest,                                            //                                                                   .waitrequest
		input  wire [3:0]  Nios2_data_master_byteenable,                                             //                                                                   .byteenable
		input  wire        Nios2_data_master_read,                                                   //                                                                   .read
		output wire [31:0] Nios2_data_master_readdata,                                               //                                                                   .readdata
		input  wire        Nios2_data_master_write,                                                  //                                                                   .write
		input  wire [31:0] Nios2_data_master_writedata,                                              //                                                                   .writedata
		input  wire        Nios2_data_master_debugaccess,                                            //                                                                   .debugaccess
		input  wire [27:0] Nios2_instruction_master_address,                                         //                                           Nios2_instruction_master.address
		output wire        Nios2_instruction_master_waitrequest,                                     //                                                                   .waitrequest
		input  wire        Nios2_instruction_master_read,                                            //                                                                   .read
		output wire [31:0] Nios2_instruction_master_readdata,                                        //                                                                   .readdata
		input  wire [31:0] Nios2_2nd_Core_data_master_address,                                       //                                         Nios2_2nd_Core_data_master.address
		output wire        Nios2_2nd_Core_data_master_waitrequest,                                   //                                                                   .waitrequest
		input  wire [3:0]  Nios2_2nd_Core_data_master_byteenable,                                    //                                                                   .byteenable
		input  wire        Nios2_2nd_Core_data_master_read,                                          //                                                                   .read
		output wire [31:0] Nios2_2nd_Core_data_master_readdata,                                      //                                                                   .readdata
		input  wire        Nios2_2nd_Core_data_master_write,                                         //                                                                   .write
		input  wire [31:0] Nios2_2nd_Core_data_master_writedata,                                     //                                                                   .writedata
		input  wire        Nios2_2nd_Core_data_master_debugaccess,                                   //                                                                   .debugaccess
		input  wire [27:0] Nios2_2nd_Core_instruction_master_address,                                //                                  Nios2_2nd_Core_instruction_master.address
		output wire        Nios2_2nd_Core_instruction_master_waitrequest,                            //                                                                   .waitrequest
		input  wire        Nios2_2nd_Core_instruction_master_read,                                   //                                                                   .read
		output wire [31:0] Nios2_2nd_Core_instruction_master_readdata,                               //                                                                   .readdata
		output wire [2:0]  ADC_adc_slave_address,                                                    //                                                      ADC_adc_slave.address
		output wire        ADC_adc_slave_write,                                                      //                                                                   .write
		output wire        ADC_adc_slave_read,                                                       //                                                                   .read
		input  wire [31:0] ADC_adc_slave_readdata,                                                   //                                                                   .readdata
		output wire [31:0] ADC_adc_slave_writedata,                                                  //                                                                   .writedata
		input  wire        ADC_adc_slave_waitrequest,                                                //                                                                   .waitrequest
		output wire [1:0]  Arduino_GPIO_s1_address,                                                  //                                                    Arduino_GPIO_s1.address
		output wire        Arduino_GPIO_s1_write,                                                    //                                                                   .write
		input  wire [31:0] Arduino_GPIO_s1_readdata,                                                 //                                                                   .readdata
		output wire [31:0] Arduino_GPIO_s1_writedata,                                                //                                                                   .writedata
		output wire        Arduino_GPIO_s1_chipselect,                                               //                                                                   .chipselect
		output wire [1:0]  Arduino_Reset_N_s1_address,                                               //                                                 Arduino_Reset_N_s1.address
		output wire        Arduino_Reset_N_s1_write,                                                 //                                                                   .write
		input  wire [31:0] Arduino_Reset_N_s1_readdata,                                              //                                                                   .readdata
		output wire [31:0] Arduino_Reset_N_s1_writedata,                                             //                                                                   .writedata
		output wire        Arduino_Reset_N_s1_chipselect,                                            //                                                                   .chipselect
		output wire [1:0]  Expansion_JP1_s1_address,                                                 //                                                   Expansion_JP1_s1.address
		output wire        Expansion_JP1_s1_write,                                                   //                                                                   .write
		input  wire [31:0] Expansion_JP1_s1_readdata,                                                //                                                                   .readdata
		output wire [31:0] Expansion_JP1_s1_writedata,                                               //                                                                   .writedata
		output wire        Expansion_JP1_s1_chipselect,                                              //                                                                   .chipselect
		output wire [1:0]  Expansion_JP7_s1_address,                                                 //                                                   Expansion_JP7_s1.address
		output wire        Expansion_JP7_s1_write,                                                   //                                                                   .write
		input  wire [31:0] Expansion_JP7_s1_readdata,                                                //                                                                   .readdata
		output wire [31:0] Expansion_JP7_s1_writedata,                                               //                                                                   .writedata
		output wire        Expansion_JP7_s1_chipselect,                                              //                                                                   .chipselect
		output wire [27:0] F2H_Mem_Window_00000000_windowed_slave_address,                           //                             F2H_Mem_Window_00000000_windowed_slave.address
		output wire        F2H_Mem_Window_00000000_windowed_slave_write,                             //                                                                   .write
		output wire        F2H_Mem_Window_00000000_windowed_slave_read,                              //                                                                   .read
		input  wire [31:0] F2H_Mem_Window_00000000_windowed_slave_readdata,                          //                                                                   .readdata
		output wire [31:0] F2H_Mem_Window_00000000_windowed_slave_writedata,                         //                                                                   .writedata
		output wire [0:0]  F2H_Mem_Window_00000000_windowed_slave_burstcount,                        //                                                                   .burstcount
		output wire [3:0]  F2H_Mem_Window_00000000_windowed_slave_byteenable,                        //                                                                   .byteenable
		input  wire        F2H_Mem_Window_00000000_windowed_slave_readdatavalid,                     //                                                                   .readdatavalid
		input  wire        F2H_Mem_Window_00000000_windowed_slave_waitrequest,                       //                                                                   .waitrequest
		output wire [18:0] F2H_Mem_Window_FF600000_windowed_slave_address,                           //                             F2H_Mem_Window_FF600000_windowed_slave.address
		output wire        F2H_Mem_Window_FF600000_windowed_slave_write,                             //                                                                   .write
		output wire        F2H_Mem_Window_FF600000_windowed_slave_read,                              //                                                                   .read
		input  wire [31:0] F2H_Mem_Window_FF600000_windowed_slave_readdata,                          //                                                                   .readdata
		output wire [31:0] F2H_Mem_Window_FF600000_windowed_slave_writedata,                         //                                                                   .writedata
		output wire [0:0]  F2H_Mem_Window_FF600000_windowed_slave_burstcount,                        //                                                                   .burstcount
		output wire [3:0]  F2H_Mem_Window_FF600000_windowed_slave_byteenable,                        //                                                                   .byteenable
		input  wire        F2H_Mem_Window_FF600000_windowed_slave_readdatavalid,                     //                                                                   .readdatavalid
		input  wire        F2H_Mem_Window_FF600000_windowed_slave_waitrequest,                       //                                                                   .waitrequest
		output wire [20:0] F2H_Mem_Window_FF800000_windowed_slave_address,                           //                             F2H_Mem_Window_FF800000_windowed_slave.address
		output wire        F2H_Mem_Window_FF800000_windowed_slave_write,                             //                                                                   .write
		output wire        F2H_Mem_Window_FF800000_windowed_slave_read,                              //                                                                   .read
		input  wire [31:0] F2H_Mem_Window_FF800000_windowed_slave_readdata,                          //                                                                   .readdata
		output wire [31:0] F2H_Mem_Window_FF800000_windowed_slave_writedata,                         //                                                                   .writedata
		output wire [0:0]  F2H_Mem_Window_FF800000_windowed_slave_burstcount,                        //                                                                   .burstcount
		output wire [3:0]  F2H_Mem_Window_FF800000_windowed_slave_byteenable,                        //                                                                   .byteenable
		input  wire        F2H_Mem_Window_FF800000_windowed_slave_readdatavalid,                     //                                                                   .readdatavalid
		input  wire        F2H_Mem_Window_FF800000_windowed_slave_waitrequest,                       //                                                                   .waitrequest
		output wire [2:0]  Interval_Timer_s1_address,                                                //                                                  Interval_Timer_s1.address
		output wire        Interval_Timer_s1_write,                                                  //                                                                   .write
		input  wire [15:0] Interval_Timer_s1_readdata,                                               //                                                                   .readdata
		output wire [15:0] Interval_Timer_s1_writedata,                                              //                                                                   .writedata
		output wire        Interval_Timer_s1_chipselect,                                             //                                                                   .chipselect
		output wire [2:0]  Interval_Timer_2_s1_address,                                              //                                                Interval_Timer_2_s1.address
		output wire        Interval_Timer_2_s1_write,                                                //                                                                   .write
		input  wire [15:0] Interval_Timer_2_s1_readdata,                                             //                                                                   .readdata
		output wire [15:0] Interval_Timer_2_s1_writedata,                                            //                                                                   .writedata
		output wire        Interval_Timer_2_s1_chipselect,                                           //                                                                   .chipselect
		output wire [2:0]  Interval_Timer_2nd_Core_s1_address,                                       //                                         Interval_Timer_2nd_Core_s1.address
		output wire        Interval_Timer_2nd_Core_s1_write,                                         //                                                                   .write
		input  wire [15:0] Interval_Timer_2nd_Core_s1_readdata,                                      //                                                                   .readdata
		output wire [15:0] Interval_Timer_2nd_Core_s1_writedata,                                     //                                                                   .writedata
		output wire        Interval_Timer_2nd_Core_s1_chipselect,                                    //                                                                   .chipselect
		output wire [2:0]  Interval_Timer_2nd_Core_2_s1_address,                                     //                                       Interval_Timer_2nd_Core_2_s1.address
		output wire        Interval_Timer_2nd_Core_2_s1_write,                                       //                                                                   .write
		input  wire [15:0] Interval_Timer_2nd_Core_2_s1_readdata,                                    //                                                                   .readdata
		output wire [15:0] Interval_Timer_2nd_Core_2_s1_writedata,                                   //                                                                   .writedata
		output wire        Interval_Timer_2nd_Core_2_s1_chipselect,                                  //                                                                   .chipselect
		output wire [0:0]  JTAG_UART_avalon_jtag_slave_address,                                      //                                        JTAG_UART_avalon_jtag_slave.address
		output wire        JTAG_UART_avalon_jtag_slave_write,                                        //                                                                   .write
		output wire        JTAG_UART_avalon_jtag_slave_read,                                         //                                                                   .read
		input  wire [31:0] JTAG_UART_avalon_jtag_slave_readdata,                                     //                                                                   .readdata
		output wire [31:0] JTAG_UART_avalon_jtag_slave_writedata,                                    //                                                                   .writedata
		input  wire        JTAG_UART_avalon_jtag_slave_waitrequest,                                  //                                                                   .waitrequest
		output wire        JTAG_UART_avalon_jtag_slave_chipselect,                                   //                                                                   .chipselect
		output wire [0:0]  JTAG_UART_2nd_Core_avalon_jtag_slave_address,                             //                               JTAG_UART_2nd_Core_avalon_jtag_slave.address
		output wire        JTAG_UART_2nd_Core_avalon_jtag_slave_write,                               //                                                                   .write
		output wire        JTAG_UART_2nd_Core_avalon_jtag_slave_read,                                //                                                                   .read
		input  wire [31:0] JTAG_UART_2nd_Core_avalon_jtag_slave_readdata,                            //                                                                   .readdata
		output wire [31:0] JTAG_UART_2nd_Core_avalon_jtag_slave_writedata,                           //                                                                   .writedata
		input  wire        JTAG_UART_2nd_Core_avalon_jtag_slave_waitrequest,                         //                                                                   .waitrequest
		output wire        JTAG_UART_2nd_Core_avalon_jtag_slave_chipselect,                          //                                                                   .chipselect
		output wire [0:0]  JTAG_UART_for_ARM_0_avalon_jtag_slave_address,                            //                              JTAG_UART_for_ARM_0_avalon_jtag_slave.address
		output wire        JTAG_UART_for_ARM_0_avalon_jtag_slave_write,                              //                                                                   .write
		output wire        JTAG_UART_for_ARM_0_avalon_jtag_slave_read,                               //                                                                   .read
		input  wire [31:0] JTAG_UART_for_ARM_0_avalon_jtag_slave_readdata,                           //                                                                   .readdata
		output wire [31:0] JTAG_UART_for_ARM_0_avalon_jtag_slave_writedata,                          //                                                                   .writedata
		input  wire        JTAG_UART_for_ARM_0_avalon_jtag_slave_waitrequest,                        //                                                                   .waitrequest
		output wire        JTAG_UART_for_ARM_0_avalon_jtag_slave_chipselect,                         //                                                                   .chipselect
		output wire [0:0]  JTAG_UART_for_ARM_1_avalon_jtag_slave_address,                            //                              JTAG_UART_for_ARM_1_avalon_jtag_slave.address
		output wire        JTAG_UART_for_ARM_1_avalon_jtag_slave_write,                              //                                                                   .write
		output wire        JTAG_UART_for_ARM_1_avalon_jtag_slave_read,                               //                                                                   .read
		input  wire [31:0] JTAG_UART_for_ARM_1_avalon_jtag_slave_readdata,                           //                                                                   .readdata
		output wire [31:0] JTAG_UART_for_ARM_1_avalon_jtag_slave_writedata,                          //                                                                   .writedata
		input  wire        JTAG_UART_for_ARM_1_avalon_jtag_slave_waitrequest,                        //                                                                   .waitrequest
		output wire        JTAG_UART_for_ARM_1_avalon_jtag_slave_chipselect,                         //                                                                   .chipselect
		output wire [1:0]  LEDs_s1_address,                                                          //                                                            LEDs_s1.address
		output wire        LEDs_s1_write,                                                            //                                                                   .write
		input  wire [31:0] LEDs_s1_readdata,                                                         //                                                                   .readdata
		output wire [31:0] LEDs_s1_writedata,                                                        //                                                                   .writedata
		output wire        LEDs_s1_chipselect,                                                       //                                                                   .chipselect
		output wire [8:0]  Nios2_debug_mem_slave_address,                                            //                                              Nios2_debug_mem_slave.address
		output wire        Nios2_debug_mem_slave_write,                                              //                                                                   .write
		output wire        Nios2_debug_mem_slave_read,                                               //                                                                   .read
		input  wire [31:0] Nios2_debug_mem_slave_readdata,                                           //                                                                   .readdata
		output wire [31:0] Nios2_debug_mem_slave_writedata,                                          //                                                                   .writedata
		output wire [3:0]  Nios2_debug_mem_slave_byteenable,                                         //                                                                   .byteenable
		input  wire        Nios2_debug_mem_slave_waitrequest,                                        //                                                                   .waitrequest
		output wire        Nios2_debug_mem_slave_debugaccess,                                        //                                                                   .debugaccess
		output wire [8:0]  Nios2_2nd_Core_debug_mem_slave_address,                                   //                                     Nios2_2nd_Core_debug_mem_slave.address
		output wire        Nios2_2nd_Core_debug_mem_slave_write,                                     //                                                                   .write
		output wire        Nios2_2nd_Core_debug_mem_slave_read,                                      //                                                                   .read
		input  wire [31:0] Nios2_2nd_Core_debug_mem_slave_readdata,                                  //                                                                   .readdata
		output wire [31:0] Nios2_2nd_Core_debug_mem_slave_writedata,                                 //                                                                   .writedata
		output wire [3:0]  Nios2_2nd_Core_debug_mem_slave_byteenable,                                //                                                                   .byteenable
		input  wire        Nios2_2nd_Core_debug_mem_slave_waitrequest,                               //                                                                   .waitrequest
		output wire        Nios2_2nd_Core_debug_mem_slave_debugaccess,                               //                                                                   .debugaccess
		output wire [12:0] Nios2_2nd_Core_SRAM_s1_address,                                           //                                             Nios2_2nd_Core_SRAM_s1.address
		output wire        Nios2_2nd_Core_SRAM_s1_write,                                             //                                                                   .write
		input  wire [31:0] Nios2_2nd_Core_SRAM_s1_readdata,                                          //                                                                   .readdata
		output wire [31:0] Nios2_2nd_Core_SRAM_s1_writedata,                                         //                                                                   .writedata
		output wire [3:0]  Nios2_2nd_Core_SRAM_s1_byteenable,                                        //                                                                   .byteenable
		output wire        Nios2_2nd_Core_SRAM_s1_chipselect,                                        //                                                                   .chipselect
		output wire        Nios2_2nd_Core_SRAM_s1_clken,                                             //                                                                   .clken
		output wire [12:0] Nios2_2nd_Core_SRAM_s2_address,                                           //                                             Nios2_2nd_Core_SRAM_s2.address
		output wire        Nios2_2nd_Core_SRAM_s2_write,                                             //                                                                   .write
		input  wire [31:0] Nios2_2nd_Core_SRAM_s2_readdata,                                          //                                                                   .readdata
		output wire [31:0] Nios2_2nd_Core_SRAM_s2_writedata,                                         //                                                                   .writedata
		output wire [3:0]  Nios2_2nd_Core_SRAM_s2_byteenable,                                        //                                                                   .byteenable
		output wire        Nios2_2nd_Core_SRAM_s2_chipselect,                                        //                                                                   .chipselect
		output wire        Nios2_2nd_Core_SRAM_s2_clken,                                             //                                                                   .clken
		output wire [12:0] Nios2_SRAM_s1_address,                                                    //                                                      Nios2_SRAM_s1.address
		output wire        Nios2_SRAM_s1_write,                                                      //                                                                   .write
		input  wire [31:0] Nios2_SRAM_s1_readdata,                                                   //                                                                   .readdata
		output wire [31:0] Nios2_SRAM_s1_writedata,                                                  //                                                                   .writedata
		output wire [3:0]  Nios2_SRAM_s1_byteenable,                                                 //                                                                   .byteenable
		output wire        Nios2_SRAM_s1_chipselect,                                                 //                                                                   .chipselect
		output wire        Nios2_SRAM_s1_clken,                                                      //                                                                   .clken
		output wire [12:0] Nios2_SRAM_s2_address,                                                    //                                                      Nios2_SRAM_s2.address
		output wire        Nios2_SRAM_s2_write,                                                      //                                                                   .write
		input  wire [31:0] Nios2_SRAM_s2_readdata,                                                   //                                                                   .readdata
		output wire [31:0] Nios2_SRAM_s2_writedata,                                                  //                                                                   .writedata
		output wire [3:0]  Nios2_SRAM_s2_byteenable,                                                 //                                                                   .byteenable
		output wire        Nios2_SRAM_s2_chipselect,                                                 //                                                                   .chipselect
		output wire        Nios2_SRAM_s2_clken,                                                      //                                                                   .clken
		output wire [15:0] Onchip_SRAM_s1_address,                                                   //                                                     Onchip_SRAM_s1.address
		output wire        Onchip_SRAM_s1_write,                                                     //                                                                   .write
		input  wire [31:0] Onchip_SRAM_s1_readdata,                                                  //                                                                   .readdata
		output wire [31:0] Onchip_SRAM_s1_writedata,                                                 //                                                                   .writedata
		output wire [3:0]  Onchip_SRAM_s1_byteenable,                                                //                                                                   .byteenable
		output wire        Onchip_SRAM_s1_chipselect,                                                //                                                                   .chipselect
		output wire        Onchip_SRAM_s1_clken,                                                     //                                                                   .clken
		output wire [15:0] Onchip_SRAM_s2_address,                                                   //                                                     Onchip_SRAM_s2.address
		output wire        Onchip_SRAM_s2_write,                                                     //                                                                   .write
		input  wire [31:0] Onchip_SRAM_s2_readdata,                                                  //                                                                   .readdata
		output wire [31:0] Onchip_SRAM_s2_writedata,                                                 //                                                                   .writedata
		output wire [3:0]  Onchip_SRAM_s2_byteenable,                                                //                                                                   .byteenable
		output wire        Onchip_SRAM_s2_chipselect,                                                //                                                                   .chipselect
		output wire        Onchip_SRAM_s2_clken,                                                     //                                                                   .clken
		output wire [1:0]  Pushbuttons_s1_address,                                                   //                                                     Pushbuttons_s1.address
		output wire        Pushbuttons_s1_write,                                                     //                                                                   .write
		input  wire [31:0] Pushbuttons_s1_readdata,                                                  //                                                                   .readdata
		output wire [31:0] Pushbuttons_s1_writedata,                                                 //                                                                   .writedata
		output wire        Pushbuttons_s1_chipselect,                                                //                                                                   .chipselect
		output wire [1:0]  Slider_Switches_s1_address,                                               //                                                 Slider_Switches_s1.address
		input  wire [31:0] Slider_Switches_s1_readdata,                                              //                                                                   .readdata
		output wire [0:0]  SysID_control_slave_address,                                              //                                                SysID_control_slave.address
		input  wire [31:0] SysID_control_slave_readdata                                              //                                                                   .readdata
	);

	wire          nios2_data_master_translator_avalon_universal_master_0_waitrequest;                   // Nios2_data_master_agent:av_waitrequest -> Nios2_data_master_translator:uav_waitrequest
	wire   [31:0] nios2_data_master_translator_avalon_universal_master_0_readdata;                      // Nios2_data_master_agent:av_readdata -> Nios2_data_master_translator:uav_readdata
	wire          nios2_data_master_translator_avalon_universal_master_0_debugaccess;                   // Nios2_data_master_translator:uav_debugaccess -> Nios2_data_master_agent:av_debugaccess
	wire   [31:0] nios2_data_master_translator_avalon_universal_master_0_address;                       // Nios2_data_master_translator:uav_address -> Nios2_data_master_agent:av_address
	wire          nios2_data_master_translator_avalon_universal_master_0_read;                          // Nios2_data_master_translator:uav_read -> Nios2_data_master_agent:av_read
	wire    [3:0] nios2_data_master_translator_avalon_universal_master_0_byteenable;                    // Nios2_data_master_translator:uav_byteenable -> Nios2_data_master_agent:av_byteenable
	wire          nios2_data_master_translator_avalon_universal_master_0_readdatavalid;                 // Nios2_data_master_agent:av_readdatavalid -> Nios2_data_master_translator:uav_readdatavalid
	wire          nios2_data_master_translator_avalon_universal_master_0_lock;                          // Nios2_data_master_translator:uav_lock -> Nios2_data_master_agent:av_lock
	wire          nios2_data_master_translator_avalon_universal_master_0_write;                         // Nios2_data_master_translator:uav_write -> Nios2_data_master_agent:av_write
	wire   [31:0] nios2_data_master_translator_avalon_universal_master_0_writedata;                     // Nios2_data_master_translator:uav_writedata -> Nios2_data_master_agent:av_writedata
	wire    [2:0] nios2_data_master_translator_avalon_universal_master_0_burstcount;                    // Nios2_data_master_translator:uav_burstcount -> Nios2_data_master_agent:av_burstcount
	wire          rsp_mux_002_src_valid;                                                                // rsp_mux_002:src_valid -> Nios2_data_master_agent:rp_valid
	wire  [132:0] rsp_mux_002_src_data;                                                                 // rsp_mux_002:src_data -> Nios2_data_master_agent:rp_data
	wire          rsp_mux_002_src_ready;                                                                // Nios2_data_master_agent:rp_ready -> rsp_mux_002:src_ready
	wire   [27:0] rsp_mux_002_src_channel;                                                              // rsp_mux_002:src_channel -> Nios2_data_master_agent:rp_channel
	wire          rsp_mux_002_src_startofpacket;                                                        // rsp_mux_002:src_startofpacket -> Nios2_data_master_agent:rp_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                          // rsp_mux_002:src_endofpacket -> Nios2_data_master_agent:rp_endofpacket
	wire          nios2_2nd_core_data_master_translator_avalon_universal_master_0_waitrequest;          // Nios2_2nd_Core_data_master_agent:av_waitrequest -> Nios2_2nd_Core_data_master_translator:uav_waitrequest
	wire   [31:0] nios2_2nd_core_data_master_translator_avalon_universal_master_0_readdata;             // Nios2_2nd_Core_data_master_agent:av_readdata -> Nios2_2nd_Core_data_master_translator:uav_readdata
	wire          nios2_2nd_core_data_master_translator_avalon_universal_master_0_debugaccess;          // Nios2_2nd_Core_data_master_translator:uav_debugaccess -> Nios2_2nd_Core_data_master_agent:av_debugaccess
	wire   [31:0] nios2_2nd_core_data_master_translator_avalon_universal_master_0_address;              // Nios2_2nd_Core_data_master_translator:uav_address -> Nios2_2nd_Core_data_master_agent:av_address
	wire          nios2_2nd_core_data_master_translator_avalon_universal_master_0_read;                 // Nios2_2nd_Core_data_master_translator:uav_read -> Nios2_2nd_Core_data_master_agent:av_read
	wire    [3:0] nios2_2nd_core_data_master_translator_avalon_universal_master_0_byteenable;           // Nios2_2nd_Core_data_master_translator:uav_byteenable -> Nios2_2nd_Core_data_master_agent:av_byteenable
	wire          nios2_2nd_core_data_master_translator_avalon_universal_master_0_readdatavalid;        // Nios2_2nd_Core_data_master_agent:av_readdatavalid -> Nios2_2nd_Core_data_master_translator:uav_readdatavalid
	wire          nios2_2nd_core_data_master_translator_avalon_universal_master_0_lock;                 // Nios2_2nd_Core_data_master_translator:uav_lock -> Nios2_2nd_Core_data_master_agent:av_lock
	wire          nios2_2nd_core_data_master_translator_avalon_universal_master_0_write;                // Nios2_2nd_Core_data_master_translator:uav_write -> Nios2_2nd_Core_data_master_agent:av_write
	wire   [31:0] nios2_2nd_core_data_master_translator_avalon_universal_master_0_writedata;            // Nios2_2nd_Core_data_master_translator:uav_writedata -> Nios2_2nd_Core_data_master_agent:av_writedata
	wire    [2:0] nios2_2nd_core_data_master_translator_avalon_universal_master_0_burstcount;           // Nios2_2nd_Core_data_master_translator:uav_burstcount -> Nios2_2nd_Core_data_master_agent:av_burstcount
	wire          rsp_mux_003_src_valid;                                                                // rsp_mux_003:src_valid -> Nios2_2nd_Core_data_master_agent:rp_valid
	wire  [132:0] rsp_mux_003_src_data;                                                                 // rsp_mux_003:src_data -> Nios2_2nd_Core_data_master_agent:rp_data
	wire          rsp_mux_003_src_ready;                                                                // Nios2_2nd_Core_data_master_agent:rp_ready -> rsp_mux_003:src_ready
	wire   [27:0] rsp_mux_003_src_channel;                                                              // rsp_mux_003:src_channel -> Nios2_2nd_Core_data_master_agent:rp_channel
	wire          rsp_mux_003_src_startofpacket;                                                        // rsp_mux_003:src_startofpacket -> Nios2_2nd_Core_data_master_agent:rp_startofpacket
	wire          rsp_mux_003_src_endofpacket;                                                          // rsp_mux_003:src_endofpacket -> Nios2_2nd_Core_data_master_agent:rp_endofpacket
	wire          jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_waitrequest;          // JTAG_to_FPGA_Bridge_master_agent:av_waitrequest -> JTAG_to_FPGA_Bridge_master_translator:uav_waitrequest
	wire   [31:0] jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_readdata;             // JTAG_to_FPGA_Bridge_master_agent:av_readdata -> JTAG_to_FPGA_Bridge_master_translator:uav_readdata
	wire          jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_debugaccess;          // JTAG_to_FPGA_Bridge_master_translator:uav_debugaccess -> JTAG_to_FPGA_Bridge_master_agent:av_debugaccess
	wire   [31:0] jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_address;              // JTAG_to_FPGA_Bridge_master_translator:uav_address -> JTAG_to_FPGA_Bridge_master_agent:av_address
	wire          jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_read;                 // JTAG_to_FPGA_Bridge_master_translator:uav_read -> JTAG_to_FPGA_Bridge_master_agent:av_read
	wire    [3:0] jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_byteenable;           // JTAG_to_FPGA_Bridge_master_translator:uav_byteenable -> JTAG_to_FPGA_Bridge_master_agent:av_byteenable
	wire          jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_readdatavalid;        // JTAG_to_FPGA_Bridge_master_agent:av_readdatavalid -> JTAG_to_FPGA_Bridge_master_translator:uav_readdatavalid
	wire          jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_lock;                 // JTAG_to_FPGA_Bridge_master_translator:uav_lock -> JTAG_to_FPGA_Bridge_master_agent:av_lock
	wire          jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_write;                // JTAG_to_FPGA_Bridge_master_translator:uav_write -> JTAG_to_FPGA_Bridge_master_agent:av_write
	wire   [31:0] jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_writedata;            // JTAG_to_FPGA_Bridge_master_translator:uav_writedata -> JTAG_to_FPGA_Bridge_master_agent:av_writedata
	wire    [2:0] jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_burstcount;           // JTAG_to_FPGA_Bridge_master_translator:uav_burstcount -> JTAG_to_FPGA_Bridge_master_agent:av_burstcount
	wire          nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_waitrequest;   // Nios2_2nd_Core_instruction_master_agent:av_waitrequest -> Nios2_2nd_Core_instruction_master_translator:uav_waitrequest
	wire   [31:0] nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_readdata;      // Nios2_2nd_Core_instruction_master_agent:av_readdata -> Nios2_2nd_Core_instruction_master_translator:uav_readdata
	wire          nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_debugaccess;   // Nios2_2nd_Core_instruction_master_translator:uav_debugaccess -> Nios2_2nd_Core_instruction_master_agent:av_debugaccess
	wire   [31:0] nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_address;       // Nios2_2nd_Core_instruction_master_translator:uav_address -> Nios2_2nd_Core_instruction_master_agent:av_address
	wire          nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_read;          // Nios2_2nd_Core_instruction_master_translator:uav_read -> Nios2_2nd_Core_instruction_master_agent:av_read
	wire    [3:0] nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_byteenable;    // Nios2_2nd_Core_instruction_master_translator:uav_byteenable -> Nios2_2nd_Core_instruction_master_agent:av_byteenable
	wire          nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_readdatavalid; // Nios2_2nd_Core_instruction_master_agent:av_readdatavalid -> Nios2_2nd_Core_instruction_master_translator:uav_readdatavalid
	wire          nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_lock;          // Nios2_2nd_Core_instruction_master_translator:uav_lock -> Nios2_2nd_Core_instruction_master_agent:av_lock
	wire          nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_write;         // Nios2_2nd_Core_instruction_master_translator:uav_write -> Nios2_2nd_Core_instruction_master_agent:av_write
	wire   [31:0] nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_writedata;     // Nios2_2nd_Core_instruction_master_translator:uav_writedata -> Nios2_2nd_Core_instruction_master_agent:av_writedata
	wire    [2:0] nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_burstcount;    // Nios2_2nd_Core_instruction_master_translator:uav_burstcount -> Nios2_2nd_Core_instruction_master_agent:av_burstcount
	wire          rsp_mux_005_src_valid;                                                                // rsp_mux_005:src_valid -> Nios2_2nd_Core_instruction_master_agent:rp_valid
	wire  [132:0] rsp_mux_005_src_data;                                                                 // rsp_mux_005:src_data -> Nios2_2nd_Core_instruction_master_agent:rp_data
	wire          rsp_mux_005_src_ready;                                                                // Nios2_2nd_Core_instruction_master_agent:rp_ready -> rsp_mux_005:src_ready
	wire   [27:0] rsp_mux_005_src_channel;                                                              // rsp_mux_005:src_channel -> Nios2_2nd_Core_instruction_master_agent:rp_channel
	wire          rsp_mux_005_src_startofpacket;                                                        // rsp_mux_005:src_startofpacket -> Nios2_2nd_Core_instruction_master_agent:rp_startofpacket
	wire          rsp_mux_005_src_endofpacket;                                                          // rsp_mux_005:src_endofpacket -> Nios2_2nd_Core_instruction_master_agent:rp_endofpacket
	wire          nios2_instruction_master_translator_avalon_universal_master_0_waitrequest;            // Nios2_instruction_master_agent:av_waitrequest -> Nios2_instruction_master_translator:uav_waitrequest
	wire   [31:0] nios2_instruction_master_translator_avalon_universal_master_0_readdata;               // Nios2_instruction_master_agent:av_readdata -> Nios2_instruction_master_translator:uav_readdata
	wire          nios2_instruction_master_translator_avalon_universal_master_0_debugaccess;            // Nios2_instruction_master_translator:uav_debugaccess -> Nios2_instruction_master_agent:av_debugaccess
	wire   [31:0] nios2_instruction_master_translator_avalon_universal_master_0_address;                // Nios2_instruction_master_translator:uav_address -> Nios2_instruction_master_agent:av_address
	wire          nios2_instruction_master_translator_avalon_universal_master_0_read;                   // Nios2_instruction_master_translator:uav_read -> Nios2_instruction_master_agent:av_read
	wire    [3:0] nios2_instruction_master_translator_avalon_universal_master_0_byteenable;             // Nios2_instruction_master_translator:uav_byteenable -> Nios2_instruction_master_agent:av_byteenable
	wire          nios2_instruction_master_translator_avalon_universal_master_0_readdatavalid;          // Nios2_instruction_master_agent:av_readdatavalid -> Nios2_instruction_master_translator:uav_readdatavalid
	wire          nios2_instruction_master_translator_avalon_universal_master_0_lock;                   // Nios2_instruction_master_translator:uav_lock -> Nios2_instruction_master_agent:av_lock
	wire          nios2_instruction_master_translator_avalon_universal_master_0_write;                  // Nios2_instruction_master_translator:uav_write -> Nios2_instruction_master_agent:av_write
	wire   [31:0] nios2_instruction_master_translator_avalon_universal_master_0_writedata;              // Nios2_instruction_master_translator:uav_writedata -> Nios2_instruction_master_agent:av_writedata
	wire    [2:0] nios2_instruction_master_translator_avalon_universal_master_0_burstcount;             // Nios2_instruction_master_translator:uav_burstcount -> Nios2_instruction_master_agent:av_burstcount
	wire          rsp_mux_006_src_valid;                                                                // rsp_mux_006:src_valid -> Nios2_instruction_master_agent:rp_valid
	wire  [132:0] rsp_mux_006_src_data;                                                                 // rsp_mux_006:src_data -> Nios2_instruction_master_agent:rp_data
	wire          rsp_mux_006_src_ready;                                                                // Nios2_instruction_master_agent:rp_ready -> rsp_mux_006:src_ready
	wire   [27:0] rsp_mux_006_src_channel;                                                              // rsp_mux_006:src_channel -> Nios2_instruction_master_agent:rp_channel
	wire          rsp_mux_006_src_startofpacket;                                                        // rsp_mux_006:src_startofpacket -> Nios2_instruction_master_agent:rp_startofpacket
	wire          rsp_mux_006_src_endofpacket;                                                          // rsp_mux_006:src_endofpacket -> Nios2_instruction_master_agent:rp_endofpacket
	wire   [31:0] adc_adc_slave_agent_m0_readdata;                                                      // ADC_adc_slave_translator:uav_readdata -> ADC_adc_slave_agent:m0_readdata
	wire          adc_adc_slave_agent_m0_waitrequest;                                                   // ADC_adc_slave_translator:uav_waitrequest -> ADC_adc_slave_agent:m0_waitrequest
	wire          adc_adc_slave_agent_m0_debugaccess;                                                   // ADC_adc_slave_agent:m0_debugaccess -> ADC_adc_slave_translator:uav_debugaccess
	wire   [31:0] adc_adc_slave_agent_m0_address;                                                       // ADC_adc_slave_agent:m0_address -> ADC_adc_slave_translator:uav_address
	wire    [3:0] adc_adc_slave_agent_m0_byteenable;                                                    // ADC_adc_slave_agent:m0_byteenable -> ADC_adc_slave_translator:uav_byteenable
	wire          adc_adc_slave_agent_m0_read;                                                          // ADC_adc_slave_agent:m0_read -> ADC_adc_slave_translator:uav_read
	wire          adc_adc_slave_agent_m0_readdatavalid;                                                 // ADC_adc_slave_translator:uav_readdatavalid -> ADC_adc_slave_agent:m0_readdatavalid
	wire          adc_adc_slave_agent_m0_lock;                                                          // ADC_adc_slave_agent:m0_lock -> ADC_adc_slave_translator:uav_lock
	wire   [31:0] adc_adc_slave_agent_m0_writedata;                                                     // ADC_adc_slave_agent:m0_writedata -> ADC_adc_slave_translator:uav_writedata
	wire          adc_adc_slave_agent_m0_write;                                                         // ADC_adc_slave_agent:m0_write -> ADC_adc_slave_translator:uav_write
	wire    [2:0] adc_adc_slave_agent_m0_burstcount;                                                    // ADC_adc_slave_agent:m0_burstcount -> ADC_adc_slave_translator:uav_burstcount
	wire          adc_adc_slave_agent_rf_source_valid;                                                  // ADC_adc_slave_agent:rf_source_valid -> ADC_adc_slave_agent_rsp_fifo:in_valid
	wire  [133:0] adc_adc_slave_agent_rf_source_data;                                                   // ADC_adc_slave_agent:rf_source_data -> ADC_adc_slave_agent_rsp_fifo:in_data
	wire          adc_adc_slave_agent_rf_source_ready;                                                  // ADC_adc_slave_agent_rsp_fifo:in_ready -> ADC_adc_slave_agent:rf_source_ready
	wire          adc_adc_slave_agent_rf_source_startofpacket;                                          // ADC_adc_slave_agent:rf_source_startofpacket -> ADC_adc_slave_agent_rsp_fifo:in_startofpacket
	wire          adc_adc_slave_agent_rf_source_endofpacket;                                            // ADC_adc_slave_agent:rf_source_endofpacket -> ADC_adc_slave_agent_rsp_fifo:in_endofpacket
	wire          adc_adc_slave_agent_rsp_fifo_out_valid;                                               // ADC_adc_slave_agent_rsp_fifo:out_valid -> ADC_adc_slave_agent:rf_sink_valid
	wire  [133:0] adc_adc_slave_agent_rsp_fifo_out_data;                                                // ADC_adc_slave_agent_rsp_fifo:out_data -> ADC_adc_slave_agent:rf_sink_data
	wire          adc_adc_slave_agent_rsp_fifo_out_ready;                                               // ADC_adc_slave_agent:rf_sink_ready -> ADC_adc_slave_agent_rsp_fifo:out_ready
	wire          adc_adc_slave_agent_rsp_fifo_out_startofpacket;                                       // ADC_adc_slave_agent_rsp_fifo:out_startofpacket -> ADC_adc_slave_agent:rf_sink_startofpacket
	wire          adc_adc_slave_agent_rsp_fifo_out_endofpacket;                                         // ADC_adc_slave_agent_rsp_fifo:out_endofpacket -> ADC_adc_slave_agent:rf_sink_endofpacket
	wire          adc_adc_slave_agent_rdata_fifo_src_valid;                                             // ADC_adc_slave_agent:rdata_fifo_src_valid -> ADC_adc_slave_agent_rdata_fifo:in_valid
	wire   [33:0] adc_adc_slave_agent_rdata_fifo_src_data;                                              // ADC_adc_slave_agent:rdata_fifo_src_data -> ADC_adc_slave_agent_rdata_fifo:in_data
	wire          adc_adc_slave_agent_rdata_fifo_src_ready;                                             // ADC_adc_slave_agent_rdata_fifo:in_ready -> ADC_adc_slave_agent:rdata_fifo_src_ready
	wire   [31:0] sysid_control_slave_agent_m0_readdata;                                                // SysID_control_slave_translator:uav_readdata -> SysID_control_slave_agent:m0_readdata
	wire          sysid_control_slave_agent_m0_waitrequest;                                             // SysID_control_slave_translator:uav_waitrequest -> SysID_control_slave_agent:m0_waitrequest
	wire          sysid_control_slave_agent_m0_debugaccess;                                             // SysID_control_slave_agent:m0_debugaccess -> SysID_control_slave_translator:uav_debugaccess
	wire   [31:0] sysid_control_slave_agent_m0_address;                                                 // SysID_control_slave_agent:m0_address -> SysID_control_slave_translator:uav_address
	wire    [3:0] sysid_control_slave_agent_m0_byteenable;                                              // SysID_control_slave_agent:m0_byteenable -> SysID_control_slave_translator:uav_byteenable
	wire          sysid_control_slave_agent_m0_read;                                                    // SysID_control_slave_agent:m0_read -> SysID_control_slave_translator:uav_read
	wire          sysid_control_slave_agent_m0_readdatavalid;                                           // SysID_control_slave_translator:uav_readdatavalid -> SysID_control_slave_agent:m0_readdatavalid
	wire          sysid_control_slave_agent_m0_lock;                                                    // SysID_control_slave_agent:m0_lock -> SysID_control_slave_translator:uav_lock
	wire   [31:0] sysid_control_slave_agent_m0_writedata;                                               // SysID_control_slave_agent:m0_writedata -> SysID_control_slave_translator:uav_writedata
	wire          sysid_control_slave_agent_m0_write;                                                   // SysID_control_slave_agent:m0_write -> SysID_control_slave_translator:uav_write
	wire    [2:0] sysid_control_slave_agent_m0_burstcount;                                              // SysID_control_slave_agent:m0_burstcount -> SysID_control_slave_translator:uav_burstcount
	wire          sysid_control_slave_agent_rf_source_valid;                                            // SysID_control_slave_agent:rf_source_valid -> SysID_control_slave_agent_rsp_fifo:in_valid
	wire  [133:0] sysid_control_slave_agent_rf_source_data;                                             // SysID_control_slave_agent:rf_source_data -> SysID_control_slave_agent_rsp_fifo:in_data
	wire          sysid_control_slave_agent_rf_source_ready;                                            // SysID_control_slave_agent_rsp_fifo:in_ready -> SysID_control_slave_agent:rf_source_ready
	wire          sysid_control_slave_agent_rf_source_startofpacket;                                    // SysID_control_slave_agent:rf_source_startofpacket -> SysID_control_slave_agent_rsp_fifo:in_startofpacket
	wire          sysid_control_slave_agent_rf_source_endofpacket;                                      // SysID_control_slave_agent:rf_source_endofpacket -> SysID_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sysid_control_slave_agent_rsp_fifo_out_valid;                                         // SysID_control_slave_agent_rsp_fifo:out_valid -> SysID_control_slave_agent:rf_sink_valid
	wire  [133:0] sysid_control_slave_agent_rsp_fifo_out_data;                                          // SysID_control_slave_agent_rsp_fifo:out_data -> SysID_control_slave_agent:rf_sink_data
	wire          sysid_control_slave_agent_rsp_fifo_out_ready;                                         // SysID_control_slave_agent:rf_sink_ready -> SysID_control_slave_agent_rsp_fifo:out_ready
	wire          sysid_control_slave_agent_rsp_fifo_out_startofpacket;                                 // SysID_control_slave_agent_rsp_fifo:out_startofpacket -> SysID_control_slave_agent:rf_sink_startofpacket
	wire          sysid_control_slave_agent_rsp_fifo_out_endofpacket;                                   // SysID_control_slave_agent_rsp_fifo:out_endofpacket -> SysID_control_slave_agent:rf_sink_endofpacket
	wire          sysid_control_slave_agent_rdata_fifo_src_valid;                                       // SysID_control_slave_agent:rdata_fifo_src_valid -> SysID_control_slave_agent_rdata_fifo:in_valid
	wire   [33:0] sysid_control_slave_agent_rdata_fifo_src_data;                                        // SysID_control_slave_agent:rdata_fifo_src_data -> SysID_control_slave_agent_rdata_fifo:in_data
	wire          sysid_control_slave_agent_rdata_fifo_src_ready;                                       // SysID_control_slave_agent_rdata_fifo:in_ready -> SysID_control_slave_agent:rdata_fifo_src_ready
	wire   [31:0] leds_s1_agent_m0_readdata;                                                            // LEDs_s1_translator:uav_readdata -> LEDs_s1_agent:m0_readdata
	wire          leds_s1_agent_m0_waitrequest;                                                         // LEDs_s1_translator:uav_waitrequest -> LEDs_s1_agent:m0_waitrequest
	wire          leds_s1_agent_m0_debugaccess;                                                         // LEDs_s1_agent:m0_debugaccess -> LEDs_s1_translator:uav_debugaccess
	wire   [31:0] leds_s1_agent_m0_address;                                                             // LEDs_s1_agent:m0_address -> LEDs_s1_translator:uav_address
	wire    [3:0] leds_s1_agent_m0_byteenable;                                                          // LEDs_s1_agent:m0_byteenable -> LEDs_s1_translator:uav_byteenable
	wire          leds_s1_agent_m0_read;                                                                // LEDs_s1_agent:m0_read -> LEDs_s1_translator:uav_read
	wire          leds_s1_agent_m0_readdatavalid;                                                       // LEDs_s1_translator:uav_readdatavalid -> LEDs_s1_agent:m0_readdatavalid
	wire          leds_s1_agent_m0_lock;                                                                // LEDs_s1_agent:m0_lock -> LEDs_s1_translator:uav_lock
	wire   [31:0] leds_s1_agent_m0_writedata;                                                           // LEDs_s1_agent:m0_writedata -> LEDs_s1_translator:uav_writedata
	wire          leds_s1_agent_m0_write;                                                               // LEDs_s1_agent:m0_write -> LEDs_s1_translator:uav_write
	wire    [2:0] leds_s1_agent_m0_burstcount;                                                          // LEDs_s1_agent:m0_burstcount -> LEDs_s1_translator:uav_burstcount
	wire          leds_s1_agent_rf_source_valid;                                                        // LEDs_s1_agent:rf_source_valid -> LEDs_s1_agent_rsp_fifo:in_valid
	wire  [133:0] leds_s1_agent_rf_source_data;                                                         // LEDs_s1_agent:rf_source_data -> LEDs_s1_agent_rsp_fifo:in_data
	wire          leds_s1_agent_rf_source_ready;                                                        // LEDs_s1_agent_rsp_fifo:in_ready -> LEDs_s1_agent:rf_source_ready
	wire          leds_s1_agent_rf_source_startofpacket;                                                // LEDs_s1_agent:rf_source_startofpacket -> LEDs_s1_agent_rsp_fifo:in_startofpacket
	wire          leds_s1_agent_rf_source_endofpacket;                                                  // LEDs_s1_agent:rf_source_endofpacket -> LEDs_s1_agent_rsp_fifo:in_endofpacket
	wire          leds_s1_agent_rsp_fifo_out_valid;                                                     // LEDs_s1_agent_rsp_fifo:out_valid -> LEDs_s1_agent:rf_sink_valid
	wire  [133:0] leds_s1_agent_rsp_fifo_out_data;                                                      // LEDs_s1_agent_rsp_fifo:out_data -> LEDs_s1_agent:rf_sink_data
	wire          leds_s1_agent_rsp_fifo_out_ready;                                                     // LEDs_s1_agent:rf_sink_ready -> LEDs_s1_agent_rsp_fifo:out_ready
	wire          leds_s1_agent_rsp_fifo_out_startofpacket;                                             // LEDs_s1_agent_rsp_fifo:out_startofpacket -> LEDs_s1_agent:rf_sink_startofpacket
	wire          leds_s1_agent_rsp_fifo_out_endofpacket;                                               // LEDs_s1_agent_rsp_fifo:out_endofpacket -> LEDs_s1_agent:rf_sink_endofpacket
	wire          leds_s1_agent_rdata_fifo_src_valid;                                                   // LEDs_s1_agent:rdata_fifo_src_valid -> LEDs_s1_agent_rdata_fifo:in_valid
	wire   [33:0] leds_s1_agent_rdata_fifo_src_data;                                                    // LEDs_s1_agent:rdata_fifo_src_data -> LEDs_s1_agent_rdata_fifo:in_data
	wire          leds_s1_agent_rdata_fifo_src_ready;                                                   // LEDs_s1_agent_rdata_fifo:in_ready -> LEDs_s1_agent:rdata_fifo_src_ready
	wire   [31:0] slider_switches_s1_agent_m0_readdata;                                                 // Slider_Switches_s1_translator:uav_readdata -> Slider_Switches_s1_agent:m0_readdata
	wire          slider_switches_s1_agent_m0_waitrequest;                                              // Slider_Switches_s1_translator:uav_waitrequest -> Slider_Switches_s1_agent:m0_waitrequest
	wire          slider_switches_s1_agent_m0_debugaccess;                                              // Slider_Switches_s1_agent:m0_debugaccess -> Slider_Switches_s1_translator:uav_debugaccess
	wire   [31:0] slider_switches_s1_agent_m0_address;                                                  // Slider_Switches_s1_agent:m0_address -> Slider_Switches_s1_translator:uav_address
	wire    [3:0] slider_switches_s1_agent_m0_byteenable;                                               // Slider_Switches_s1_agent:m0_byteenable -> Slider_Switches_s1_translator:uav_byteenable
	wire          slider_switches_s1_agent_m0_read;                                                     // Slider_Switches_s1_agent:m0_read -> Slider_Switches_s1_translator:uav_read
	wire          slider_switches_s1_agent_m0_readdatavalid;                                            // Slider_Switches_s1_translator:uav_readdatavalid -> Slider_Switches_s1_agent:m0_readdatavalid
	wire          slider_switches_s1_agent_m0_lock;                                                     // Slider_Switches_s1_agent:m0_lock -> Slider_Switches_s1_translator:uav_lock
	wire   [31:0] slider_switches_s1_agent_m0_writedata;                                                // Slider_Switches_s1_agent:m0_writedata -> Slider_Switches_s1_translator:uav_writedata
	wire          slider_switches_s1_agent_m0_write;                                                    // Slider_Switches_s1_agent:m0_write -> Slider_Switches_s1_translator:uav_write
	wire    [2:0] slider_switches_s1_agent_m0_burstcount;                                               // Slider_Switches_s1_agent:m0_burstcount -> Slider_Switches_s1_translator:uav_burstcount
	wire          slider_switches_s1_agent_rf_source_valid;                                             // Slider_Switches_s1_agent:rf_source_valid -> Slider_Switches_s1_agent_rsp_fifo:in_valid
	wire  [133:0] slider_switches_s1_agent_rf_source_data;                                              // Slider_Switches_s1_agent:rf_source_data -> Slider_Switches_s1_agent_rsp_fifo:in_data
	wire          slider_switches_s1_agent_rf_source_ready;                                             // Slider_Switches_s1_agent_rsp_fifo:in_ready -> Slider_Switches_s1_agent:rf_source_ready
	wire          slider_switches_s1_agent_rf_source_startofpacket;                                     // Slider_Switches_s1_agent:rf_source_startofpacket -> Slider_Switches_s1_agent_rsp_fifo:in_startofpacket
	wire          slider_switches_s1_agent_rf_source_endofpacket;                                       // Slider_Switches_s1_agent:rf_source_endofpacket -> Slider_Switches_s1_agent_rsp_fifo:in_endofpacket
	wire          slider_switches_s1_agent_rsp_fifo_out_valid;                                          // Slider_Switches_s1_agent_rsp_fifo:out_valid -> Slider_Switches_s1_agent:rf_sink_valid
	wire  [133:0] slider_switches_s1_agent_rsp_fifo_out_data;                                           // Slider_Switches_s1_agent_rsp_fifo:out_data -> Slider_Switches_s1_agent:rf_sink_data
	wire          slider_switches_s1_agent_rsp_fifo_out_ready;                                          // Slider_Switches_s1_agent:rf_sink_ready -> Slider_Switches_s1_agent_rsp_fifo:out_ready
	wire          slider_switches_s1_agent_rsp_fifo_out_startofpacket;                                  // Slider_Switches_s1_agent_rsp_fifo:out_startofpacket -> Slider_Switches_s1_agent:rf_sink_startofpacket
	wire          slider_switches_s1_agent_rsp_fifo_out_endofpacket;                                    // Slider_Switches_s1_agent_rsp_fifo:out_endofpacket -> Slider_Switches_s1_agent:rf_sink_endofpacket
	wire          slider_switches_s1_agent_rdata_fifo_src_valid;                                        // Slider_Switches_s1_agent:rdata_fifo_src_valid -> Slider_Switches_s1_agent_rdata_fifo:in_valid
	wire   [33:0] slider_switches_s1_agent_rdata_fifo_src_data;                                         // Slider_Switches_s1_agent:rdata_fifo_src_data -> Slider_Switches_s1_agent_rdata_fifo:in_data
	wire          slider_switches_s1_agent_rdata_fifo_src_ready;                                        // Slider_Switches_s1_agent_rdata_fifo:in_ready -> Slider_Switches_s1_agent:rdata_fifo_src_ready
	wire   [31:0] pushbuttons_s1_agent_m0_readdata;                                                     // Pushbuttons_s1_translator:uav_readdata -> Pushbuttons_s1_agent:m0_readdata
	wire          pushbuttons_s1_agent_m0_waitrequest;                                                  // Pushbuttons_s1_translator:uav_waitrequest -> Pushbuttons_s1_agent:m0_waitrequest
	wire          pushbuttons_s1_agent_m0_debugaccess;                                                  // Pushbuttons_s1_agent:m0_debugaccess -> Pushbuttons_s1_translator:uav_debugaccess
	wire   [31:0] pushbuttons_s1_agent_m0_address;                                                      // Pushbuttons_s1_agent:m0_address -> Pushbuttons_s1_translator:uav_address
	wire    [3:0] pushbuttons_s1_agent_m0_byteenable;                                                   // Pushbuttons_s1_agent:m0_byteenable -> Pushbuttons_s1_translator:uav_byteenable
	wire          pushbuttons_s1_agent_m0_read;                                                         // Pushbuttons_s1_agent:m0_read -> Pushbuttons_s1_translator:uav_read
	wire          pushbuttons_s1_agent_m0_readdatavalid;                                                // Pushbuttons_s1_translator:uav_readdatavalid -> Pushbuttons_s1_agent:m0_readdatavalid
	wire          pushbuttons_s1_agent_m0_lock;                                                         // Pushbuttons_s1_agent:m0_lock -> Pushbuttons_s1_translator:uav_lock
	wire   [31:0] pushbuttons_s1_agent_m0_writedata;                                                    // Pushbuttons_s1_agent:m0_writedata -> Pushbuttons_s1_translator:uav_writedata
	wire          pushbuttons_s1_agent_m0_write;                                                        // Pushbuttons_s1_agent:m0_write -> Pushbuttons_s1_translator:uav_write
	wire    [2:0] pushbuttons_s1_agent_m0_burstcount;                                                   // Pushbuttons_s1_agent:m0_burstcount -> Pushbuttons_s1_translator:uav_burstcount
	wire          pushbuttons_s1_agent_rf_source_valid;                                                 // Pushbuttons_s1_agent:rf_source_valid -> Pushbuttons_s1_agent_rsp_fifo:in_valid
	wire  [133:0] pushbuttons_s1_agent_rf_source_data;                                                  // Pushbuttons_s1_agent:rf_source_data -> Pushbuttons_s1_agent_rsp_fifo:in_data
	wire          pushbuttons_s1_agent_rf_source_ready;                                                 // Pushbuttons_s1_agent_rsp_fifo:in_ready -> Pushbuttons_s1_agent:rf_source_ready
	wire          pushbuttons_s1_agent_rf_source_startofpacket;                                         // Pushbuttons_s1_agent:rf_source_startofpacket -> Pushbuttons_s1_agent_rsp_fifo:in_startofpacket
	wire          pushbuttons_s1_agent_rf_source_endofpacket;                                           // Pushbuttons_s1_agent:rf_source_endofpacket -> Pushbuttons_s1_agent_rsp_fifo:in_endofpacket
	wire          pushbuttons_s1_agent_rsp_fifo_out_valid;                                              // Pushbuttons_s1_agent_rsp_fifo:out_valid -> Pushbuttons_s1_agent:rf_sink_valid
	wire  [133:0] pushbuttons_s1_agent_rsp_fifo_out_data;                                               // Pushbuttons_s1_agent_rsp_fifo:out_data -> Pushbuttons_s1_agent:rf_sink_data
	wire          pushbuttons_s1_agent_rsp_fifo_out_ready;                                              // Pushbuttons_s1_agent:rf_sink_ready -> Pushbuttons_s1_agent_rsp_fifo:out_ready
	wire          pushbuttons_s1_agent_rsp_fifo_out_startofpacket;                                      // Pushbuttons_s1_agent_rsp_fifo:out_startofpacket -> Pushbuttons_s1_agent:rf_sink_startofpacket
	wire          pushbuttons_s1_agent_rsp_fifo_out_endofpacket;                                        // Pushbuttons_s1_agent_rsp_fifo:out_endofpacket -> Pushbuttons_s1_agent:rf_sink_endofpacket
	wire          pushbuttons_s1_agent_rdata_fifo_src_valid;                                            // Pushbuttons_s1_agent:rdata_fifo_src_valid -> Pushbuttons_s1_agent_rdata_fifo:in_valid
	wire   [33:0] pushbuttons_s1_agent_rdata_fifo_src_data;                                             // Pushbuttons_s1_agent:rdata_fifo_src_data -> Pushbuttons_s1_agent_rdata_fifo:in_data
	wire          pushbuttons_s1_agent_rdata_fifo_src_ready;                                            // Pushbuttons_s1_agent_rdata_fifo:in_ready -> Pushbuttons_s1_agent:rdata_fifo_src_ready
	wire   [31:0] expansion_jp1_s1_agent_m0_readdata;                                                   // Expansion_JP1_s1_translator:uav_readdata -> Expansion_JP1_s1_agent:m0_readdata
	wire          expansion_jp1_s1_agent_m0_waitrequest;                                                // Expansion_JP1_s1_translator:uav_waitrequest -> Expansion_JP1_s1_agent:m0_waitrequest
	wire          expansion_jp1_s1_agent_m0_debugaccess;                                                // Expansion_JP1_s1_agent:m0_debugaccess -> Expansion_JP1_s1_translator:uav_debugaccess
	wire   [31:0] expansion_jp1_s1_agent_m0_address;                                                    // Expansion_JP1_s1_agent:m0_address -> Expansion_JP1_s1_translator:uav_address
	wire    [3:0] expansion_jp1_s1_agent_m0_byteenable;                                                 // Expansion_JP1_s1_agent:m0_byteenable -> Expansion_JP1_s1_translator:uav_byteenable
	wire          expansion_jp1_s1_agent_m0_read;                                                       // Expansion_JP1_s1_agent:m0_read -> Expansion_JP1_s1_translator:uav_read
	wire          expansion_jp1_s1_agent_m0_readdatavalid;                                              // Expansion_JP1_s1_translator:uav_readdatavalid -> Expansion_JP1_s1_agent:m0_readdatavalid
	wire          expansion_jp1_s1_agent_m0_lock;                                                       // Expansion_JP1_s1_agent:m0_lock -> Expansion_JP1_s1_translator:uav_lock
	wire   [31:0] expansion_jp1_s1_agent_m0_writedata;                                                  // Expansion_JP1_s1_agent:m0_writedata -> Expansion_JP1_s1_translator:uav_writedata
	wire          expansion_jp1_s1_agent_m0_write;                                                      // Expansion_JP1_s1_agent:m0_write -> Expansion_JP1_s1_translator:uav_write
	wire    [2:0] expansion_jp1_s1_agent_m0_burstcount;                                                 // Expansion_JP1_s1_agent:m0_burstcount -> Expansion_JP1_s1_translator:uav_burstcount
	wire          expansion_jp1_s1_agent_rf_source_valid;                                               // Expansion_JP1_s1_agent:rf_source_valid -> Expansion_JP1_s1_agent_rsp_fifo:in_valid
	wire  [133:0] expansion_jp1_s1_agent_rf_source_data;                                                // Expansion_JP1_s1_agent:rf_source_data -> Expansion_JP1_s1_agent_rsp_fifo:in_data
	wire          expansion_jp1_s1_agent_rf_source_ready;                                               // Expansion_JP1_s1_agent_rsp_fifo:in_ready -> Expansion_JP1_s1_agent:rf_source_ready
	wire          expansion_jp1_s1_agent_rf_source_startofpacket;                                       // Expansion_JP1_s1_agent:rf_source_startofpacket -> Expansion_JP1_s1_agent_rsp_fifo:in_startofpacket
	wire          expansion_jp1_s1_agent_rf_source_endofpacket;                                         // Expansion_JP1_s1_agent:rf_source_endofpacket -> Expansion_JP1_s1_agent_rsp_fifo:in_endofpacket
	wire          expansion_jp1_s1_agent_rsp_fifo_out_valid;                                            // Expansion_JP1_s1_agent_rsp_fifo:out_valid -> Expansion_JP1_s1_agent:rf_sink_valid
	wire  [133:0] expansion_jp1_s1_agent_rsp_fifo_out_data;                                             // Expansion_JP1_s1_agent_rsp_fifo:out_data -> Expansion_JP1_s1_agent:rf_sink_data
	wire          expansion_jp1_s1_agent_rsp_fifo_out_ready;                                            // Expansion_JP1_s1_agent:rf_sink_ready -> Expansion_JP1_s1_agent_rsp_fifo:out_ready
	wire          expansion_jp1_s1_agent_rsp_fifo_out_startofpacket;                                    // Expansion_JP1_s1_agent_rsp_fifo:out_startofpacket -> Expansion_JP1_s1_agent:rf_sink_startofpacket
	wire          expansion_jp1_s1_agent_rsp_fifo_out_endofpacket;                                      // Expansion_JP1_s1_agent_rsp_fifo:out_endofpacket -> Expansion_JP1_s1_agent:rf_sink_endofpacket
	wire          expansion_jp1_s1_agent_rdata_fifo_src_valid;                                          // Expansion_JP1_s1_agent:rdata_fifo_src_valid -> Expansion_JP1_s1_agent_rdata_fifo:in_valid
	wire   [33:0] expansion_jp1_s1_agent_rdata_fifo_src_data;                                           // Expansion_JP1_s1_agent:rdata_fifo_src_data -> Expansion_JP1_s1_agent_rdata_fifo:in_data
	wire          expansion_jp1_s1_agent_rdata_fifo_src_ready;                                          // Expansion_JP1_s1_agent_rdata_fifo:in_ready -> Expansion_JP1_s1_agent:rdata_fifo_src_ready
	wire   [31:0] expansion_jp7_s1_agent_m0_readdata;                                                   // Expansion_JP7_s1_translator:uav_readdata -> Expansion_JP7_s1_agent:m0_readdata
	wire          expansion_jp7_s1_agent_m0_waitrequest;                                                // Expansion_JP7_s1_translator:uav_waitrequest -> Expansion_JP7_s1_agent:m0_waitrequest
	wire          expansion_jp7_s1_agent_m0_debugaccess;                                                // Expansion_JP7_s1_agent:m0_debugaccess -> Expansion_JP7_s1_translator:uav_debugaccess
	wire   [31:0] expansion_jp7_s1_agent_m0_address;                                                    // Expansion_JP7_s1_agent:m0_address -> Expansion_JP7_s1_translator:uav_address
	wire    [3:0] expansion_jp7_s1_agent_m0_byteenable;                                                 // Expansion_JP7_s1_agent:m0_byteenable -> Expansion_JP7_s1_translator:uav_byteenable
	wire          expansion_jp7_s1_agent_m0_read;                                                       // Expansion_JP7_s1_agent:m0_read -> Expansion_JP7_s1_translator:uav_read
	wire          expansion_jp7_s1_agent_m0_readdatavalid;                                              // Expansion_JP7_s1_translator:uav_readdatavalid -> Expansion_JP7_s1_agent:m0_readdatavalid
	wire          expansion_jp7_s1_agent_m0_lock;                                                       // Expansion_JP7_s1_agent:m0_lock -> Expansion_JP7_s1_translator:uav_lock
	wire   [31:0] expansion_jp7_s1_agent_m0_writedata;                                                  // Expansion_JP7_s1_agent:m0_writedata -> Expansion_JP7_s1_translator:uav_writedata
	wire          expansion_jp7_s1_agent_m0_write;                                                      // Expansion_JP7_s1_agent:m0_write -> Expansion_JP7_s1_translator:uav_write
	wire    [2:0] expansion_jp7_s1_agent_m0_burstcount;                                                 // Expansion_JP7_s1_agent:m0_burstcount -> Expansion_JP7_s1_translator:uav_burstcount
	wire          expansion_jp7_s1_agent_rf_source_valid;                                               // Expansion_JP7_s1_agent:rf_source_valid -> Expansion_JP7_s1_agent_rsp_fifo:in_valid
	wire  [133:0] expansion_jp7_s1_agent_rf_source_data;                                                // Expansion_JP7_s1_agent:rf_source_data -> Expansion_JP7_s1_agent_rsp_fifo:in_data
	wire          expansion_jp7_s1_agent_rf_source_ready;                                               // Expansion_JP7_s1_agent_rsp_fifo:in_ready -> Expansion_JP7_s1_agent:rf_source_ready
	wire          expansion_jp7_s1_agent_rf_source_startofpacket;                                       // Expansion_JP7_s1_agent:rf_source_startofpacket -> Expansion_JP7_s1_agent_rsp_fifo:in_startofpacket
	wire          expansion_jp7_s1_agent_rf_source_endofpacket;                                         // Expansion_JP7_s1_agent:rf_source_endofpacket -> Expansion_JP7_s1_agent_rsp_fifo:in_endofpacket
	wire          expansion_jp7_s1_agent_rsp_fifo_out_valid;                                            // Expansion_JP7_s1_agent_rsp_fifo:out_valid -> Expansion_JP7_s1_agent:rf_sink_valid
	wire  [133:0] expansion_jp7_s1_agent_rsp_fifo_out_data;                                             // Expansion_JP7_s1_agent_rsp_fifo:out_data -> Expansion_JP7_s1_agent:rf_sink_data
	wire          expansion_jp7_s1_agent_rsp_fifo_out_ready;                                            // Expansion_JP7_s1_agent:rf_sink_ready -> Expansion_JP7_s1_agent_rsp_fifo:out_ready
	wire          expansion_jp7_s1_agent_rsp_fifo_out_startofpacket;                                    // Expansion_JP7_s1_agent_rsp_fifo:out_startofpacket -> Expansion_JP7_s1_agent:rf_sink_startofpacket
	wire          expansion_jp7_s1_agent_rsp_fifo_out_endofpacket;                                      // Expansion_JP7_s1_agent_rsp_fifo:out_endofpacket -> Expansion_JP7_s1_agent:rf_sink_endofpacket
	wire          expansion_jp7_s1_agent_rdata_fifo_src_valid;                                          // Expansion_JP7_s1_agent:rdata_fifo_src_valid -> Expansion_JP7_s1_agent_rdata_fifo:in_valid
	wire   [33:0] expansion_jp7_s1_agent_rdata_fifo_src_data;                                           // Expansion_JP7_s1_agent:rdata_fifo_src_data -> Expansion_JP7_s1_agent_rdata_fifo:in_data
	wire          expansion_jp7_s1_agent_rdata_fifo_src_ready;                                          // Expansion_JP7_s1_agent_rdata_fifo:in_ready -> Expansion_JP7_s1_agent:rdata_fifo_src_ready
	wire   [31:0] arduino_gpio_s1_agent_m0_readdata;                                                    // Arduino_GPIO_s1_translator:uav_readdata -> Arduino_GPIO_s1_agent:m0_readdata
	wire          arduino_gpio_s1_agent_m0_waitrequest;                                                 // Arduino_GPIO_s1_translator:uav_waitrequest -> Arduino_GPIO_s1_agent:m0_waitrequest
	wire          arduino_gpio_s1_agent_m0_debugaccess;                                                 // Arduino_GPIO_s1_agent:m0_debugaccess -> Arduino_GPIO_s1_translator:uav_debugaccess
	wire   [31:0] arduino_gpio_s1_agent_m0_address;                                                     // Arduino_GPIO_s1_agent:m0_address -> Arduino_GPIO_s1_translator:uav_address
	wire    [3:0] arduino_gpio_s1_agent_m0_byteenable;                                                  // Arduino_GPIO_s1_agent:m0_byteenable -> Arduino_GPIO_s1_translator:uav_byteenable
	wire          arduino_gpio_s1_agent_m0_read;                                                        // Arduino_GPIO_s1_agent:m0_read -> Arduino_GPIO_s1_translator:uav_read
	wire          arduino_gpio_s1_agent_m0_readdatavalid;                                               // Arduino_GPIO_s1_translator:uav_readdatavalid -> Arduino_GPIO_s1_agent:m0_readdatavalid
	wire          arduino_gpio_s1_agent_m0_lock;                                                        // Arduino_GPIO_s1_agent:m0_lock -> Arduino_GPIO_s1_translator:uav_lock
	wire   [31:0] arduino_gpio_s1_agent_m0_writedata;                                                   // Arduino_GPIO_s1_agent:m0_writedata -> Arduino_GPIO_s1_translator:uav_writedata
	wire          arduino_gpio_s1_agent_m0_write;                                                       // Arduino_GPIO_s1_agent:m0_write -> Arduino_GPIO_s1_translator:uav_write
	wire    [2:0] arduino_gpio_s1_agent_m0_burstcount;                                                  // Arduino_GPIO_s1_agent:m0_burstcount -> Arduino_GPIO_s1_translator:uav_burstcount
	wire          arduino_gpio_s1_agent_rf_source_valid;                                                // Arduino_GPIO_s1_agent:rf_source_valid -> Arduino_GPIO_s1_agent_rsp_fifo:in_valid
	wire  [133:0] arduino_gpio_s1_agent_rf_source_data;                                                 // Arduino_GPIO_s1_agent:rf_source_data -> Arduino_GPIO_s1_agent_rsp_fifo:in_data
	wire          arduino_gpio_s1_agent_rf_source_ready;                                                // Arduino_GPIO_s1_agent_rsp_fifo:in_ready -> Arduino_GPIO_s1_agent:rf_source_ready
	wire          arduino_gpio_s1_agent_rf_source_startofpacket;                                        // Arduino_GPIO_s1_agent:rf_source_startofpacket -> Arduino_GPIO_s1_agent_rsp_fifo:in_startofpacket
	wire          arduino_gpio_s1_agent_rf_source_endofpacket;                                          // Arduino_GPIO_s1_agent:rf_source_endofpacket -> Arduino_GPIO_s1_agent_rsp_fifo:in_endofpacket
	wire          arduino_gpio_s1_agent_rsp_fifo_out_valid;                                             // Arduino_GPIO_s1_agent_rsp_fifo:out_valid -> Arduino_GPIO_s1_agent:rf_sink_valid
	wire  [133:0] arduino_gpio_s1_agent_rsp_fifo_out_data;                                              // Arduino_GPIO_s1_agent_rsp_fifo:out_data -> Arduino_GPIO_s1_agent:rf_sink_data
	wire          arduino_gpio_s1_agent_rsp_fifo_out_ready;                                             // Arduino_GPIO_s1_agent:rf_sink_ready -> Arduino_GPIO_s1_agent_rsp_fifo:out_ready
	wire          arduino_gpio_s1_agent_rsp_fifo_out_startofpacket;                                     // Arduino_GPIO_s1_agent_rsp_fifo:out_startofpacket -> Arduino_GPIO_s1_agent:rf_sink_startofpacket
	wire          arduino_gpio_s1_agent_rsp_fifo_out_endofpacket;                                       // Arduino_GPIO_s1_agent_rsp_fifo:out_endofpacket -> Arduino_GPIO_s1_agent:rf_sink_endofpacket
	wire          arduino_gpio_s1_agent_rdata_fifo_src_valid;                                           // Arduino_GPIO_s1_agent:rdata_fifo_src_valid -> Arduino_GPIO_s1_agent_rdata_fifo:in_valid
	wire   [33:0] arduino_gpio_s1_agent_rdata_fifo_src_data;                                            // Arduino_GPIO_s1_agent:rdata_fifo_src_data -> Arduino_GPIO_s1_agent_rdata_fifo:in_data
	wire          arduino_gpio_s1_agent_rdata_fifo_src_ready;                                           // Arduino_GPIO_s1_agent_rdata_fifo:in_ready -> Arduino_GPIO_s1_agent:rdata_fifo_src_ready
	wire   [31:0] arduino_reset_n_s1_agent_m0_readdata;                                                 // Arduino_Reset_N_s1_translator:uav_readdata -> Arduino_Reset_N_s1_agent:m0_readdata
	wire          arduino_reset_n_s1_agent_m0_waitrequest;                                              // Arduino_Reset_N_s1_translator:uav_waitrequest -> Arduino_Reset_N_s1_agent:m0_waitrequest
	wire          arduino_reset_n_s1_agent_m0_debugaccess;                                              // Arduino_Reset_N_s1_agent:m0_debugaccess -> Arduino_Reset_N_s1_translator:uav_debugaccess
	wire   [31:0] arduino_reset_n_s1_agent_m0_address;                                                  // Arduino_Reset_N_s1_agent:m0_address -> Arduino_Reset_N_s1_translator:uav_address
	wire    [3:0] arduino_reset_n_s1_agent_m0_byteenable;                                               // Arduino_Reset_N_s1_agent:m0_byteenable -> Arduino_Reset_N_s1_translator:uav_byteenable
	wire          arduino_reset_n_s1_agent_m0_read;                                                     // Arduino_Reset_N_s1_agent:m0_read -> Arduino_Reset_N_s1_translator:uav_read
	wire          arduino_reset_n_s1_agent_m0_readdatavalid;                                            // Arduino_Reset_N_s1_translator:uav_readdatavalid -> Arduino_Reset_N_s1_agent:m0_readdatavalid
	wire          arduino_reset_n_s1_agent_m0_lock;                                                     // Arduino_Reset_N_s1_agent:m0_lock -> Arduino_Reset_N_s1_translator:uav_lock
	wire   [31:0] arduino_reset_n_s1_agent_m0_writedata;                                                // Arduino_Reset_N_s1_agent:m0_writedata -> Arduino_Reset_N_s1_translator:uav_writedata
	wire          arduino_reset_n_s1_agent_m0_write;                                                    // Arduino_Reset_N_s1_agent:m0_write -> Arduino_Reset_N_s1_translator:uav_write
	wire    [2:0] arduino_reset_n_s1_agent_m0_burstcount;                                               // Arduino_Reset_N_s1_agent:m0_burstcount -> Arduino_Reset_N_s1_translator:uav_burstcount
	wire          arduino_reset_n_s1_agent_rf_source_valid;                                             // Arduino_Reset_N_s1_agent:rf_source_valid -> Arduino_Reset_N_s1_agent_rsp_fifo:in_valid
	wire  [133:0] arduino_reset_n_s1_agent_rf_source_data;                                              // Arduino_Reset_N_s1_agent:rf_source_data -> Arduino_Reset_N_s1_agent_rsp_fifo:in_data
	wire          arduino_reset_n_s1_agent_rf_source_ready;                                             // Arduino_Reset_N_s1_agent_rsp_fifo:in_ready -> Arduino_Reset_N_s1_agent:rf_source_ready
	wire          arduino_reset_n_s1_agent_rf_source_startofpacket;                                     // Arduino_Reset_N_s1_agent:rf_source_startofpacket -> Arduino_Reset_N_s1_agent_rsp_fifo:in_startofpacket
	wire          arduino_reset_n_s1_agent_rf_source_endofpacket;                                       // Arduino_Reset_N_s1_agent:rf_source_endofpacket -> Arduino_Reset_N_s1_agent_rsp_fifo:in_endofpacket
	wire          arduino_reset_n_s1_agent_rsp_fifo_out_valid;                                          // Arduino_Reset_N_s1_agent_rsp_fifo:out_valid -> Arduino_Reset_N_s1_agent:rf_sink_valid
	wire  [133:0] arduino_reset_n_s1_agent_rsp_fifo_out_data;                                           // Arduino_Reset_N_s1_agent_rsp_fifo:out_data -> Arduino_Reset_N_s1_agent:rf_sink_data
	wire          arduino_reset_n_s1_agent_rsp_fifo_out_ready;                                          // Arduino_Reset_N_s1_agent:rf_sink_ready -> Arduino_Reset_N_s1_agent_rsp_fifo:out_ready
	wire          arduino_reset_n_s1_agent_rsp_fifo_out_startofpacket;                                  // Arduino_Reset_N_s1_agent_rsp_fifo:out_startofpacket -> Arduino_Reset_N_s1_agent:rf_sink_startofpacket
	wire          arduino_reset_n_s1_agent_rsp_fifo_out_endofpacket;                                    // Arduino_Reset_N_s1_agent_rsp_fifo:out_endofpacket -> Arduino_Reset_N_s1_agent:rf_sink_endofpacket
	wire          arduino_reset_n_s1_agent_rdata_fifo_src_valid;                                        // Arduino_Reset_N_s1_agent:rdata_fifo_src_valid -> Arduino_Reset_N_s1_agent_rdata_fifo:in_valid
	wire   [33:0] arduino_reset_n_s1_agent_rdata_fifo_src_data;                                         // Arduino_Reset_N_s1_agent:rdata_fifo_src_data -> Arduino_Reset_N_s1_agent_rdata_fifo:in_data
	wire          arduino_reset_n_s1_agent_rdata_fifo_src_ready;                                        // Arduino_Reset_N_s1_agent_rdata_fifo:in_ready -> Arduino_Reset_N_s1_agent:rdata_fifo_src_ready
	wire   [31:0] interval_timer_s1_agent_m0_readdata;                                                  // Interval_Timer_s1_translator:uav_readdata -> Interval_Timer_s1_agent:m0_readdata
	wire          interval_timer_s1_agent_m0_waitrequest;                                               // Interval_Timer_s1_translator:uav_waitrequest -> Interval_Timer_s1_agent:m0_waitrequest
	wire          interval_timer_s1_agent_m0_debugaccess;                                               // Interval_Timer_s1_agent:m0_debugaccess -> Interval_Timer_s1_translator:uav_debugaccess
	wire   [31:0] interval_timer_s1_agent_m0_address;                                                   // Interval_Timer_s1_agent:m0_address -> Interval_Timer_s1_translator:uav_address
	wire    [3:0] interval_timer_s1_agent_m0_byteenable;                                                // Interval_Timer_s1_agent:m0_byteenable -> Interval_Timer_s1_translator:uav_byteenable
	wire          interval_timer_s1_agent_m0_read;                                                      // Interval_Timer_s1_agent:m0_read -> Interval_Timer_s1_translator:uav_read
	wire          interval_timer_s1_agent_m0_readdatavalid;                                             // Interval_Timer_s1_translator:uav_readdatavalid -> Interval_Timer_s1_agent:m0_readdatavalid
	wire          interval_timer_s1_agent_m0_lock;                                                      // Interval_Timer_s1_agent:m0_lock -> Interval_Timer_s1_translator:uav_lock
	wire   [31:0] interval_timer_s1_agent_m0_writedata;                                                 // Interval_Timer_s1_agent:m0_writedata -> Interval_Timer_s1_translator:uav_writedata
	wire          interval_timer_s1_agent_m0_write;                                                     // Interval_Timer_s1_agent:m0_write -> Interval_Timer_s1_translator:uav_write
	wire    [2:0] interval_timer_s1_agent_m0_burstcount;                                                // Interval_Timer_s1_agent:m0_burstcount -> Interval_Timer_s1_translator:uav_burstcount
	wire          interval_timer_s1_agent_rf_source_valid;                                              // Interval_Timer_s1_agent:rf_source_valid -> Interval_Timer_s1_agent_rsp_fifo:in_valid
	wire  [133:0] interval_timer_s1_agent_rf_source_data;                                               // Interval_Timer_s1_agent:rf_source_data -> Interval_Timer_s1_agent_rsp_fifo:in_data
	wire          interval_timer_s1_agent_rf_source_ready;                                              // Interval_Timer_s1_agent_rsp_fifo:in_ready -> Interval_Timer_s1_agent:rf_source_ready
	wire          interval_timer_s1_agent_rf_source_startofpacket;                                      // Interval_Timer_s1_agent:rf_source_startofpacket -> Interval_Timer_s1_agent_rsp_fifo:in_startofpacket
	wire          interval_timer_s1_agent_rf_source_endofpacket;                                        // Interval_Timer_s1_agent:rf_source_endofpacket -> Interval_Timer_s1_agent_rsp_fifo:in_endofpacket
	wire          interval_timer_s1_agent_rsp_fifo_out_valid;                                           // Interval_Timer_s1_agent_rsp_fifo:out_valid -> Interval_Timer_s1_agent:rf_sink_valid
	wire  [133:0] interval_timer_s1_agent_rsp_fifo_out_data;                                            // Interval_Timer_s1_agent_rsp_fifo:out_data -> Interval_Timer_s1_agent:rf_sink_data
	wire          interval_timer_s1_agent_rsp_fifo_out_ready;                                           // Interval_Timer_s1_agent:rf_sink_ready -> Interval_Timer_s1_agent_rsp_fifo:out_ready
	wire          interval_timer_s1_agent_rsp_fifo_out_startofpacket;                                   // Interval_Timer_s1_agent_rsp_fifo:out_startofpacket -> Interval_Timer_s1_agent:rf_sink_startofpacket
	wire          interval_timer_s1_agent_rsp_fifo_out_endofpacket;                                     // Interval_Timer_s1_agent_rsp_fifo:out_endofpacket -> Interval_Timer_s1_agent:rf_sink_endofpacket
	wire          interval_timer_s1_agent_rdata_fifo_src_valid;                                         // Interval_Timer_s1_agent:rdata_fifo_src_valid -> Interval_Timer_s1_agent_rdata_fifo:in_valid
	wire   [33:0] interval_timer_s1_agent_rdata_fifo_src_data;                                          // Interval_Timer_s1_agent:rdata_fifo_src_data -> Interval_Timer_s1_agent_rdata_fifo:in_data
	wire          interval_timer_s1_agent_rdata_fifo_src_ready;                                         // Interval_Timer_s1_agent_rdata_fifo:in_ready -> Interval_Timer_s1_agent:rdata_fifo_src_ready
	wire   [31:0] interval_timer_2_s1_agent_m0_readdata;                                                // Interval_Timer_2_s1_translator:uav_readdata -> Interval_Timer_2_s1_agent:m0_readdata
	wire          interval_timer_2_s1_agent_m0_waitrequest;                                             // Interval_Timer_2_s1_translator:uav_waitrequest -> Interval_Timer_2_s1_agent:m0_waitrequest
	wire          interval_timer_2_s1_agent_m0_debugaccess;                                             // Interval_Timer_2_s1_agent:m0_debugaccess -> Interval_Timer_2_s1_translator:uav_debugaccess
	wire   [31:0] interval_timer_2_s1_agent_m0_address;                                                 // Interval_Timer_2_s1_agent:m0_address -> Interval_Timer_2_s1_translator:uav_address
	wire    [3:0] interval_timer_2_s1_agent_m0_byteenable;                                              // Interval_Timer_2_s1_agent:m0_byteenable -> Interval_Timer_2_s1_translator:uav_byteenable
	wire          interval_timer_2_s1_agent_m0_read;                                                    // Interval_Timer_2_s1_agent:m0_read -> Interval_Timer_2_s1_translator:uav_read
	wire          interval_timer_2_s1_agent_m0_readdatavalid;                                           // Interval_Timer_2_s1_translator:uav_readdatavalid -> Interval_Timer_2_s1_agent:m0_readdatavalid
	wire          interval_timer_2_s1_agent_m0_lock;                                                    // Interval_Timer_2_s1_agent:m0_lock -> Interval_Timer_2_s1_translator:uav_lock
	wire   [31:0] interval_timer_2_s1_agent_m0_writedata;                                               // Interval_Timer_2_s1_agent:m0_writedata -> Interval_Timer_2_s1_translator:uav_writedata
	wire          interval_timer_2_s1_agent_m0_write;                                                   // Interval_Timer_2_s1_agent:m0_write -> Interval_Timer_2_s1_translator:uav_write
	wire    [2:0] interval_timer_2_s1_agent_m0_burstcount;                                              // Interval_Timer_2_s1_agent:m0_burstcount -> Interval_Timer_2_s1_translator:uav_burstcount
	wire          interval_timer_2_s1_agent_rf_source_valid;                                            // Interval_Timer_2_s1_agent:rf_source_valid -> Interval_Timer_2_s1_agent_rsp_fifo:in_valid
	wire  [133:0] interval_timer_2_s1_agent_rf_source_data;                                             // Interval_Timer_2_s1_agent:rf_source_data -> Interval_Timer_2_s1_agent_rsp_fifo:in_data
	wire          interval_timer_2_s1_agent_rf_source_ready;                                            // Interval_Timer_2_s1_agent_rsp_fifo:in_ready -> Interval_Timer_2_s1_agent:rf_source_ready
	wire          interval_timer_2_s1_agent_rf_source_startofpacket;                                    // Interval_Timer_2_s1_agent:rf_source_startofpacket -> Interval_Timer_2_s1_agent_rsp_fifo:in_startofpacket
	wire          interval_timer_2_s1_agent_rf_source_endofpacket;                                      // Interval_Timer_2_s1_agent:rf_source_endofpacket -> Interval_Timer_2_s1_agent_rsp_fifo:in_endofpacket
	wire          interval_timer_2_s1_agent_rsp_fifo_out_valid;                                         // Interval_Timer_2_s1_agent_rsp_fifo:out_valid -> Interval_Timer_2_s1_agent:rf_sink_valid
	wire  [133:0] interval_timer_2_s1_agent_rsp_fifo_out_data;                                          // Interval_Timer_2_s1_agent_rsp_fifo:out_data -> Interval_Timer_2_s1_agent:rf_sink_data
	wire          interval_timer_2_s1_agent_rsp_fifo_out_ready;                                         // Interval_Timer_2_s1_agent:rf_sink_ready -> Interval_Timer_2_s1_agent_rsp_fifo:out_ready
	wire          interval_timer_2_s1_agent_rsp_fifo_out_startofpacket;                                 // Interval_Timer_2_s1_agent_rsp_fifo:out_startofpacket -> Interval_Timer_2_s1_agent:rf_sink_startofpacket
	wire          interval_timer_2_s1_agent_rsp_fifo_out_endofpacket;                                   // Interval_Timer_2_s1_agent_rsp_fifo:out_endofpacket -> Interval_Timer_2_s1_agent:rf_sink_endofpacket
	wire          interval_timer_2_s1_agent_rdata_fifo_src_valid;                                       // Interval_Timer_2_s1_agent:rdata_fifo_src_valid -> Interval_Timer_2_s1_agent_rdata_fifo:in_valid
	wire   [33:0] interval_timer_2_s1_agent_rdata_fifo_src_data;                                        // Interval_Timer_2_s1_agent:rdata_fifo_src_data -> Interval_Timer_2_s1_agent_rdata_fifo:in_data
	wire          interval_timer_2_s1_agent_rdata_fifo_src_ready;                                       // Interval_Timer_2_s1_agent_rdata_fifo:in_ready -> Interval_Timer_2_s1_agent:rdata_fifo_src_ready
	wire   [31:0] jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_readdata;                              // JTAG_UART_for_ARM_0_avalon_jtag_slave_translator:uav_readdata -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_waitrequest;                           // JTAG_UART_for_ARM_0_avalon_jtag_slave_translator:uav_waitrequest -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_debugaccess;                           // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:m0_debugaccess -> JTAG_UART_for_ARM_0_avalon_jtag_slave_translator:uav_debugaccess
	wire   [31:0] jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_address;                               // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:m0_address -> JTAG_UART_for_ARM_0_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_byteenable;                            // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:m0_byteenable -> JTAG_UART_for_ARM_0_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_read;                                  // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:m0_read -> JTAG_UART_for_ARM_0_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_readdatavalid;                         // JTAG_UART_for_ARM_0_avalon_jtag_slave_translator:uav_readdatavalid -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_lock;                                  // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:m0_lock -> JTAG_UART_for_ARM_0_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_writedata;                             // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:m0_writedata -> JTAG_UART_for_ARM_0_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_write;                                 // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:m0_write -> JTAG_UART_for_ARM_0_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_burstcount;                            // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:m0_burstcount -> JTAG_UART_for_ARM_0_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_rf_source_valid;                          // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rf_source_valid -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [133:0] jtag_uart_for_arm_0_avalon_jtag_slave_agent_rf_source_data;                           // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rf_source_data -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_rf_source_ready;                          // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent_rsp_fifo:in_ready -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_rf_source_startofpacket;                  // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rf_source_startofpacket -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_rf_source_endofpacket;                    // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rf_source_endofpacket -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_rsp_fifo_out_valid;                       // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent_rsp_fifo:out_valid -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rf_sink_valid
	wire  [133:0] jtag_uart_for_arm_0_avalon_jtag_slave_agent_rsp_fifo_out_data;                        // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent_rsp_fifo:out_data -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_rsp_fifo_out_ready;                       // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rf_sink_ready -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;               // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                 // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_src_valid;                     // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rdata_fifo_src_valid -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent_rdata_fifo:in_valid
	wire   [33:0] jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_src_data;                      // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rdata_fifo_src_data -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent_rdata_fifo:in_data
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_src_ready;                     // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent_rdata_fifo:in_ready -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire   [31:0] jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_readdata;                              // JTAG_UART_for_ARM_1_avalon_jtag_slave_translator:uav_readdata -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_waitrequest;                           // JTAG_UART_for_ARM_1_avalon_jtag_slave_translator:uav_waitrequest -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_debugaccess;                           // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:m0_debugaccess -> JTAG_UART_for_ARM_1_avalon_jtag_slave_translator:uav_debugaccess
	wire   [31:0] jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_address;                               // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:m0_address -> JTAG_UART_for_ARM_1_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_byteenable;                            // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:m0_byteenable -> JTAG_UART_for_ARM_1_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_read;                                  // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:m0_read -> JTAG_UART_for_ARM_1_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_readdatavalid;                         // JTAG_UART_for_ARM_1_avalon_jtag_slave_translator:uav_readdatavalid -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_lock;                                  // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:m0_lock -> JTAG_UART_for_ARM_1_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_writedata;                             // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:m0_writedata -> JTAG_UART_for_ARM_1_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_write;                                 // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:m0_write -> JTAG_UART_for_ARM_1_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_burstcount;                            // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:m0_burstcount -> JTAG_UART_for_ARM_1_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_rf_source_valid;                          // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rf_source_valid -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [133:0] jtag_uart_for_arm_1_avalon_jtag_slave_agent_rf_source_data;                           // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rf_source_data -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_rf_source_ready;                          // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent_rsp_fifo:in_ready -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_rf_source_startofpacket;                  // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rf_source_startofpacket -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_rf_source_endofpacket;                    // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rf_source_endofpacket -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_rsp_fifo_out_valid;                       // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent_rsp_fifo:out_valid -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rf_sink_valid
	wire  [133:0] jtag_uart_for_arm_1_avalon_jtag_slave_agent_rsp_fifo_out_data;                        // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent_rsp_fifo:out_data -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_rsp_fifo_out_ready;                       // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rf_sink_ready -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;               // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                 // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_src_valid;                     // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rdata_fifo_src_valid -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent_rdata_fifo:in_valid
	wire   [33:0] jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_src_data;                      // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rdata_fifo_src_data -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent_rdata_fifo:in_data
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_src_ready;                     // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent_rdata_fifo:in_ready -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_readdata;                                        // JTAG_UART_avalon_jtag_slave_translator:uav_readdata -> JTAG_UART_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_waitrequest;                                     // JTAG_UART_avalon_jtag_slave_translator:uav_waitrequest -> JTAG_UART_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_avalon_jtag_slave_agent_m0_debugaccess;                                     // JTAG_UART_avalon_jtag_slave_agent:m0_debugaccess -> JTAG_UART_avalon_jtag_slave_translator:uav_debugaccess
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_address;                                         // JTAG_UART_avalon_jtag_slave_agent:m0_address -> JTAG_UART_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_avalon_jtag_slave_agent_m0_byteenable;                                      // JTAG_UART_avalon_jtag_slave_agent:m0_byteenable -> JTAG_UART_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_avalon_jtag_slave_agent_m0_read;                                            // JTAG_UART_avalon_jtag_slave_agent:m0_read -> JTAG_UART_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid;                                   // JTAG_UART_avalon_jtag_slave_translator:uav_readdatavalid -> JTAG_UART_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_avalon_jtag_slave_agent_m0_lock;                                            // JTAG_UART_avalon_jtag_slave_agent:m0_lock -> JTAG_UART_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_writedata;                                       // JTAG_UART_avalon_jtag_slave_agent:m0_writedata -> JTAG_UART_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_write;                                           // JTAG_UART_avalon_jtag_slave_agent:m0_write -> JTAG_UART_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_avalon_jtag_slave_agent_m0_burstcount;                                      // JTAG_UART_avalon_jtag_slave_agent:m0_burstcount -> JTAG_UART_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_valid;                                    // JTAG_UART_avalon_jtag_slave_agent:rf_source_valid -> JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [133:0] jtag_uart_avalon_jtag_slave_agent_rf_source_data;                                     // JTAG_UART_avalon_jtag_slave_agent:rf_source_data -> JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_ready;                                    // JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_ready -> JTAG_UART_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket;                            // JTAG_UART_avalon_jtag_slave_agent:rf_source_startofpacket -> JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket;                              // JTAG_UART_avalon_jtag_slave_agent:rf_source_endofpacket -> JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid;                                 // JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_valid -> JTAG_UART_avalon_jtag_slave_agent:rf_sink_valid
	wire  [133:0] jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data;                                  // JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_data -> JTAG_UART_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready;                                 // JTAG_UART_avalon_jtag_slave_agent:rf_sink_ready -> JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                         // JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> JTAG_UART_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                           // JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> JTAG_UART_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid;                               // JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_src_valid -> JTAG_UART_avalon_jtag_slave_agent_rdata_fifo:in_valid
	wire   [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data;                                // JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_src_data -> JTAG_UART_avalon_jtag_slave_agent_rdata_fifo:in_data
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready;                               // JTAG_UART_avalon_jtag_slave_agent_rdata_fifo:in_ready -> JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_013_src_valid;                                                                // cmd_mux_013:src_valid -> JTAG_UART_avalon_jtag_slave_agent:cp_valid
	wire  [132:0] cmd_mux_013_src_data;                                                                 // cmd_mux_013:src_data -> JTAG_UART_avalon_jtag_slave_agent:cp_data
	wire          cmd_mux_013_src_ready;                                                                // JTAG_UART_avalon_jtag_slave_agent:cp_ready -> cmd_mux_013:src_ready
	wire   [27:0] cmd_mux_013_src_channel;                                                              // cmd_mux_013:src_channel -> JTAG_UART_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_013_src_startofpacket;                                                        // cmd_mux_013:src_startofpacket -> JTAG_UART_avalon_jtag_slave_agent:cp_startofpacket
	wire          cmd_mux_013_src_endofpacket;                                                          // cmd_mux_013:src_endofpacket -> JTAG_UART_avalon_jtag_slave_agent:cp_endofpacket
	wire   [31:0] nios2_sram_s1_agent_m0_readdata;                                                      // Nios2_SRAM_s1_translator:uav_readdata -> Nios2_SRAM_s1_agent:m0_readdata
	wire          nios2_sram_s1_agent_m0_waitrequest;                                                   // Nios2_SRAM_s1_translator:uav_waitrequest -> Nios2_SRAM_s1_agent:m0_waitrequest
	wire          nios2_sram_s1_agent_m0_debugaccess;                                                   // Nios2_SRAM_s1_agent:m0_debugaccess -> Nios2_SRAM_s1_translator:uav_debugaccess
	wire   [31:0] nios2_sram_s1_agent_m0_address;                                                       // Nios2_SRAM_s1_agent:m0_address -> Nios2_SRAM_s1_translator:uav_address
	wire    [3:0] nios2_sram_s1_agent_m0_byteenable;                                                    // Nios2_SRAM_s1_agent:m0_byteenable -> Nios2_SRAM_s1_translator:uav_byteenable
	wire          nios2_sram_s1_agent_m0_read;                                                          // Nios2_SRAM_s1_agent:m0_read -> Nios2_SRAM_s1_translator:uav_read
	wire          nios2_sram_s1_agent_m0_readdatavalid;                                                 // Nios2_SRAM_s1_translator:uav_readdatavalid -> Nios2_SRAM_s1_agent:m0_readdatavalid
	wire          nios2_sram_s1_agent_m0_lock;                                                          // Nios2_SRAM_s1_agent:m0_lock -> Nios2_SRAM_s1_translator:uav_lock
	wire   [31:0] nios2_sram_s1_agent_m0_writedata;                                                     // Nios2_SRAM_s1_agent:m0_writedata -> Nios2_SRAM_s1_translator:uav_writedata
	wire          nios2_sram_s1_agent_m0_write;                                                         // Nios2_SRAM_s1_agent:m0_write -> Nios2_SRAM_s1_translator:uav_write
	wire    [2:0] nios2_sram_s1_agent_m0_burstcount;                                                    // Nios2_SRAM_s1_agent:m0_burstcount -> Nios2_SRAM_s1_translator:uav_burstcount
	wire          nios2_sram_s1_agent_rf_source_valid;                                                  // Nios2_SRAM_s1_agent:rf_source_valid -> Nios2_SRAM_s1_agent_rsp_fifo:in_valid
	wire  [133:0] nios2_sram_s1_agent_rf_source_data;                                                   // Nios2_SRAM_s1_agent:rf_source_data -> Nios2_SRAM_s1_agent_rsp_fifo:in_data
	wire          nios2_sram_s1_agent_rf_source_ready;                                                  // Nios2_SRAM_s1_agent_rsp_fifo:in_ready -> Nios2_SRAM_s1_agent:rf_source_ready
	wire          nios2_sram_s1_agent_rf_source_startofpacket;                                          // Nios2_SRAM_s1_agent:rf_source_startofpacket -> Nios2_SRAM_s1_agent_rsp_fifo:in_startofpacket
	wire          nios2_sram_s1_agent_rf_source_endofpacket;                                            // Nios2_SRAM_s1_agent:rf_source_endofpacket -> Nios2_SRAM_s1_agent_rsp_fifo:in_endofpacket
	wire          nios2_sram_s1_agent_rsp_fifo_out_valid;                                               // Nios2_SRAM_s1_agent_rsp_fifo:out_valid -> Nios2_SRAM_s1_agent:rf_sink_valid
	wire  [133:0] nios2_sram_s1_agent_rsp_fifo_out_data;                                                // Nios2_SRAM_s1_agent_rsp_fifo:out_data -> Nios2_SRAM_s1_agent:rf_sink_data
	wire          nios2_sram_s1_agent_rsp_fifo_out_ready;                                               // Nios2_SRAM_s1_agent:rf_sink_ready -> Nios2_SRAM_s1_agent_rsp_fifo:out_ready
	wire          nios2_sram_s1_agent_rsp_fifo_out_startofpacket;                                       // Nios2_SRAM_s1_agent_rsp_fifo:out_startofpacket -> Nios2_SRAM_s1_agent:rf_sink_startofpacket
	wire          nios2_sram_s1_agent_rsp_fifo_out_endofpacket;                                         // Nios2_SRAM_s1_agent_rsp_fifo:out_endofpacket -> Nios2_SRAM_s1_agent:rf_sink_endofpacket
	wire          nios2_sram_s1_agent_rdata_fifo_src_valid;                                             // Nios2_SRAM_s1_agent:rdata_fifo_src_valid -> Nios2_SRAM_s1_agent_rdata_fifo:in_valid
	wire   [33:0] nios2_sram_s1_agent_rdata_fifo_src_data;                                              // Nios2_SRAM_s1_agent:rdata_fifo_src_data -> Nios2_SRAM_s1_agent_rdata_fifo:in_data
	wire          nios2_sram_s1_agent_rdata_fifo_src_ready;                                             // Nios2_SRAM_s1_agent_rdata_fifo:in_ready -> Nios2_SRAM_s1_agent:rdata_fifo_src_ready
	wire   [31:0] nios2_2nd_core_sram_s1_agent_m0_readdata;                                             // Nios2_2nd_Core_SRAM_s1_translator:uav_readdata -> Nios2_2nd_Core_SRAM_s1_agent:m0_readdata
	wire          nios2_2nd_core_sram_s1_agent_m0_waitrequest;                                          // Nios2_2nd_Core_SRAM_s1_translator:uav_waitrequest -> Nios2_2nd_Core_SRAM_s1_agent:m0_waitrequest
	wire          nios2_2nd_core_sram_s1_agent_m0_debugaccess;                                          // Nios2_2nd_Core_SRAM_s1_agent:m0_debugaccess -> Nios2_2nd_Core_SRAM_s1_translator:uav_debugaccess
	wire   [31:0] nios2_2nd_core_sram_s1_agent_m0_address;                                              // Nios2_2nd_Core_SRAM_s1_agent:m0_address -> Nios2_2nd_Core_SRAM_s1_translator:uav_address
	wire    [3:0] nios2_2nd_core_sram_s1_agent_m0_byteenable;                                           // Nios2_2nd_Core_SRAM_s1_agent:m0_byteenable -> Nios2_2nd_Core_SRAM_s1_translator:uav_byteenable
	wire          nios2_2nd_core_sram_s1_agent_m0_read;                                                 // Nios2_2nd_Core_SRAM_s1_agent:m0_read -> Nios2_2nd_Core_SRAM_s1_translator:uav_read
	wire          nios2_2nd_core_sram_s1_agent_m0_readdatavalid;                                        // Nios2_2nd_Core_SRAM_s1_translator:uav_readdatavalid -> Nios2_2nd_Core_SRAM_s1_agent:m0_readdatavalid
	wire          nios2_2nd_core_sram_s1_agent_m0_lock;                                                 // Nios2_2nd_Core_SRAM_s1_agent:m0_lock -> Nios2_2nd_Core_SRAM_s1_translator:uav_lock
	wire   [31:0] nios2_2nd_core_sram_s1_agent_m0_writedata;                                            // Nios2_2nd_Core_SRAM_s1_agent:m0_writedata -> Nios2_2nd_Core_SRAM_s1_translator:uav_writedata
	wire          nios2_2nd_core_sram_s1_agent_m0_write;                                                // Nios2_2nd_Core_SRAM_s1_agent:m0_write -> Nios2_2nd_Core_SRAM_s1_translator:uav_write
	wire    [2:0] nios2_2nd_core_sram_s1_agent_m0_burstcount;                                           // Nios2_2nd_Core_SRAM_s1_agent:m0_burstcount -> Nios2_2nd_Core_SRAM_s1_translator:uav_burstcount
	wire          nios2_2nd_core_sram_s1_agent_rf_source_valid;                                         // Nios2_2nd_Core_SRAM_s1_agent:rf_source_valid -> Nios2_2nd_Core_SRAM_s1_agent_rsp_fifo:in_valid
	wire  [133:0] nios2_2nd_core_sram_s1_agent_rf_source_data;                                          // Nios2_2nd_Core_SRAM_s1_agent:rf_source_data -> Nios2_2nd_Core_SRAM_s1_agent_rsp_fifo:in_data
	wire          nios2_2nd_core_sram_s1_agent_rf_source_ready;                                         // Nios2_2nd_Core_SRAM_s1_agent_rsp_fifo:in_ready -> Nios2_2nd_Core_SRAM_s1_agent:rf_source_ready
	wire          nios2_2nd_core_sram_s1_agent_rf_source_startofpacket;                                 // Nios2_2nd_Core_SRAM_s1_agent:rf_source_startofpacket -> Nios2_2nd_Core_SRAM_s1_agent_rsp_fifo:in_startofpacket
	wire          nios2_2nd_core_sram_s1_agent_rf_source_endofpacket;                                   // Nios2_2nd_Core_SRAM_s1_agent:rf_source_endofpacket -> Nios2_2nd_Core_SRAM_s1_agent_rsp_fifo:in_endofpacket
	wire          nios2_2nd_core_sram_s1_agent_rsp_fifo_out_valid;                                      // Nios2_2nd_Core_SRAM_s1_agent_rsp_fifo:out_valid -> Nios2_2nd_Core_SRAM_s1_agent:rf_sink_valid
	wire  [133:0] nios2_2nd_core_sram_s1_agent_rsp_fifo_out_data;                                       // Nios2_2nd_Core_SRAM_s1_agent_rsp_fifo:out_data -> Nios2_2nd_Core_SRAM_s1_agent:rf_sink_data
	wire          nios2_2nd_core_sram_s1_agent_rsp_fifo_out_ready;                                      // Nios2_2nd_Core_SRAM_s1_agent:rf_sink_ready -> Nios2_2nd_Core_SRAM_s1_agent_rsp_fifo:out_ready
	wire          nios2_2nd_core_sram_s1_agent_rsp_fifo_out_startofpacket;                              // Nios2_2nd_Core_SRAM_s1_agent_rsp_fifo:out_startofpacket -> Nios2_2nd_Core_SRAM_s1_agent:rf_sink_startofpacket
	wire          nios2_2nd_core_sram_s1_agent_rsp_fifo_out_endofpacket;                                // Nios2_2nd_Core_SRAM_s1_agent_rsp_fifo:out_endofpacket -> Nios2_2nd_Core_SRAM_s1_agent:rf_sink_endofpacket
	wire          nios2_2nd_core_sram_s1_agent_rdata_fifo_src_valid;                                    // Nios2_2nd_Core_SRAM_s1_agent:rdata_fifo_src_valid -> Nios2_2nd_Core_SRAM_s1_agent_rdata_fifo:in_valid
	wire   [33:0] nios2_2nd_core_sram_s1_agent_rdata_fifo_src_data;                                     // Nios2_2nd_Core_SRAM_s1_agent:rdata_fifo_src_data -> Nios2_2nd_Core_SRAM_s1_agent_rdata_fifo:in_data
	wire          nios2_2nd_core_sram_s1_agent_rdata_fifo_src_ready;                                    // Nios2_2nd_Core_SRAM_s1_agent_rdata_fifo:in_ready -> Nios2_2nd_Core_SRAM_s1_agent:rdata_fifo_src_ready
	wire   [31:0] onchip_sram_s1_agent_m0_readdata;                                                     // Onchip_SRAM_s1_translator:uav_readdata -> Onchip_SRAM_s1_agent:m0_readdata
	wire          onchip_sram_s1_agent_m0_waitrequest;                                                  // Onchip_SRAM_s1_translator:uav_waitrequest -> Onchip_SRAM_s1_agent:m0_waitrequest
	wire          onchip_sram_s1_agent_m0_debugaccess;                                                  // Onchip_SRAM_s1_agent:m0_debugaccess -> Onchip_SRAM_s1_translator:uav_debugaccess
	wire   [31:0] onchip_sram_s1_agent_m0_address;                                                      // Onchip_SRAM_s1_agent:m0_address -> Onchip_SRAM_s1_translator:uav_address
	wire    [3:0] onchip_sram_s1_agent_m0_byteenable;                                                   // Onchip_SRAM_s1_agent:m0_byteenable -> Onchip_SRAM_s1_translator:uav_byteenable
	wire          onchip_sram_s1_agent_m0_read;                                                         // Onchip_SRAM_s1_agent:m0_read -> Onchip_SRAM_s1_translator:uav_read
	wire          onchip_sram_s1_agent_m0_readdatavalid;                                                // Onchip_SRAM_s1_translator:uav_readdatavalid -> Onchip_SRAM_s1_agent:m0_readdatavalid
	wire          onchip_sram_s1_agent_m0_lock;                                                         // Onchip_SRAM_s1_agent:m0_lock -> Onchip_SRAM_s1_translator:uav_lock
	wire   [31:0] onchip_sram_s1_agent_m0_writedata;                                                    // Onchip_SRAM_s1_agent:m0_writedata -> Onchip_SRAM_s1_translator:uav_writedata
	wire          onchip_sram_s1_agent_m0_write;                                                        // Onchip_SRAM_s1_agent:m0_write -> Onchip_SRAM_s1_translator:uav_write
	wire    [2:0] onchip_sram_s1_agent_m0_burstcount;                                                   // Onchip_SRAM_s1_agent:m0_burstcount -> Onchip_SRAM_s1_translator:uav_burstcount
	wire          onchip_sram_s1_agent_rf_source_valid;                                                 // Onchip_SRAM_s1_agent:rf_source_valid -> Onchip_SRAM_s1_agent_rsp_fifo:in_valid
	wire  [133:0] onchip_sram_s1_agent_rf_source_data;                                                  // Onchip_SRAM_s1_agent:rf_source_data -> Onchip_SRAM_s1_agent_rsp_fifo:in_data
	wire          onchip_sram_s1_agent_rf_source_ready;                                                 // Onchip_SRAM_s1_agent_rsp_fifo:in_ready -> Onchip_SRAM_s1_agent:rf_source_ready
	wire          onchip_sram_s1_agent_rf_source_startofpacket;                                         // Onchip_SRAM_s1_agent:rf_source_startofpacket -> Onchip_SRAM_s1_agent_rsp_fifo:in_startofpacket
	wire          onchip_sram_s1_agent_rf_source_endofpacket;                                           // Onchip_SRAM_s1_agent:rf_source_endofpacket -> Onchip_SRAM_s1_agent_rsp_fifo:in_endofpacket
	wire          onchip_sram_s1_agent_rsp_fifo_out_valid;                                              // Onchip_SRAM_s1_agent_rsp_fifo:out_valid -> Onchip_SRAM_s1_agent:rf_sink_valid
	wire  [133:0] onchip_sram_s1_agent_rsp_fifo_out_data;                                               // Onchip_SRAM_s1_agent_rsp_fifo:out_data -> Onchip_SRAM_s1_agent:rf_sink_data
	wire          onchip_sram_s1_agent_rsp_fifo_out_ready;                                              // Onchip_SRAM_s1_agent:rf_sink_ready -> Onchip_SRAM_s1_agent_rsp_fifo:out_ready
	wire          onchip_sram_s1_agent_rsp_fifo_out_startofpacket;                                      // Onchip_SRAM_s1_agent_rsp_fifo:out_startofpacket -> Onchip_SRAM_s1_agent:rf_sink_startofpacket
	wire          onchip_sram_s1_agent_rsp_fifo_out_endofpacket;                                        // Onchip_SRAM_s1_agent_rsp_fifo:out_endofpacket -> Onchip_SRAM_s1_agent:rf_sink_endofpacket
	wire          onchip_sram_s1_agent_rdata_fifo_src_valid;                                            // Onchip_SRAM_s1_agent:rdata_fifo_src_valid -> Onchip_SRAM_s1_agent_rdata_fifo:in_valid
	wire   [33:0] onchip_sram_s1_agent_rdata_fifo_src_data;                                             // Onchip_SRAM_s1_agent:rdata_fifo_src_data -> Onchip_SRAM_s1_agent_rdata_fifo:in_data
	wire          onchip_sram_s1_agent_rdata_fifo_src_ready;                                            // Onchip_SRAM_s1_agent_rdata_fifo:in_ready -> Onchip_SRAM_s1_agent:rdata_fifo_src_ready
	wire   [31:0] f2h_mem_window_00000000_windowed_slave_agent_m0_readdata;                             // F2H_Mem_Window_00000000_windowed_slave_translator:uav_readdata -> F2H_Mem_Window_00000000_windowed_slave_agent:m0_readdata
	wire          f2h_mem_window_00000000_windowed_slave_agent_m0_waitrequest;                          // F2H_Mem_Window_00000000_windowed_slave_translator:uav_waitrequest -> F2H_Mem_Window_00000000_windowed_slave_agent:m0_waitrequest
	wire          f2h_mem_window_00000000_windowed_slave_agent_m0_debugaccess;                          // F2H_Mem_Window_00000000_windowed_slave_agent:m0_debugaccess -> F2H_Mem_Window_00000000_windowed_slave_translator:uav_debugaccess
	wire   [31:0] f2h_mem_window_00000000_windowed_slave_agent_m0_address;                              // F2H_Mem_Window_00000000_windowed_slave_agent:m0_address -> F2H_Mem_Window_00000000_windowed_slave_translator:uav_address
	wire    [3:0] f2h_mem_window_00000000_windowed_slave_agent_m0_byteenable;                           // F2H_Mem_Window_00000000_windowed_slave_agent:m0_byteenable -> F2H_Mem_Window_00000000_windowed_slave_translator:uav_byteenable
	wire          f2h_mem_window_00000000_windowed_slave_agent_m0_read;                                 // F2H_Mem_Window_00000000_windowed_slave_agent:m0_read -> F2H_Mem_Window_00000000_windowed_slave_translator:uav_read
	wire          f2h_mem_window_00000000_windowed_slave_agent_m0_readdatavalid;                        // F2H_Mem_Window_00000000_windowed_slave_translator:uav_readdatavalid -> F2H_Mem_Window_00000000_windowed_slave_agent:m0_readdatavalid
	wire          f2h_mem_window_00000000_windowed_slave_agent_m0_lock;                                 // F2H_Mem_Window_00000000_windowed_slave_agent:m0_lock -> F2H_Mem_Window_00000000_windowed_slave_translator:uav_lock
	wire   [31:0] f2h_mem_window_00000000_windowed_slave_agent_m0_writedata;                            // F2H_Mem_Window_00000000_windowed_slave_agent:m0_writedata -> F2H_Mem_Window_00000000_windowed_slave_translator:uav_writedata
	wire          f2h_mem_window_00000000_windowed_slave_agent_m0_write;                                // F2H_Mem_Window_00000000_windowed_slave_agent:m0_write -> F2H_Mem_Window_00000000_windowed_slave_translator:uav_write
	wire    [2:0] f2h_mem_window_00000000_windowed_slave_agent_m0_burstcount;                           // F2H_Mem_Window_00000000_windowed_slave_agent:m0_burstcount -> F2H_Mem_Window_00000000_windowed_slave_translator:uav_burstcount
	wire          f2h_mem_window_00000000_windowed_slave_agent_rf_source_valid;                         // F2H_Mem_Window_00000000_windowed_slave_agent:rf_source_valid -> F2H_Mem_Window_00000000_windowed_slave_agent_rsp_fifo:in_valid
	wire  [133:0] f2h_mem_window_00000000_windowed_slave_agent_rf_source_data;                          // F2H_Mem_Window_00000000_windowed_slave_agent:rf_source_data -> F2H_Mem_Window_00000000_windowed_slave_agent_rsp_fifo:in_data
	wire          f2h_mem_window_00000000_windowed_slave_agent_rf_source_ready;                         // F2H_Mem_Window_00000000_windowed_slave_agent_rsp_fifo:in_ready -> F2H_Mem_Window_00000000_windowed_slave_agent:rf_source_ready
	wire          f2h_mem_window_00000000_windowed_slave_agent_rf_source_startofpacket;                 // F2H_Mem_Window_00000000_windowed_slave_agent:rf_source_startofpacket -> F2H_Mem_Window_00000000_windowed_slave_agent_rsp_fifo:in_startofpacket
	wire          f2h_mem_window_00000000_windowed_slave_agent_rf_source_endofpacket;                   // F2H_Mem_Window_00000000_windowed_slave_agent:rf_source_endofpacket -> F2H_Mem_Window_00000000_windowed_slave_agent_rsp_fifo:in_endofpacket
	wire          f2h_mem_window_00000000_windowed_slave_agent_rsp_fifo_out_valid;                      // F2H_Mem_Window_00000000_windowed_slave_agent_rsp_fifo:out_valid -> F2H_Mem_Window_00000000_windowed_slave_agent:rf_sink_valid
	wire  [133:0] f2h_mem_window_00000000_windowed_slave_agent_rsp_fifo_out_data;                       // F2H_Mem_Window_00000000_windowed_slave_agent_rsp_fifo:out_data -> F2H_Mem_Window_00000000_windowed_slave_agent:rf_sink_data
	wire          f2h_mem_window_00000000_windowed_slave_agent_rsp_fifo_out_ready;                      // F2H_Mem_Window_00000000_windowed_slave_agent:rf_sink_ready -> F2H_Mem_Window_00000000_windowed_slave_agent_rsp_fifo:out_ready
	wire          f2h_mem_window_00000000_windowed_slave_agent_rsp_fifo_out_startofpacket;              // F2H_Mem_Window_00000000_windowed_slave_agent_rsp_fifo:out_startofpacket -> F2H_Mem_Window_00000000_windowed_slave_agent:rf_sink_startofpacket
	wire          f2h_mem_window_00000000_windowed_slave_agent_rsp_fifo_out_endofpacket;                // F2H_Mem_Window_00000000_windowed_slave_agent_rsp_fifo:out_endofpacket -> F2H_Mem_Window_00000000_windowed_slave_agent:rf_sink_endofpacket
	wire          f2h_mem_window_00000000_windowed_slave_agent_rdata_fifo_src_valid;                    // F2H_Mem_Window_00000000_windowed_slave_agent:rdata_fifo_src_valid -> F2H_Mem_Window_00000000_windowed_slave_agent_rdata_fifo:in_valid
	wire   [33:0] f2h_mem_window_00000000_windowed_slave_agent_rdata_fifo_src_data;                     // F2H_Mem_Window_00000000_windowed_slave_agent:rdata_fifo_src_data -> F2H_Mem_Window_00000000_windowed_slave_agent_rdata_fifo:in_data
	wire          f2h_mem_window_00000000_windowed_slave_agent_rdata_fifo_src_ready;                    // F2H_Mem_Window_00000000_windowed_slave_agent_rdata_fifo:in_ready -> F2H_Mem_Window_00000000_windowed_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_017_src_valid;                                                                // cmd_mux_017:src_valid -> F2H_Mem_Window_00000000_windowed_slave_agent:cp_valid
	wire  [132:0] cmd_mux_017_src_data;                                                                 // cmd_mux_017:src_data -> F2H_Mem_Window_00000000_windowed_slave_agent:cp_data
	wire          cmd_mux_017_src_ready;                                                                // F2H_Mem_Window_00000000_windowed_slave_agent:cp_ready -> cmd_mux_017:src_ready
	wire   [27:0] cmd_mux_017_src_channel;                                                              // cmd_mux_017:src_channel -> F2H_Mem_Window_00000000_windowed_slave_agent:cp_channel
	wire          cmd_mux_017_src_startofpacket;                                                        // cmd_mux_017:src_startofpacket -> F2H_Mem_Window_00000000_windowed_slave_agent:cp_startofpacket
	wire          cmd_mux_017_src_endofpacket;                                                          // cmd_mux_017:src_endofpacket -> F2H_Mem_Window_00000000_windowed_slave_agent:cp_endofpacket
	wire   [31:0] f2h_mem_window_ff600000_windowed_slave_agent_m0_readdata;                             // F2H_Mem_Window_FF600000_windowed_slave_translator:uav_readdata -> F2H_Mem_Window_FF600000_windowed_slave_agent:m0_readdata
	wire          f2h_mem_window_ff600000_windowed_slave_agent_m0_waitrequest;                          // F2H_Mem_Window_FF600000_windowed_slave_translator:uav_waitrequest -> F2H_Mem_Window_FF600000_windowed_slave_agent:m0_waitrequest
	wire          f2h_mem_window_ff600000_windowed_slave_agent_m0_debugaccess;                          // F2H_Mem_Window_FF600000_windowed_slave_agent:m0_debugaccess -> F2H_Mem_Window_FF600000_windowed_slave_translator:uav_debugaccess
	wire   [31:0] f2h_mem_window_ff600000_windowed_slave_agent_m0_address;                              // F2H_Mem_Window_FF600000_windowed_slave_agent:m0_address -> F2H_Mem_Window_FF600000_windowed_slave_translator:uav_address
	wire    [3:0] f2h_mem_window_ff600000_windowed_slave_agent_m0_byteenable;                           // F2H_Mem_Window_FF600000_windowed_slave_agent:m0_byteenable -> F2H_Mem_Window_FF600000_windowed_slave_translator:uav_byteenable
	wire          f2h_mem_window_ff600000_windowed_slave_agent_m0_read;                                 // F2H_Mem_Window_FF600000_windowed_slave_agent:m0_read -> F2H_Mem_Window_FF600000_windowed_slave_translator:uav_read
	wire          f2h_mem_window_ff600000_windowed_slave_agent_m0_readdatavalid;                        // F2H_Mem_Window_FF600000_windowed_slave_translator:uav_readdatavalid -> F2H_Mem_Window_FF600000_windowed_slave_agent:m0_readdatavalid
	wire          f2h_mem_window_ff600000_windowed_slave_agent_m0_lock;                                 // F2H_Mem_Window_FF600000_windowed_slave_agent:m0_lock -> F2H_Mem_Window_FF600000_windowed_slave_translator:uav_lock
	wire   [31:0] f2h_mem_window_ff600000_windowed_slave_agent_m0_writedata;                            // F2H_Mem_Window_FF600000_windowed_slave_agent:m0_writedata -> F2H_Mem_Window_FF600000_windowed_slave_translator:uav_writedata
	wire          f2h_mem_window_ff600000_windowed_slave_agent_m0_write;                                // F2H_Mem_Window_FF600000_windowed_slave_agent:m0_write -> F2H_Mem_Window_FF600000_windowed_slave_translator:uav_write
	wire    [2:0] f2h_mem_window_ff600000_windowed_slave_agent_m0_burstcount;                           // F2H_Mem_Window_FF600000_windowed_slave_agent:m0_burstcount -> F2H_Mem_Window_FF600000_windowed_slave_translator:uav_burstcount
	wire          f2h_mem_window_ff600000_windowed_slave_agent_rf_source_valid;                         // F2H_Mem_Window_FF600000_windowed_slave_agent:rf_source_valid -> F2H_Mem_Window_FF600000_windowed_slave_agent_rsp_fifo:in_valid
	wire  [133:0] f2h_mem_window_ff600000_windowed_slave_agent_rf_source_data;                          // F2H_Mem_Window_FF600000_windowed_slave_agent:rf_source_data -> F2H_Mem_Window_FF600000_windowed_slave_agent_rsp_fifo:in_data
	wire          f2h_mem_window_ff600000_windowed_slave_agent_rf_source_ready;                         // F2H_Mem_Window_FF600000_windowed_slave_agent_rsp_fifo:in_ready -> F2H_Mem_Window_FF600000_windowed_slave_agent:rf_source_ready
	wire          f2h_mem_window_ff600000_windowed_slave_agent_rf_source_startofpacket;                 // F2H_Mem_Window_FF600000_windowed_slave_agent:rf_source_startofpacket -> F2H_Mem_Window_FF600000_windowed_slave_agent_rsp_fifo:in_startofpacket
	wire          f2h_mem_window_ff600000_windowed_slave_agent_rf_source_endofpacket;                   // F2H_Mem_Window_FF600000_windowed_slave_agent:rf_source_endofpacket -> F2H_Mem_Window_FF600000_windowed_slave_agent_rsp_fifo:in_endofpacket
	wire          f2h_mem_window_ff600000_windowed_slave_agent_rsp_fifo_out_valid;                      // F2H_Mem_Window_FF600000_windowed_slave_agent_rsp_fifo:out_valid -> F2H_Mem_Window_FF600000_windowed_slave_agent:rf_sink_valid
	wire  [133:0] f2h_mem_window_ff600000_windowed_slave_agent_rsp_fifo_out_data;                       // F2H_Mem_Window_FF600000_windowed_slave_agent_rsp_fifo:out_data -> F2H_Mem_Window_FF600000_windowed_slave_agent:rf_sink_data
	wire          f2h_mem_window_ff600000_windowed_slave_agent_rsp_fifo_out_ready;                      // F2H_Mem_Window_FF600000_windowed_slave_agent:rf_sink_ready -> F2H_Mem_Window_FF600000_windowed_slave_agent_rsp_fifo:out_ready
	wire          f2h_mem_window_ff600000_windowed_slave_agent_rsp_fifo_out_startofpacket;              // F2H_Mem_Window_FF600000_windowed_slave_agent_rsp_fifo:out_startofpacket -> F2H_Mem_Window_FF600000_windowed_slave_agent:rf_sink_startofpacket
	wire          f2h_mem_window_ff600000_windowed_slave_agent_rsp_fifo_out_endofpacket;                // F2H_Mem_Window_FF600000_windowed_slave_agent_rsp_fifo:out_endofpacket -> F2H_Mem_Window_FF600000_windowed_slave_agent:rf_sink_endofpacket
	wire          f2h_mem_window_ff600000_windowed_slave_agent_rdata_fifo_src_valid;                    // F2H_Mem_Window_FF600000_windowed_slave_agent:rdata_fifo_src_valid -> F2H_Mem_Window_FF600000_windowed_slave_agent_rdata_fifo:in_valid
	wire   [33:0] f2h_mem_window_ff600000_windowed_slave_agent_rdata_fifo_src_data;                     // F2H_Mem_Window_FF600000_windowed_slave_agent:rdata_fifo_src_data -> F2H_Mem_Window_FF600000_windowed_slave_agent_rdata_fifo:in_data
	wire          f2h_mem_window_ff600000_windowed_slave_agent_rdata_fifo_src_ready;                    // F2H_Mem_Window_FF600000_windowed_slave_agent_rdata_fifo:in_ready -> F2H_Mem_Window_FF600000_windowed_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_018_src_valid;                                                                // cmd_mux_018:src_valid -> F2H_Mem_Window_FF600000_windowed_slave_agent:cp_valid
	wire  [132:0] cmd_mux_018_src_data;                                                                 // cmd_mux_018:src_data -> F2H_Mem_Window_FF600000_windowed_slave_agent:cp_data
	wire          cmd_mux_018_src_ready;                                                                // F2H_Mem_Window_FF600000_windowed_slave_agent:cp_ready -> cmd_mux_018:src_ready
	wire   [27:0] cmd_mux_018_src_channel;                                                              // cmd_mux_018:src_channel -> F2H_Mem_Window_FF600000_windowed_slave_agent:cp_channel
	wire          cmd_mux_018_src_startofpacket;                                                        // cmd_mux_018:src_startofpacket -> F2H_Mem_Window_FF600000_windowed_slave_agent:cp_startofpacket
	wire          cmd_mux_018_src_endofpacket;                                                          // cmd_mux_018:src_endofpacket -> F2H_Mem_Window_FF600000_windowed_slave_agent:cp_endofpacket
	wire   [31:0] f2h_mem_window_ff800000_windowed_slave_agent_m0_readdata;                             // F2H_Mem_Window_FF800000_windowed_slave_translator:uav_readdata -> F2H_Mem_Window_FF800000_windowed_slave_agent:m0_readdata
	wire          f2h_mem_window_ff800000_windowed_slave_agent_m0_waitrequest;                          // F2H_Mem_Window_FF800000_windowed_slave_translator:uav_waitrequest -> F2H_Mem_Window_FF800000_windowed_slave_agent:m0_waitrequest
	wire          f2h_mem_window_ff800000_windowed_slave_agent_m0_debugaccess;                          // F2H_Mem_Window_FF800000_windowed_slave_agent:m0_debugaccess -> F2H_Mem_Window_FF800000_windowed_slave_translator:uav_debugaccess
	wire   [31:0] f2h_mem_window_ff800000_windowed_slave_agent_m0_address;                              // F2H_Mem_Window_FF800000_windowed_slave_agent:m0_address -> F2H_Mem_Window_FF800000_windowed_slave_translator:uav_address
	wire    [3:0] f2h_mem_window_ff800000_windowed_slave_agent_m0_byteenable;                           // F2H_Mem_Window_FF800000_windowed_slave_agent:m0_byteenable -> F2H_Mem_Window_FF800000_windowed_slave_translator:uav_byteenable
	wire          f2h_mem_window_ff800000_windowed_slave_agent_m0_read;                                 // F2H_Mem_Window_FF800000_windowed_slave_agent:m0_read -> F2H_Mem_Window_FF800000_windowed_slave_translator:uav_read
	wire          f2h_mem_window_ff800000_windowed_slave_agent_m0_readdatavalid;                        // F2H_Mem_Window_FF800000_windowed_slave_translator:uav_readdatavalid -> F2H_Mem_Window_FF800000_windowed_slave_agent:m0_readdatavalid
	wire          f2h_mem_window_ff800000_windowed_slave_agent_m0_lock;                                 // F2H_Mem_Window_FF800000_windowed_slave_agent:m0_lock -> F2H_Mem_Window_FF800000_windowed_slave_translator:uav_lock
	wire   [31:0] f2h_mem_window_ff800000_windowed_slave_agent_m0_writedata;                            // F2H_Mem_Window_FF800000_windowed_slave_agent:m0_writedata -> F2H_Mem_Window_FF800000_windowed_slave_translator:uav_writedata
	wire          f2h_mem_window_ff800000_windowed_slave_agent_m0_write;                                // F2H_Mem_Window_FF800000_windowed_slave_agent:m0_write -> F2H_Mem_Window_FF800000_windowed_slave_translator:uav_write
	wire    [2:0] f2h_mem_window_ff800000_windowed_slave_agent_m0_burstcount;                           // F2H_Mem_Window_FF800000_windowed_slave_agent:m0_burstcount -> F2H_Mem_Window_FF800000_windowed_slave_translator:uav_burstcount
	wire          f2h_mem_window_ff800000_windowed_slave_agent_rf_source_valid;                         // F2H_Mem_Window_FF800000_windowed_slave_agent:rf_source_valid -> F2H_Mem_Window_FF800000_windowed_slave_agent_rsp_fifo:in_valid
	wire  [133:0] f2h_mem_window_ff800000_windowed_slave_agent_rf_source_data;                          // F2H_Mem_Window_FF800000_windowed_slave_agent:rf_source_data -> F2H_Mem_Window_FF800000_windowed_slave_agent_rsp_fifo:in_data
	wire          f2h_mem_window_ff800000_windowed_slave_agent_rf_source_ready;                         // F2H_Mem_Window_FF800000_windowed_slave_agent_rsp_fifo:in_ready -> F2H_Mem_Window_FF800000_windowed_slave_agent:rf_source_ready
	wire          f2h_mem_window_ff800000_windowed_slave_agent_rf_source_startofpacket;                 // F2H_Mem_Window_FF800000_windowed_slave_agent:rf_source_startofpacket -> F2H_Mem_Window_FF800000_windowed_slave_agent_rsp_fifo:in_startofpacket
	wire          f2h_mem_window_ff800000_windowed_slave_agent_rf_source_endofpacket;                   // F2H_Mem_Window_FF800000_windowed_slave_agent:rf_source_endofpacket -> F2H_Mem_Window_FF800000_windowed_slave_agent_rsp_fifo:in_endofpacket
	wire          f2h_mem_window_ff800000_windowed_slave_agent_rsp_fifo_out_valid;                      // F2H_Mem_Window_FF800000_windowed_slave_agent_rsp_fifo:out_valid -> F2H_Mem_Window_FF800000_windowed_slave_agent:rf_sink_valid
	wire  [133:0] f2h_mem_window_ff800000_windowed_slave_agent_rsp_fifo_out_data;                       // F2H_Mem_Window_FF800000_windowed_slave_agent_rsp_fifo:out_data -> F2H_Mem_Window_FF800000_windowed_slave_agent:rf_sink_data
	wire          f2h_mem_window_ff800000_windowed_slave_agent_rsp_fifo_out_ready;                      // F2H_Mem_Window_FF800000_windowed_slave_agent:rf_sink_ready -> F2H_Mem_Window_FF800000_windowed_slave_agent_rsp_fifo:out_ready
	wire          f2h_mem_window_ff800000_windowed_slave_agent_rsp_fifo_out_startofpacket;              // F2H_Mem_Window_FF800000_windowed_slave_agent_rsp_fifo:out_startofpacket -> F2H_Mem_Window_FF800000_windowed_slave_agent:rf_sink_startofpacket
	wire          f2h_mem_window_ff800000_windowed_slave_agent_rsp_fifo_out_endofpacket;                // F2H_Mem_Window_FF800000_windowed_slave_agent_rsp_fifo:out_endofpacket -> F2H_Mem_Window_FF800000_windowed_slave_agent:rf_sink_endofpacket
	wire          f2h_mem_window_ff800000_windowed_slave_agent_rdata_fifo_src_valid;                    // F2H_Mem_Window_FF800000_windowed_slave_agent:rdata_fifo_src_valid -> F2H_Mem_Window_FF800000_windowed_slave_agent_rdata_fifo:in_valid
	wire   [33:0] f2h_mem_window_ff800000_windowed_slave_agent_rdata_fifo_src_data;                     // F2H_Mem_Window_FF800000_windowed_slave_agent:rdata_fifo_src_data -> F2H_Mem_Window_FF800000_windowed_slave_agent_rdata_fifo:in_data
	wire          f2h_mem_window_ff800000_windowed_slave_agent_rdata_fifo_src_ready;                    // F2H_Mem_Window_FF800000_windowed_slave_agent_rdata_fifo:in_ready -> F2H_Mem_Window_FF800000_windowed_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_019_src_valid;                                                                // cmd_mux_019:src_valid -> F2H_Mem_Window_FF800000_windowed_slave_agent:cp_valid
	wire  [132:0] cmd_mux_019_src_data;                                                                 // cmd_mux_019:src_data -> F2H_Mem_Window_FF800000_windowed_slave_agent:cp_data
	wire          cmd_mux_019_src_ready;                                                                // F2H_Mem_Window_FF800000_windowed_slave_agent:cp_ready -> cmd_mux_019:src_ready
	wire   [27:0] cmd_mux_019_src_channel;                                                              // cmd_mux_019:src_channel -> F2H_Mem_Window_FF800000_windowed_slave_agent:cp_channel
	wire          cmd_mux_019_src_startofpacket;                                                        // cmd_mux_019:src_startofpacket -> F2H_Mem_Window_FF800000_windowed_slave_agent:cp_startofpacket
	wire          cmd_mux_019_src_endofpacket;                                                          // cmd_mux_019:src_endofpacket -> F2H_Mem_Window_FF800000_windowed_slave_agent:cp_endofpacket
	wire   [31:0] jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_readdata;                               // JTAG_UART_2nd_Core_avalon_jtag_slave_translator:uav_readdata -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_waitrequest;                            // JTAG_UART_2nd_Core_avalon_jtag_slave_translator:uav_waitrequest -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_debugaccess;                            // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:m0_debugaccess -> JTAG_UART_2nd_Core_avalon_jtag_slave_translator:uav_debugaccess
	wire   [31:0] jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_address;                                // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:m0_address -> JTAG_UART_2nd_Core_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_byteenable;                             // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:m0_byteenable -> JTAG_UART_2nd_Core_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_read;                                   // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:m0_read -> JTAG_UART_2nd_Core_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_readdatavalid;                          // JTAG_UART_2nd_Core_avalon_jtag_slave_translator:uav_readdatavalid -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_lock;                                   // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:m0_lock -> JTAG_UART_2nd_Core_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_writedata;                              // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:m0_writedata -> JTAG_UART_2nd_Core_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_write;                                  // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:m0_write -> JTAG_UART_2nd_Core_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_burstcount;                             // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:m0_burstcount -> JTAG_UART_2nd_Core_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_rf_source_valid;                           // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rf_source_valid -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [133:0] jtag_uart_2nd_core_avalon_jtag_slave_agent_rf_source_data;                            // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rf_source_data -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_rf_source_ready;                           // JTAG_UART_2nd_Core_avalon_jtag_slave_agent_rsp_fifo:in_ready -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_rf_source_startofpacket;                   // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rf_source_startofpacket -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_rf_source_endofpacket;                     // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rf_source_endofpacket -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_rsp_fifo_out_valid;                        // JTAG_UART_2nd_Core_avalon_jtag_slave_agent_rsp_fifo:out_valid -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rf_sink_valid
	wire  [133:0] jtag_uart_2nd_core_avalon_jtag_slave_agent_rsp_fifo_out_data;                         // JTAG_UART_2nd_Core_avalon_jtag_slave_agent_rsp_fifo:out_data -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_rsp_fifo_out_ready;                        // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rf_sink_ready -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                // JTAG_UART_2nd_Core_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                  // JTAG_UART_2nd_Core_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_rdata_fifo_src_valid;                      // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rdata_fifo_src_valid -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent_rdata_fifo:in_valid
	wire   [33:0] jtag_uart_2nd_core_avalon_jtag_slave_agent_rdata_fifo_src_data;                       // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rdata_fifo_src_data -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent_rdata_fifo:in_data
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_rdata_fifo_src_ready;                      // JTAG_UART_2nd_Core_avalon_jtag_slave_agent_rdata_fifo:in_ready -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_020_src_valid;                                                                // cmd_mux_020:src_valid -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:cp_valid
	wire  [132:0] cmd_mux_020_src_data;                                                                 // cmd_mux_020:src_data -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:cp_data
	wire          cmd_mux_020_src_ready;                                                                // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:cp_ready -> cmd_mux_020:src_ready
	wire   [27:0] cmd_mux_020_src_channel;                                                              // cmd_mux_020:src_channel -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_020_src_startofpacket;                                                        // cmd_mux_020:src_startofpacket -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:cp_startofpacket
	wire          cmd_mux_020_src_endofpacket;                                                          // cmd_mux_020:src_endofpacket -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:cp_endofpacket
	wire   [31:0] nios2_2nd_core_debug_mem_slave_agent_m0_readdata;                                     // Nios2_2nd_Core_debug_mem_slave_translator:uav_readdata -> Nios2_2nd_Core_debug_mem_slave_agent:m0_readdata
	wire          nios2_2nd_core_debug_mem_slave_agent_m0_waitrequest;                                  // Nios2_2nd_Core_debug_mem_slave_translator:uav_waitrequest -> Nios2_2nd_Core_debug_mem_slave_agent:m0_waitrequest
	wire          nios2_2nd_core_debug_mem_slave_agent_m0_debugaccess;                                  // Nios2_2nd_Core_debug_mem_slave_agent:m0_debugaccess -> Nios2_2nd_Core_debug_mem_slave_translator:uav_debugaccess
	wire   [31:0] nios2_2nd_core_debug_mem_slave_agent_m0_address;                                      // Nios2_2nd_Core_debug_mem_slave_agent:m0_address -> Nios2_2nd_Core_debug_mem_slave_translator:uav_address
	wire    [3:0] nios2_2nd_core_debug_mem_slave_agent_m0_byteenable;                                   // Nios2_2nd_Core_debug_mem_slave_agent:m0_byteenable -> Nios2_2nd_Core_debug_mem_slave_translator:uav_byteenable
	wire          nios2_2nd_core_debug_mem_slave_agent_m0_read;                                         // Nios2_2nd_Core_debug_mem_slave_agent:m0_read -> Nios2_2nd_Core_debug_mem_slave_translator:uav_read
	wire          nios2_2nd_core_debug_mem_slave_agent_m0_readdatavalid;                                // Nios2_2nd_Core_debug_mem_slave_translator:uav_readdatavalid -> Nios2_2nd_Core_debug_mem_slave_agent:m0_readdatavalid
	wire          nios2_2nd_core_debug_mem_slave_agent_m0_lock;                                         // Nios2_2nd_Core_debug_mem_slave_agent:m0_lock -> Nios2_2nd_Core_debug_mem_slave_translator:uav_lock
	wire   [31:0] nios2_2nd_core_debug_mem_slave_agent_m0_writedata;                                    // Nios2_2nd_Core_debug_mem_slave_agent:m0_writedata -> Nios2_2nd_Core_debug_mem_slave_translator:uav_writedata
	wire          nios2_2nd_core_debug_mem_slave_agent_m0_write;                                        // Nios2_2nd_Core_debug_mem_slave_agent:m0_write -> Nios2_2nd_Core_debug_mem_slave_translator:uav_write
	wire    [2:0] nios2_2nd_core_debug_mem_slave_agent_m0_burstcount;                                   // Nios2_2nd_Core_debug_mem_slave_agent:m0_burstcount -> Nios2_2nd_Core_debug_mem_slave_translator:uav_burstcount
	wire          nios2_2nd_core_debug_mem_slave_agent_rf_source_valid;                                 // Nios2_2nd_Core_debug_mem_slave_agent:rf_source_valid -> Nios2_2nd_Core_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [133:0] nios2_2nd_core_debug_mem_slave_agent_rf_source_data;                                  // Nios2_2nd_Core_debug_mem_slave_agent:rf_source_data -> Nios2_2nd_Core_debug_mem_slave_agent_rsp_fifo:in_data
	wire          nios2_2nd_core_debug_mem_slave_agent_rf_source_ready;                                 // Nios2_2nd_Core_debug_mem_slave_agent_rsp_fifo:in_ready -> Nios2_2nd_Core_debug_mem_slave_agent:rf_source_ready
	wire          nios2_2nd_core_debug_mem_slave_agent_rf_source_startofpacket;                         // Nios2_2nd_Core_debug_mem_slave_agent:rf_source_startofpacket -> Nios2_2nd_Core_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          nios2_2nd_core_debug_mem_slave_agent_rf_source_endofpacket;                           // Nios2_2nd_Core_debug_mem_slave_agent:rf_source_endofpacket -> Nios2_2nd_Core_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          nios2_2nd_core_debug_mem_slave_agent_rsp_fifo_out_valid;                              // Nios2_2nd_Core_debug_mem_slave_agent_rsp_fifo:out_valid -> Nios2_2nd_Core_debug_mem_slave_agent:rf_sink_valid
	wire  [133:0] nios2_2nd_core_debug_mem_slave_agent_rsp_fifo_out_data;                               // Nios2_2nd_Core_debug_mem_slave_agent_rsp_fifo:out_data -> Nios2_2nd_Core_debug_mem_slave_agent:rf_sink_data
	wire          nios2_2nd_core_debug_mem_slave_agent_rsp_fifo_out_ready;                              // Nios2_2nd_Core_debug_mem_slave_agent:rf_sink_ready -> Nios2_2nd_Core_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          nios2_2nd_core_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                      // Nios2_2nd_Core_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> Nios2_2nd_Core_debug_mem_slave_agent:rf_sink_startofpacket
	wire          nios2_2nd_core_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                        // Nios2_2nd_Core_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> Nios2_2nd_Core_debug_mem_slave_agent:rf_sink_endofpacket
	wire          nios2_2nd_core_debug_mem_slave_agent_rdata_fifo_src_valid;                            // Nios2_2nd_Core_debug_mem_slave_agent:rdata_fifo_src_valid -> Nios2_2nd_Core_debug_mem_slave_agent_rdata_fifo:in_valid
	wire   [33:0] nios2_2nd_core_debug_mem_slave_agent_rdata_fifo_src_data;                             // Nios2_2nd_Core_debug_mem_slave_agent:rdata_fifo_src_data -> Nios2_2nd_Core_debug_mem_slave_agent_rdata_fifo:in_data
	wire          nios2_2nd_core_debug_mem_slave_agent_rdata_fifo_src_ready;                            // Nios2_2nd_Core_debug_mem_slave_agent_rdata_fifo:in_ready -> Nios2_2nd_Core_debug_mem_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_021_src_valid;                                                                // cmd_mux_021:src_valid -> Nios2_2nd_Core_debug_mem_slave_agent:cp_valid
	wire  [132:0] cmd_mux_021_src_data;                                                                 // cmd_mux_021:src_data -> Nios2_2nd_Core_debug_mem_slave_agent:cp_data
	wire          cmd_mux_021_src_ready;                                                                // Nios2_2nd_Core_debug_mem_slave_agent:cp_ready -> cmd_mux_021:src_ready
	wire   [27:0] cmd_mux_021_src_channel;                                                              // cmd_mux_021:src_channel -> Nios2_2nd_Core_debug_mem_slave_agent:cp_channel
	wire          cmd_mux_021_src_startofpacket;                                                        // cmd_mux_021:src_startofpacket -> Nios2_2nd_Core_debug_mem_slave_agent:cp_startofpacket
	wire          cmd_mux_021_src_endofpacket;                                                          // cmd_mux_021:src_endofpacket -> Nios2_2nd_Core_debug_mem_slave_agent:cp_endofpacket
	wire   [31:0] interval_timer_2nd_core_s1_agent_m0_readdata;                                         // Interval_Timer_2nd_Core_s1_translator:uav_readdata -> Interval_Timer_2nd_Core_s1_agent:m0_readdata
	wire          interval_timer_2nd_core_s1_agent_m0_waitrequest;                                      // Interval_Timer_2nd_Core_s1_translator:uav_waitrequest -> Interval_Timer_2nd_Core_s1_agent:m0_waitrequest
	wire          interval_timer_2nd_core_s1_agent_m0_debugaccess;                                      // Interval_Timer_2nd_Core_s1_agent:m0_debugaccess -> Interval_Timer_2nd_Core_s1_translator:uav_debugaccess
	wire   [31:0] interval_timer_2nd_core_s1_agent_m0_address;                                          // Interval_Timer_2nd_Core_s1_agent:m0_address -> Interval_Timer_2nd_Core_s1_translator:uav_address
	wire    [3:0] interval_timer_2nd_core_s1_agent_m0_byteenable;                                       // Interval_Timer_2nd_Core_s1_agent:m0_byteenable -> Interval_Timer_2nd_Core_s1_translator:uav_byteenable
	wire          interval_timer_2nd_core_s1_agent_m0_read;                                             // Interval_Timer_2nd_Core_s1_agent:m0_read -> Interval_Timer_2nd_Core_s1_translator:uav_read
	wire          interval_timer_2nd_core_s1_agent_m0_readdatavalid;                                    // Interval_Timer_2nd_Core_s1_translator:uav_readdatavalid -> Interval_Timer_2nd_Core_s1_agent:m0_readdatavalid
	wire          interval_timer_2nd_core_s1_agent_m0_lock;                                             // Interval_Timer_2nd_Core_s1_agent:m0_lock -> Interval_Timer_2nd_Core_s1_translator:uav_lock
	wire   [31:0] interval_timer_2nd_core_s1_agent_m0_writedata;                                        // Interval_Timer_2nd_Core_s1_agent:m0_writedata -> Interval_Timer_2nd_Core_s1_translator:uav_writedata
	wire          interval_timer_2nd_core_s1_agent_m0_write;                                            // Interval_Timer_2nd_Core_s1_agent:m0_write -> Interval_Timer_2nd_Core_s1_translator:uav_write
	wire    [2:0] interval_timer_2nd_core_s1_agent_m0_burstcount;                                       // Interval_Timer_2nd_Core_s1_agent:m0_burstcount -> Interval_Timer_2nd_Core_s1_translator:uav_burstcount
	wire          interval_timer_2nd_core_s1_agent_rf_source_valid;                                     // Interval_Timer_2nd_Core_s1_agent:rf_source_valid -> Interval_Timer_2nd_Core_s1_agent_rsp_fifo:in_valid
	wire  [133:0] interval_timer_2nd_core_s1_agent_rf_source_data;                                      // Interval_Timer_2nd_Core_s1_agent:rf_source_data -> Interval_Timer_2nd_Core_s1_agent_rsp_fifo:in_data
	wire          interval_timer_2nd_core_s1_agent_rf_source_ready;                                     // Interval_Timer_2nd_Core_s1_agent_rsp_fifo:in_ready -> Interval_Timer_2nd_Core_s1_agent:rf_source_ready
	wire          interval_timer_2nd_core_s1_agent_rf_source_startofpacket;                             // Interval_Timer_2nd_Core_s1_agent:rf_source_startofpacket -> Interval_Timer_2nd_Core_s1_agent_rsp_fifo:in_startofpacket
	wire          interval_timer_2nd_core_s1_agent_rf_source_endofpacket;                               // Interval_Timer_2nd_Core_s1_agent:rf_source_endofpacket -> Interval_Timer_2nd_Core_s1_agent_rsp_fifo:in_endofpacket
	wire          interval_timer_2nd_core_s1_agent_rsp_fifo_out_valid;                                  // Interval_Timer_2nd_Core_s1_agent_rsp_fifo:out_valid -> Interval_Timer_2nd_Core_s1_agent:rf_sink_valid
	wire  [133:0] interval_timer_2nd_core_s1_agent_rsp_fifo_out_data;                                   // Interval_Timer_2nd_Core_s1_agent_rsp_fifo:out_data -> Interval_Timer_2nd_Core_s1_agent:rf_sink_data
	wire          interval_timer_2nd_core_s1_agent_rsp_fifo_out_ready;                                  // Interval_Timer_2nd_Core_s1_agent:rf_sink_ready -> Interval_Timer_2nd_Core_s1_agent_rsp_fifo:out_ready
	wire          interval_timer_2nd_core_s1_agent_rsp_fifo_out_startofpacket;                          // Interval_Timer_2nd_Core_s1_agent_rsp_fifo:out_startofpacket -> Interval_Timer_2nd_Core_s1_agent:rf_sink_startofpacket
	wire          interval_timer_2nd_core_s1_agent_rsp_fifo_out_endofpacket;                            // Interval_Timer_2nd_Core_s1_agent_rsp_fifo:out_endofpacket -> Interval_Timer_2nd_Core_s1_agent:rf_sink_endofpacket
	wire          interval_timer_2nd_core_s1_agent_rdata_fifo_src_valid;                                // Interval_Timer_2nd_Core_s1_agent:rdata_fifo_src_valid -> Interval_Timer_2nd_Core_s1_agent_rdata_fifo:in_valid
	wire   [33:0] interval_timer_2nd_core_s1_agent_rdata_fifo_src_data;                                 // Interval_Timer_2nd_Core_s1_agent:rdata_fifo_src_data -> Interval_Timer_2nd_Core_s1_agent_rdata_fifo:in_data
	wire          interval_timer_2nd_core_s1_agent_rdata_fifo_src_ready;                                // Interval_Timer_2nd_Core_s1_agent_rdata_fifo:in_ready -> Interval_Timer_2nd_Core_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_022_src_valid;                                                                // cmd_mux_022:src_valid -> Interval_Timer_2nd_Core_s1_agent:cp_valid
	wire  [132:0] cmd_mux_022_src_data;                                                                 // cmd_mux_022:src_data -> Interval_Timer_2nd_Core_s1_agent:cp_data
	wire          cmd_mux_022_src_ready;                                                                // Interval_Timer_2nd_Core_s1_agent:cp_ready -> cmd_mux_022:src_ready
	wire   [27:0] cmd_mux_022_src_channel;                                                              // cmd_mux_022:src_channel -> Interval_Timer_2nd_Core_s1_agent:cp_channel
	wire          cmd_mux_022_src_startofpacket;                                                        // cmd_mux_022:src_startofpacket -> Interval_Timer_2nd_Core_s1_agent:cp_startofpacket
	wire          cmd_mux_022_src_endofpacket;                                                          // cmd_mux_022:src_endofpacket -> Interval_Timer_2nd_Core_s1_agent:cp_endofpacket
	wire   [31:0] interval_timer_2nd_core_2_s1_agent_m0_readdata;                                       // Interval_Timer_2nd_Core_2_s1_translator:uav_readdata -> Interval_Timer_2nd_Core_2_s1_agent:m0_readdata
	wire          interval_timer_2nd_core_2_s1_agent_m0_waitrequest;                                    // Interval_Timer_2nd_Core_2_s1_translator:uav_waitrequest -> Interval_Timer_2nd_Core_2_s1_agent:m0_waitrequest
	wire          interval_timer_2nd_core_2_s1_agent_m0_debugaccess;                                    // Interval_Timer_2nd_Core_2_s1_agent:m0_debugaccess -> Interval_Timer_2nd_Core_2_s1_translator:uav_debugaccess
	wire   [31:0] interval_timer_2nd_core_2_s1_agent_m0_address;                                        // Interval_Timer_2nd_Core_2_s1_agent:m0_address -> Interval_Timer_2nd_Core_2_s1_translator:uav_address
	wire    [3:0] interval_timer_2nd_core_2_s1_agent_m0_byteenable;                                     // Interval_Timer_2nd_Core_2_s1_agent:m0_byteenable -> Interval_Timer_2nd_Core_2_s1_translator:uav_byteenable
	wire          interval_timer_2nd_core_2_s1_agent_m0_read;                                           // Interval_Timer_2nd_Core_2_s1_agent:m0_read -> Interval_Timer_2nd_Core_2_s1_translator:uav_read
	wire          interval_timer_2nd_core_2_s1_agent_m0_readdatavalid;                                  // Interval_Timer_2nd_Core_2_s1_translator:uav_readdatavalid -> Interval_Timer_2nd_Core_2_s1_agent:m0_readdatavalid
	wire          interval_timer_2nd_core_2_s1_agent_m0_lock;                                           // Interval_Timer_2nd_Core_2_s1_agent:m0_lock -> Interval_Timer_2nd_Core_2_s1_translator:uav_lock
	wire   [31:0] interval_timer_2nd_core_2_s1_agent_m0_writedata;                                      // Interval_Timer_2nd_Core_2_s1_agent:m0_writedata -> Interval_Timer_2nd_Core_2_s1_translator:uav_writedata
	wire          interval_timer_2nd_core_2_s1_agent_m0_write;                                          // Interval_Timer_2nd_Core_2_s1_agent:m0_write -> Interval_Timer_2nd_Core_2_s1_translator:uav_write
	wire    [2:0] interval_timer_2nd_core_2_s1_agent_m0_burstcount;                                     // Interval_Timer_2nd_Core_2_s1_agent:m0_burstcount -> Interval_Timer_2nd_Core_2_s1_translator:uav_burstcount
	wire          interval_timer_2nd_core_2_s1_agent_rf_source_valid;                                   // Interval_Timer_2nd_Core_2_s1_agent:rf_source_valid -> Interval_Timer_2nd_Core_2_s1_agent_rsp_fifo:in_valid
	wire  [133:0] interval_timer_2nd_core_2_s1_agent_rf_source_data;                                    // Interval_Timer_2nd_Core_2_s1_agent:rf_source_data -> Interval_Timer_2nd_Core_2_s1_agent_rsp_fifo:in_data
	wire          interval_timer_2nd_core_2_s1_agent_rf_source_ready;                                   // Interval_Timer_2nd_Core_2_s1_agent_rsp_fifo:in_ready -> Interval_Timer_2nd_Core_2_s1_agent:rf_source_ready
	wire          interval_timer_2nd_core_2_s1_agent_rf_source_startofpacket;                           // Interval_Timer_2nd_Core_2_s1_agent:rf_source_startofpacket -> Interval_Timer_2nd_Core_2_s1_agent_rsp_fifo:in_startofpacket
	wire          interval_timer_2nd_core_2_s1_agent_rf_source_endofpacket;                             // Interval_Timer_2nd_Core_2_s1_agent:rf_source_endofpacket -> Interval_Timer_2nd_Core_2_s1_agent_rsp_fifo:in_endofpacket
	wire          interval_timer_2nd_core_2_s1_agent_rsp_fifo_out_valid;                                // Interval_Timer_2nd_Core_2_s1_agent_rsp_fifo:out_valid -> Interval_Timer_2nd_Core_2_s1_agent:rf_sink_valid
	wire  [133:0] interval_timer_2nd_core_2_s1_agent_rsp_fifo_out_data;                                 // Interval_Timer_2nd_Core_2_s1_agent_rsp_fifo:out_data -> Interval_Timer_2nd_Core_2_s1_agent:rf_sink_data
	wire          interval_timer_2nd_core_2_s1_agent_rsp_fifo_out_ready;                                // Interval_Timer_2nd_Core_2_s1_agent:rf_sink_ready -> Interval_Timer_2nd_Core_2_s1_agent_rsp_fifo:out_ready
	wire          interval_timer_2nd_core_2_s1_agent_rsp_fifo_out_startofpacket;                        // Interval_Timer_2nd_Core_2_s1_agent_rsp_fifo:out_startofpacket -> Interval_Timer_2nd_Core_2_s1_agent:rf_sink_startofpacket
	wire          interval_timer_2nd_core_2_s1_agent_rsp_fifo_out_endofpacket;                          // Interval_Timer_2nd_Core_2_s1_agent_rsp_fifo:out_endofpacket -> Interval_Timer_2nd_Core_2_s1_agent:rf_sink_endofpacket
	wire          interval_timer_2nd_core_2_s1_agent_rdata_fifo_src_valid;                              // Interval_Timer_2nd_Core_2_s1_agent:rdata_fifo_src_valid -> Interval_Timer_2nd_Core_2_s1_agent_rdata_fifo:in_valid
	wire   [33:0] interval_timer_2nd_core_2_s1_agent_rdata_fifo_src_data;                               // Interval_Timer_2nd_Core_2_s1_agent:rdata_fifo_src_data -> Interval_Timer_2nd_Core_2_s1_agent_rdata_fifo:in_data
	wire          interval_timer_2nd_core_2_s1_agent_rdata_fifo_src_ready;                              // Interval_Timer_2nd_Core_2_s1_agent_rdata_fifo:in_ready -> Interval_Timer_2nd_Core_2_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_023_src_valid;                                                                // cmd_mux_023:src_valid -> Interval_Timer_2nd_Core_2_s1_agent:cp_valid
	wire  [132:0] cmd_mux_023_src_data;                                                                 // cmd_mux_023:src_data -> Interval_Timer_2nd_Core_2_s1_agent:cp_data
	wire          cmd_mux_023_src_ready;                                                                // Interval_Timer_2nd_Core_2_s1_agent:cp_ready -> cmd_mux_023:src_ready
	wire   [27:0] cmd_mux_023_src_channel;                                                              // cmd_mux_023:src_channel -> Interval_Timer_2nd_Core_2_s1_agent:cp_channel
	wire          cmd_mux_023_src_startofpacket;                                                        // cmd_mux_023:src_startofpacket -> Interval_Timer_2nd_Core_2_s1_agent:cp_startofpacket
	wire          cmd_mux_023_src_endofpacket;                                                          // cmd_mux_023:src_endofpacket -> Interval_Timer_2nd_Core_2_s1_agent:cp_endofpacket
	wire   [31:0] nios2_sram_s2_agent_m0_readdata;                                                      // Nios2_SRAM_s2_translator:uav_readdata -> Nios2_SRAM_s2_agent:m0_readdata
	wire          nios2_sram_s2_agent_m0_waitrequest;                                                   // Nios2_SRAM_s2_translator:uav_waitrequest -> Nios2_SRAM_s2_agent:m0_waitrequest
	wire          nios2_sram_s2_agent_m0_debugaccess;                                                   // Nios2_SRAM_s2_agent:m0_debugaccess -> Nios2_SRAM_s2_translator:uav_debugaccess
	wire   [31:0] nios2_sram_s2_agent_m0_address;                                                       // Nios2_SRAM_s2_agent:m0_address -> Nios2_SRAM_s2_translator:uav_address
	wire    [3:0] nios2_sram_s2_agent_m0_byteenable;                                                    // Nios2_SRAM_s2_agent:m0_byteenable -> Nios2_SRAM_s2_translator:uav_byteenable
	wire          nios2_sram_s2_agent_m0_read;                                                          // Nios2_SRAM_s2_agent:m0_read -> Nios2_SRAM_s2_translator:uav_read
	wire          nios2_sram_s2_agent_m0_readdatavalid;                                                 // Nios2_SRAM_s2_translator:uav_readdatavalid -> Nios2_SRAM_s2_agent:m0_readdatavalid
	wire          nios2_sram_s2_agent_m0_lock;                                                          // Nios2_SRAM_s2_agent:m0_lock -> Nios2_SRAM_s2_translator:uav_lock
	wire   [31:0] nios2_sram_s2_agent_m0_writedata;                                                     // Nios2_SRAM_s2_agent:m0_writedata -> Nios2_SRAM_s2_translator:uav_writedata
	wire          nios2_sram_s2_agent_m0_write;                                                         // Nios2_SRAM_s2_agent:m0_write -> Nios2_SRAM_s2_translator:uav_write
	wire    [2:0] nios2_sram_s2_agent_m0_burstcount;                                                    // Nios2_SRAM_s2_agent:m0_burstcount -> Nios2_SRAM_s2_translator:uav_burstcount
	wire          nios2_sram_s2_agent_rf_source_valid;                                                  // Nios2_SRAM_s2_agent:rf_source_valid -> Nios2_SRAM_s2_agent_rsp_fifo:in_valid
	wire  [133:0] nios2_sram_s2_agent_rf_source_data;                                                   // Nios2_SRAM_s2_agent:rf_source_data -> Nios2_SRAM_s2_agent_rsp_fifo:in_data
	wire          nios2_sram_s2_agent_rf_source_ready;                                                  // Nios2_SRAM_s2_agent_rsp_fifo:in_ready -> Nios2_SRAM_s2_agent:rf_source_ready
	wire          nios2_sram_s2_agent_rf_source_startofpacket;                                          // Nios2_SRAM_s2_agent:rf_source_startofpacket -> Nios2_SRAM_s2_agent_rsp_fifo:in_startofpacket
	wire          nios2_sram_s2_agent_rf_source_endofpacket;                                            // Nios2_SRAM_s2_agent:rf_source_endofpacket -> Nios2_SRAM_s2_agent_rsp_fifo:in_endofpacket
	wire          nios2_sram_s2_agent_rsp_fifo_out_valid;                                               // Nios2_SRAM_s2_agent_rsp_fifo:out_valid -> Nios2_SRAM_s2_agent:rf_sink_valid
	wire  [133:0] nios2_sram_s2_agent_rsp_fifo_out_data;                                                // Nios2_SRAM_s2_agent_rsp_fifo:out_data -> Nios2_SRAM_s2_agent:rf_sink_data
	wire          nios2_sram_s2_agent_rsp_fifo_out_ready;                                               // Nios2_SRAM_s2_agent:rf_sink_ready -> Nios2_SRAM_s2_agent_rsp_fifo:out_ready
	wire          nios2_sram_s2_agent_rsp_fifo_out_startofpacket;                                       // Nios2_SRAM_s2_agent_rsp_fifo:out_startofpacket -> Nios2_SRAM_s2_agent:rf_sink_startofpacket
	wire          nios2_sram_s2_agent_rsp_fifo_out_endofpacket;                                         // Nios2_SRAM_s2_agent_rsp_fifo:out_endofpacket -> Nios2_SRAM_s2_agent:rf_sink_endofpacket
	wire          nios2_sram_s2_agent_rdata_fifo_src_valid;                                             // Nios2_SRAM_s2_agent:rdata_fifo_src_valid -> Nios2_SRAM_s2_agent_rdata_fifo:in_valid
	wire   [33:0] nios2_sram_s2_agent_rdata_fifo_src_data;                                              // Nios2_SRAM_s2_agent:rdata_fifo_src_data -> Nios2_SRAM_s2_agent_rdata_fifo:in_data
	wire          nios2_sram_s2_agent_rdata_fifo_src_ready;                                             // Nios2_SRAM_s2_agent_rdata_fifo:in_ready -> Nios2_SRAM_s2_agent:rdata_fifo_src_ready
	wire          cmd_mux_024_src_valid;                                                                // cmd_mux_024:src_valid -> Nios2_SRAM_s2_agent:cp_valid
	wire  [132:0] cmd_mux_024_src_data;                                                                 // cmd_mux_024:src_data -> Nios2_SRAM_s2_agent:cp_data
	wire          cmd_mux_024_src_ready;                                                                // Nios2_SRAM_s2_agent:cp_ready -> cmd_mux_024:src_ready
	wire   [27:0] cmd_mux_024_src_channel;                                                              // cmd_mux_024:src_channel -> Nios2_SRAM_s2_agent:cp_channel
	wire          cmd_mux_024_src_startofpacket;                                                        // cmd_mux_024:src_startofpacket -> Nios2_SRAM_s2_agent:cp_startofpacket
	wire          cmd_mux_024_src_endofpacket;                                                          // cmd_mux_024:src_endofpacket -> Nios2_SRAM_s2_agent:cp_endofpacket
	wire   [31:0] nios2_2nd_core_sram_s2_agent_m0_readdata;                                             // Nios2_2nd_Core_SRAM_s2_translator:uav_readdata -> Nios2_2nd_Core_SRAM_s2_agent:m0_readdata
	wire          nios2_2nd_core_sram_s2_agent_m0_waitrequest;                                          // Nios2_2nd_Core_SRAM_s2_translator:uav_waitrequest -> Nios2_2nd_Core_SRAM_s2_agent:m0_waitrequest
	wire          nios2_2nd_core_sram_s2_agent_m0_debugaccess;                                          // Nios2_2nd_Core_SRAM_s2_agent:m0_debugaccess -> Nios2_2nd_Core_SRAM_s2_translator:uav_debugaccess
	wire   [31:0] nios2_2nd_core_sram_s2_agent_m0_address;                                              // Nios2_2nd_Core_SRAM_s2_agent:m0_address -> Nios2_2nd_Core_SRAM_s2_translator:uav_address
	wire    [3:0] nios2_2nd_core_sram_s2_agent_m0_byteenable;                                           // Nios2_2nd_Core_SRAM_s2_agent:m0_byteenable -> Nios2_2nd_Core_SRAM_s2_translator:uav_byteenable
	wire          nios2_2nd_core_sram_s2_agent_m0_read;                                                 // Nios2_2nd_Core_SRAM_s2_agent:m0_read -> Nios2_2nd_Core_SRAM_s2_translator:uav_read
	wire          nios2_2nd_core_sram_s2_agent_m0_readdatavalid;                                        // Nios2_2nd_Core_SRAM_s2_translator:uav_readdatavalid -> Nios2_2nd_Core_SRAM_s2_agent:m0_readdatavalid
	wire          nios2_2nd_core_sram_s2_agent_m0_lock;                                                 // Nios2_2nd_Core_SRAM_s2_agent:m0_lock -> Nios2_2nd_Core_SRAM_s2_translator:uav_lock
	wire   [31:0] nios2_2nd_core_sram_s2_agent_m0_writedata;                                            // Nios2_2nd_Core_SRAM_s2_agent:m0_writedata -> Nios2_2nd_Core_SRAM_s2_translator:uav_writedata
	wire          nios2_2nd_core_sram_s2_agent_m0_write;                                                // Nios2_2nd_Core_SRAM_s2_agent:m0_write -> Nios2_2nd_Core_SRAM_s2_translator:uav_write
	wire    [2:0] nios2_2nd_core_sram_s2_agent_m0_burstcount;                                           // Nios2_2nd_Core_SRAM_s2_agent:m0_burstcount -> Nios2_2nd_Core_SRAM_s2_translator:uav_burstcount
	wire          nios2_2nd_core_sram_s2_agent_rf_source_valid;                                         // Nios2_2nd_Core_SRAM_s2_agent:rf_source_valid -> Nios2_2nd_Core_SRAM_s2_agent_rsp_fifo:in_valid
	wire  [133:0] nios2_2nd_core_sram_s2_agent_rf_source_data;                                          // Nios2_2nd_Core_SRAM_s2_agent:rf_source_data -> Nios2_2nd_Core_SRAM_s2_agent_rsp_fifo:in_data
	wire          nios2_2nd_core_sram_s2_agent_rf_source_ready;                                         // Nios2_2nd_Core_SRAM_s2_agent_rsp_fifo:in_ready -> Nios2_2nd_Core_SRAM_s2_agent:rf_source_ready
	wire          nios2_2nd_core_sram_s2_agent_rf_source_startofpacket;                                 // Nios2_2nd_Core_SRAM_s2_agent:rf_source_startofpacket -> Nios2_2nd_Core_SRAM_s2_agent_rsp_fifo:in_startofpacket
	wire          nios2_2nd_core_sram_s2_agent_rf_source_endofpacket;                                   // Nios2_2nd_Core_SRAM_s2_agent:rf_source_endofpacket -> Nios2_2nd_Core_SRAM_s2_agent_rsp_fifo:in_endofpacket
	wire          nios2_2nd_core_sram_s2_agent_rsp_fifo_out_valid;                                      // Nios2_2nd_Core_SRAM_s2_agent_rsp_fifo:out_valid -> Nios2_2nd_Core_SRAM_s2_agent:rf_sink_valid
	wire  [133:0] nios2_2nd_core_sram_s2_agent_rsp_fifo_out_data;                                       // Nios2_2nd_Core_SRAM_s2_agent_rsp_fifo:out_data -> Nios2_2nd_Core_SRAM_s2_agent:rf_sink_data
	wire          nios2_2nd_core_sram_s2_agent_rsp_fifo_out_ready;                                      // Nios2_2nd_Core_SRAM_s2_agent:rf_sink_ready -> Nios2_2nd_Core_SRAM_s2_agent_rsp_fifo:out_ready
	wire          nios2_2nd_core_sram_s2_agent_rsp_fifo_out_startofpacket;                              // Nios2_2nd_Core_SRAM_s2_agent_rsp_fifo:out_startofpacket -> Nios2_2nd_Core_SRAM_s2_agent:rf_sink_startofpacket
	wire          nios2_2nd_core_sram_s2_agent_rsp_fifo_out_endofpacket;                                // Nios2_2nd_Core_SRAM_s2_agent_rsp_fifo:out_endofpacket -> Nios2_2nd_Core_SRAM_s2_agent:rf_sink_endofpacket
	wire          nios2_2nd_core_sram_s2_agent_rdata_fifo_src_valid;                                    // Nios2_2nd_Core_SRAM_s2_agent:rdata_fifo_src_valid -> Nios2_2nd_Core_SRAM_s2_agent_rdata_fifo:in_valid
	wire   [33:0] nios2_2nd_core_sram_s2_agent_rdata_fifo_src_data;                                     // Nios2_2nd_Core_SRAM_s2_agent:rdata_fifo_src_data -> Nios2_2nd_Core_SRAM_s2_agent_rdata_fifo:in_data
	wire          nios2_2nd_core_sram_s2_agent_rdata_fifo_src_ready;                                    // Nios2_2nd_Core_SRAM_s2_agent_rdata_fifo:in_ready -> Nios2_2nd_Core_SRAM_s2_agent:rdata_fifo_src_ready
	wire          cmd_mux_025_src_valid;                                                                // cmd_mux_025:src_valid -> Nios2_2nd_Core_SRAM_s2_agent:cp_valid
	wire  [132:0] cmd_mux_025_src_data;                                                                 // cmd_mux_025:src_data -> Nios2_2nd_Core_SRAM_s2_agent:cp_data
	wire          cmd_mux_025_src_ready;                                                                // Nios2_2nd_Core_SRAM_s2_agent:cp_ready -> cmd_mux_025:src_ready
	wire   [27:0] cmd_mux_025_src_channel;                                                              // cmd_mux_025:src_channel -> Nios2_2nd_Core_SRAM_s2_agent:cp_channel
	wire          cmd_mux_025_src_startofpacket;                                                        // cmd_mux_025:src_startofpacket -> Nios2_2nd_Core_SRAM_s2_agent:cp_startofpacket
	wire          cmd_mux_025_src_endofpacket;                                                          // cmd_mux_025:src_endofpacket -> Nios2_2nd_Core_SRAM_s2_agent:cp_endofpacket
	wire   [31:0] onchip_sram_s2_agent_m0_readdata;                                                     // Onchip_SRAM_s2_translator:uav_readdata -> Onchip_SRAM_s2_agent:m0_readdata
	wire          onchip_sram_s2_agent_m0_waitrequest;                                                  // Onchip_SRAM_s2_translator:uav_waitrequest -> Onchip_SRAM_s2_agent:m0_waitrequest
	wire          onchip_sram_s2_agent_m0_debugaccess;                                                  // Onchip_SRAM_s2_agent:m0_debugaccess -> Onchip_SRAM_s2_translator:uav_debugaccess
	wire   [31:0] onchip_sram_s2_agent_m0_address;                                                      // Onchip_SRAM_s2_agent:m0_address -> Onchip_SRAM_s2_translator:uav_address
	wire    [3:0] onchip_sram_s2_agent_m0_byteenable;                                                   // Onchip_SRAM_s2_agent:m0_byteenable -> Onchip_SRAM_s2_translator:uav_byteenable
	wire          onchip_sram_s2_agent_m0_read;                                                         // Onchip_SRAM_s2_agent:m0_read -> Onchip_SRAM_s2_translator:uav_read
	wire          onchip_sram_s2_agent_m0_readdatavalid;                                                // Onchip_SRAM_s2_translator:uav_readdatavalid -> Onchip_SRAM_s2_agent:m0_readdatavalid
	wire          onchip_sram_s2_agent_m0_lock;                                                         // Onchip_SRAM_s2_agent:m0_lock -> Onchip_SRAM_s2_translator:uav_lock
	wire   [31:0] onchip_sram_s2_agent_m0_writedata;                                                    // Onchip_SRAM_s2_agent:m0_writedata -> Onchip_SRAM_s2_translator:uav_writedata
	wire          onchip_sram_s2_agent_m0_write;                                                        // Onchip_SRAM_s2_agent:m0_write -> Onchip_SRAM_s2_translator:uav_write
	wire    [2:0] onchip_sram_s2_agent_m0_burstcount;                                                   // Onchip_SRAM_s2_agent:m0_burstcount -> Onchip_SRAM_s2_translator:uav_burstcount
	wire          onchip_sram_s2_agent_rf_source_valid;                                                 // Onchip_SRAM_s2_agent:rf_source_valid -> Onchip_SRAM_s2_agent_rsp_fifo:in_valid
	wire  [133:0] onchip_sram_s2_agent_rf_source_data;                                                  // Onchip_SRAM_s2_agent:rf_source_data -> Onchip_SRAM_s2_agent_rsp_fifo:in_data
	wire          onchip_sram_s2_agent_rf_source_ready;                                                 // Onchip_SRAM_s2_agent_rsp_fifo:in_ready -> Onchip_SRAM_s2_agent:rf_source_ready
	wire          onchip_sram_s2_agent_rf_source_startofpacket;                                         // Onchip_SRAM_s2_agent:rf_source_startofpacket -> Onchip_SRAM_s2_agent_rsp_fifo:in_startofpacket
	wire          onchip_sram_s2_agent_rf_source_endofpacket;                                           // Onchip_SRAM_s2_agent:rf_source_endofpacket -> Onchip_SRAM_s2_agent_rsp_fifo:in_endofpacket
	wire          onchip_sram_s2_agent_rsp_fifo_out_valid;                                              // Onchip_SRAM_s2_agent_rsp_fifo:out_valid -> Onchip_SRAM_s2_agent:rf_sink_valid
	wire  [133:0] onchip_sram_s2_agent_rsp_fifo_out_data;                                               // Onchip_SRAM_s2_agent_rsp_fifo:out_data -> Onchip_SRAM_s2_agent:rf_sink_data
	wire          onchip_sram_s2_agent_rsp_fifo_out_ready;                                              // Onchip_SRAM_s2_agent:rf_sink_ready -> Onchip_SRAM_s2_agent_rsp_fifo:out_ready
	wire          onchip_sram_s2_agent_rsp_fifo_out_startofpacket;                                      // Onchip_SRAM_s2_agent_rsp_fifo:out_startofpacket -> Onchip_SRAM_s2_agent:rf_sink_startofpacket
	wire          onchip_sram_s2_agent_rsp_fifo_out_endofpacket;                                        // Onchip_SRAM_s2_agent_rsp_fifo:out_endofpacket -> Onchip_SRAM_s2_agent:rf_sink_endofpacket
	wire          onchip_sram_s2_agent_rdata_fifo_src_valid;                                            // Onchip_SRAM_s2_agent:rdata_fifo_src_valid -> Onchip_SRAM_s2_agent_rdata_fifo:in_valid
	wire   [33:0] onchip_sram_s2_agent_rdata_fifo_src_data;                                             // Onchip_SRAM_s2_agent:rdata_fifo_src_data -> Onchip_SRAM_s2_agent_rdata_fifo:in_data
	wire          onchip_sram_s2_agent_rdata_fifo_src_ready;                                            // Onchip_SRAM_s2_agent_rdata_fifo:in_ready -> Onchip_SRAM_s2_agent:rdata_fifo_src_ready
	wire          cmd_mux_026_src_valid;                                                                // cmd_mux_026:src_valid -> Onchip_SRAM_s2_agent:cp_valid
	wire  [132:0] cmd_mux_026_src_data;                                                                 // cmd_mux_026:src_data -> Onchip_SRAM_s2_agent:cp_data
	wire          cmd_mux_026_src_ready;                                                                // Onchip_SRAM_s2_agent:cp_ready -> cmd_mux_026:src_ready
	wire   [27:0] cmd_mux_026_src_channel;                                                              // cmd_mux_026:src_channel -> Onchip_SRAM_s2_agent:cp_channel
	wire          cmd_mux_026_src_startofpacket;                                                        // cmd_mux_026:src_startofpacket -> Onchip_SRAM_s2_agent:cp_startofpacket
	wire          cmd_mux_026_src_endofpacket;                                                          // cmd_mux_026:src_endofpacket -> Onchip_SRAM_s2_agent:cp_endofpacket
	wire   [31:0] nios2_debug_mem_slave_agent_m0_readdata;                                              // Nios2_debug_mem_slave_translator:uav_readdata -> Nios2_debug_mem_slave_agent:m0_readdata
	wire          nios2_debug_mem_slave_agent_m0_waitrequest;                                           // Nios2_debug_mem_slave_translator:uav_waitrequest -> Nios2_debug_mem_slave_agent:m0_waitrequest
	wire          nios2_debug_mem_slave_agent_m0_debugaccess;                                           // Nios2_debug_mem_slave_agent:m0_debugaccess -> Nios2_debug_mem_slave_translator:uav_debugaccess
	wire   [31:0] nios2_debug_mem_slave_agent_m0_address;                                               // Nios2_debug_mem_slave_agent:m0_address -> Nios2_debug_mem_slave_translator:uav_address
	wire    [3:0] nios2_debug_mem_slave_agent_m0_byteenable;                                            // Nios2_debug_mem_slave_agent:m0_byteenable -> Nios2_debug_mem_slave_translator:uav_byteenable
	wire          nios2_debug_mem_slave_agent_m0_read;                                                  // Nios2_debug_mem_slave_agent:m0_read -> Nios2_debug_mem_slave_translator:uav_read
	wire          nios2_debug_mem_slave_agent_m0_readdatavalid;                                         // Nios2_debug_mem_slave_translator:uav_readdatavalid -> Nios2_debug_mem_slave_agent:m0_readdatavalid
	wire          nios2_debug_mem_slave_agent_m0_lock;                                                  // Nios2_debug_mem_slave_agent:m0_lock -> Nios2_debug_mem_slave_translator:uav_lock
	wire   [31:0] nios2_debug_mem_slave_agent_m0_writedata;                                             // Nios2_debug_mem_slave_agent:m0_writedata -> Nios2_debug_mem_slave_translator:uav_writedata
	wire          nios2_debug_mem_slave_agent_m0_write;                                                 // Nios2_debug_mem_slave_agent:m0_write -> Nios2_debug_mem_slave_translator:uav_write
	wire    [2:0] nios2_debug_mem_slave_agent_m0_burstcount;                                            // Nios2_debug_mem_slave_agent:m0_burstcount -> Nios2_debug_mem_slave_translator:uav_burstcount
	wire          nios2_debug_mem_slave_agent_rf_source_valid;                                          // Nios2_debug_mem_slave_agent:rf_source_valid -> Nios2_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [133:0] nios2_debug_mem_slave_agent_rf_source_data;                                           // Nios2_debug_mem_slave_agent:rf_source_data -> Nios2_debug_mem_slave_agent_rsp_fifo:in_data
	wire          nios2_debug_mem_slave_agent_rf_source_ready;                                          // Nios2_debug_mem_slave_agent_rsp_fifo:in_ready -> Nios2_debug_mem_slave_agent:rf_source_ready
	wire          nios2_debug_mem_slave_agent_rf_source_startofpacket;                                  // Nios2_debug_mem_slave_agent:rf_source_startofpacket -> Nios2_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          nios2_debug_mem_slave_agent_rf_source_endofpacket;                                    // Nios2_debug_mem_slave_agent:rf_source_endofpacket -> Nios2_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          nios2_debug_mem_slave_agent_rsp_fifo_out_valid;                                       // Nios2_debug_mem_slave_agent_rsp_fifo:out_valid -> Nios2_debug_mem_slave_agent:rf_sink_valid
	wire  [133:0] nios2_debug_mem_slave_agent_rsp_fifo_out_data;                                        // Nios2_debug_mem_slave_agent_rsp_fifo:out_data -> Nios2_debug_mem_slave_agent:rf_sink_data
	wire          nios2_debug_mem_slave_agent_rsp_fifo_out_ready;                                       // Nios2_debug_mem_slave_agent:rf_sink_ready -> Nios2_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          nios2_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                               // Nios2_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> Nios2_debug_mem_slave_agent:rf_sink_startofpacket
	wire          nios2_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                                 // Nios2_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> Nios2_debug_mem_slave_agent:rf_sink_endofpacket
	wire          nios2_debug_mem_slave_agent_rdata_fifo_src_valid;                                     // Nios2_debug_mem_slave_agent:rdata_fifo_src_valid -> Nios2_debug_mem_slave_agent_rdata_fifo:in_valid
	wire   [33:0] nios2_debug_mem_slave_agent_rdata_fifo_src_data;                                      // Nios2_debug_mem_slave_agent:rdata_fifo_src_data -> Nios2_debug_mem_slave_agent_rdata_fifo:in_data
	wire          nios2_debug_mem_slave_agent_rdata_fifo_src_ready;                                     // Nios2_debug_mem_slave_agent_rdata_fifo:in_ready -> Nios2_debug_mem_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_027_src_valid;                                                                // cmd_mux_027:src_valid -> Nios2_debug_mem_slave_agent:cp_valid
	wire  [132:0] cmd_mux_027_src_data;                                                                 // cmd_mux_027:src_data -> Nios2_debug_mem_slave_agent:cp_data
	wire          cmd_mux_027_src_ready;                                                                // Nios2_debug_mem_slave_agent:cp_ready -> cmd_mux_027:src_ready
	wire   [27:0] cmd_mux_027_src_channel;                                                              // cmd_mux_027:src_channel -> Nios2_debug_mem_slave_agent:cp_channel
	wire          cmd_mux_027_src_startofpacket;                                                        // cmd_mux_027:src_startofpacket -> Nios2_debug_mem_slave_agent:cp_startofpacket
	wire          cmd_mux_027_src_endofpacket;                                                          // cmd_mux_027:src_endofpacket -> Nios2_debug_mem_slave_agent:cp_endofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_agent_write_cp_valid;                                    // ARM_A9_HPS_h2f_lw_axi_master_agent:write_cp_valid -> router:sink_valid
	wire  [132:0] arm_a9_hps_h2f_lw_axi_master_agent_write_cp_data;                                     // ARM_A9_HPS_h2f_lw_axi_master_agent:write_cp_data -> router:sink_data
	wire          arm_a9_hps_h2f_lw_axi_master_agent_write_cp_ready;                                    // router:sink_ready -> ARM_A9_HPS_h2f_lw_axi_master_agent:write_cp_ready
	wire          arm_a9_hps_h2f_lw_axi_master_agent_write_cp_startofpacket;                            // ARM_A9_HPS_h2f_lw_axi_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_agent_write_cp_endofpacket;                              // ARM_A9_HPS_h2f_lw_axi_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_agent_read_cp_valid;                                     // ARM_A9_HPS_h2f_lw_axi_master_agent:read_cp_valid -> router_001:sink_valid
	wire  [132:0] arm_a9_hps_h2f_lw_axi_master_agent_read_cp_data;                                      // ARM_A9_HPS_h2f_lw_axi_master_agent:read_cp_data -> router_001:sink_data
	wire          arm_a9_hps_h2f_lw_axi_master_agent_read_cp_ready;                                     // router_001:sink_ready -> ARM_A9_HPS_h2f_lw_axi_master_agent:read_cp_ready
	wire          arm_a9_hps_h2f_lw_axi_master_agent_read_cp_startofpacket;                             // ARM_A9_HPS_h2f_lw_axi_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_agent_read_cp_endofpacket;                               // ARM_A9_HPS_h2f_lw_axi_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          nios2_data_master_agent_cp_valid;                                                     // Nios2_data_master_agent:cp_valid -> router_002:sink_valid
	wire  [132:0] nios2_data_master_agent_cp_data;                                                      // Nios2_data_master_agent:cp_data -> router_002:sink_data
	wire          nios2_data_master_agent_cp_ready;                                                     // router_002:sink_ready -> Nios2_data_master_agent:cp_ready
	wire          nios2_data_master_agent_cp_startofpacket;                                             // Nios2_data_master_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          nios2_data_master_agent_cp_endofpacket;                                               // Nios2_data_master_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                                 // router_002:src_valid -> cmd_demux_002:sink_valid
	wire  [132:0] router_002_src_data;                                                                  // router_002:src_data -> cmd_demux_002:sink_data
	wire          router_002_src_ready;                                                                 // cmd_demux_002:sink_ready -> router_002:src_ready
	wire   [27:0] router_002_src_channel;                                                               // router_002:src_channel -> cmd_demux_002:sink_channel
	wire          router_002_src_startofpacket;                                                         // router_002:src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          router_002_src_endofpacket;                                                           // router_002:src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          nios2_2nd_core_data_master_agent_cp_valid;                                            // Nios2_2nd_Core_data_master_agent:cp_valid -> router_003:sink_valid
	wire  [132:0] nios2_2nd_core_data_master_agent_cp_data;                                             // Nios2_2nd_Core_data_master_agent:cp_data -> router_003:sink_data
	wire          nios2_2nd_core_data_master_agent_cp_ready;                                            // router_003:sink_ready -> Nios2_2nd_Core_data_master_agent:cp_ready
	wire          nios2_2nd_core_data_master_agent_cp_startofpacket;                                    // Nios2_2nd_Core_data_master_agent:cp_startofpacket -> router_003:sink_startofpacket
	wire          nios2_2nd_core_data_master_agent_cp_endofpacket;                                      // Nios2_2nd_Core_data_master_agent:cp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                                 // router_003:src_valid -> cmd_demux_003:sink_valid
	wire  [132:0] router_003_src_data;                                                                  // router_003:src_data -> cmd_demux_003:sink_data
	wire          router_003_src_ready;                                                                 // cmd_demux_003:sink_ready -> router_003:src_ready
	wire   [27:0] router_003_src_channel;                                                               // router_003:src_channel -> cmd_demux_003:sink_channel
	wire          router_003_src_startofpacket;                                                         // router_003:src_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          router_003_src_endofpacket;                                                           // router_003:src_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          jtag_to_fpga_bridge_master_agent_cp_valid;                                            // JTAG_to_FPGA_Bridge_master_agent:cp_valid -> router_004:sink_valid
	wire  [132:0] jtag_to_fpga_bridge_master_agent_cp_data;                                             // JTAG_to_FPGA_Bridge_master_agent:cp_data -> router_004:sink_data
	wire          jtag_to_fpga_bridge_master_agent_cp_ready;                                            // router_004:sink_ready -> JTAG_to_FPGA_Bridge_master_agent:cp_ready
	wire          jtag_to_fpga_bridge_master_agent_cp_startofpacket;                                    // JTAG_to_FPGA_Bridge_master_agent:cp_startofpacket -> router_004:sink_startofpacket
	wire          jtag_to_fpga_bridge_master_agent_cp_endofpacket;                                      // JTAG_to_FPGA_Bridge_master_agent:cp_endofpacket -> router_004:sink_endofpacket
	wire          nios2_2nd_core_instruction_master_agent_cp_valid;                                     // Nios2_2nd_Core_instruction_master_agent:cp_valid -> router_005:sink_valid
	wire  [132:0] nios2_2nd_core_instruction_master_agent_cp_data;                                      // Nios2_2nd_Core_instruction_master_agent:cp_data -> router_005:sink_data
	wire          nios2_2nd_core_instruction_master_agent_cp_ready;                                     // router_005:sink_ready -> Nios2_2nd_Core_instruction_master_agent:cp_ready
	wire          nios2_2nd_core_instruction_master_agent_cp_startofpacket;                             // Nios2_2nd_Core_instruction_master_agent:cp_startofpacket -> router_005:sink_startofpacket
	wire          nios2_2nd_core_instruction_master_agent_cp_endofpacket;                               // Nios2_2nd_Core_instruction_master_agent:cp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                                 // router_005:src_valid -> cmd_demux_005:sink_valid
	wire  [132:0] router_005_src_data;                                                                  // router_005:src_data -> cmd_demux_005:sink_data
	wire          router_005_src_ready;                                                                 // cmd_demux_005:sink_ready -> router_005:src_ready
	wire   [27:0] router_005_src_channel;                                                               // router_005:src_channel -> cmd_demux_005:sink_channel
	wire          router_005_src_startofpacket;                                                         // router_005:src_startofpacket -> cmd_demux_005:sink_startofpacket
	wire          router_005_src_endofpacket;                                                           // router_005:src_endofpacket -> cmd_demux_005:sink_endofpacket
	wire          nios2_instruction_master_agent_cp_valid;                                              // Nios2_instruction_master_agent:cp_valid -> router_006:sink_valid
	wire  [132:0] nios2_instruction_master_agent_cp_data;                                               // Nios2_instruction_master_agent:cp_data -> router_006:sink_data
	wire          nios2_instruction_master_agent_cp_ready;                                              // router_006:sink_ready -> Nios2_instruction_master_agent:cp_ready
	wire          nios2_instruction_master_agent_cp_startofpacket;                                      // Nios2_instruction_master_agent:cp_startofpacket -> router_006:sink_startofpacket
	wire          nios2_instruction_master_agent_cp_endofpacket;                                        // Nios2_instruction_master_agent:cp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                                 // router_006:src_valid -> cmd_demux_006:sink_valid
	wire  [132:0] router_006_src_data;                                                                  // router_006:src_data -> cmd_demux_006:sink_data
	wire          router_006_src_ready;                                                                 // cmd_demux_006:sink_ready -> router_006:src_ready
	wire   [27:0] router_006_src_channel;                                                               // router_006:src_channel -> cmd_demux_006:sink_channel
	wire          router_006_src_startofpacket;                                                         // router_006:src_startofpacket -> cmd_demux_006:sink_startofpacket
	wire          router_006_src_endofpacket;                                                           // router_006:src_endofpacket -> cmd_demux_006:sink_endofpacket
	wire          arm_a9_hps_h2f_axi_master_agent_write_cp_valid;                                       // ARM_A9_HPS_h2f_axi_master_agent:write_cp_valid -> router_007:sink_valid
	wire  [168:0] arm_a9_hps_h2f_axi_master_agent_write_cp_data;                                        // ARM_A9_HPS_h2f_axi_master_agent:write_cp_data -> router_007:sink_data
	wire          arm_a9_hps_h2f_axi_master_agent_write_cp_ready;                                       // router_007:sink_ready -> ARM_A9_HPS_h2f_axi_master_agent:write_cp_ready
	wire          arm_a9_hps_h2f_axi_master_agent_write_cp_startofpacket;                               // ARM_A9_HPS_h2f_axi_master_agent:write_cp_startofpacket -> router_007:sink_startofpacket
	wire          arm_a9_hps_h2f_axi_master_agent_write_cp_endofpacket;                                 // ARM_A9_HPS_h2f_axi_master_agent:write_cp_endofpacket -> router_007:sink_endofpacket
	wire          arm_a9_hps_h2f_axi_master_agent_read_cp_valid;                                        // ARM_A9_HPS_h2f_axi_master_agent:read_cp_valid -> router_008:sink_valid
	wire  [168:0] arm_a9_hps_h2f_axi_master_agent_read_cp_data;                                         // ARM_A9_HPS_h2f_axi_master_agent:read_cp_data -> router_008:sink_data
	wire          arm_a9_hps_h2f_axi_master_agent_read_cp_ready;                                        // router_008:sink_ready -> ARM_A9_HPS_h2f_axi_master_agent:read_cp_ready
	wire          arm_a9_hps_h2f_axi_master_agent_read_cp_startofpacket;                                // ARM_A9_HPS_h2f_axi_master_agent:read_cp_startofpacket -> router_008:sink_startofpacket
	wire          arm_a9_hps_h2f_axi_master_agent_read_cp_endofpacket;                                  // ARM_A9_HPS_h2f_axi_master_agent:read_cp_endofpacket -> router_008:sink_endofpacket
	wire          adc_adc_slave_agent_rp_valid;                                                         // ADC_adc_slave_agent:rp_valid -> router_009:sink_valid
	wire  [132:0] adc_adc_slave_agent_rp_data;                                                          // ADC_adc_slave_agent:rp_data -> router_009:sink_data
	wire          adc_adc_slave_agent_rp_ready;                                                         // router_009:sink_ready -> ADC_adc_slave_agent:rp_ready
	wire          adc_adc_slave_agent_rp_startofpacket;                                                 // ADC_adc_slave_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          adc_adc_slave_agent_rp_endofpacket;                                                   // ADC_adc_slave_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                                 // router_009:src_valid -> rsp_demux:sink_valid
	wire  [132:0] router_009_src_data;                                                                  // router_009:src_data -> rsp_demux:sink_data
	wire          router_009_src_ready;                                                                 // rsp_demux:sink_ready -> router_009:src_ready
	wire   [27:0] router_009_src_channel;                                                               // router_009:src_channel -> rsp_demux:sink_channel
	wire          router_009_src_startofpacket;                                                         // router_009:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_009_src_endofpacket;                                                           // router_009:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          sysid_control_slave_agent_rp_valid;                                                   // SysID_control_slave_agent:rp_valid -> router_010:sink_valid
	wire  [132:0] sysid_control_slave_agent_rp_data;                                                    // SysID_control_slave_agent:rp_data -> router_010:sink_data
	wire          sysid_control_slave_agent_rp_ready;                                                   // router_010:sink_ready -> SysID_control_slave_agent:rp_ready
	wire          sysid_control_slave_agent_rp_startofpacket;                                           // SysID_control_slave_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          sysid_control_slave_agent_rp_endofpacket;                                             // SysID_control_slave_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                                 // router_010:src_valid -> rsp_demux_001:sink_valid
	wire  [132:0] router_010_src_data;                                                                  // router_010:src_data -> rsp_demux_001:sink_data
	wire          router_010_src_ready;                                                                 // rsp_demux_001:sink_ready -> router_010:src_ready
	wire   [27:0] router_010_src_channel;                                                               // router_010:src_channel -> rsp_demux_001:sink_channel
	wire          router_010_src_startofpacket;                                                         // router_010:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_010_src_endofpacket;                                                           // router_010:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          leds_s1_agent_rp_valid;                                                               // LEDs_s1_agent:rp_valid -> router_011:sink_valid
	wire  [132:0] leds_s1_agent_rp_data;                                                                // LEDs_s1_agent:rp_data -> router_011:sink_data
	wire          leds_s1_agent_rp_ready;                                                               // router_011:sink_ready -> LEDs_s1_agent:rp_ready
	wire          leds_s1_agent_rp_startofpacket;                                                       // LEDs_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          leds_s1_agent_rp_endofpacket;                                                         // LEDs_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                                 // router_011:src_valid -> rsp_demux_002:sink_valid
	wire  [132:0] router_011_src_data;                                                                  // router_011:src_data -> rsp_demux_002:sink_data
	wire          router_011_src_ready;                                                                 // rsp_demux_002:sink_ready -> router_011:src_ready
	wire   [27:0] router_011_src_channel;                                                               // router_011:src_channel -> rsp_demux_002:sink_channel
	wire          router_011_src_startofpacket;                                                         // router_011:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_011_src_endofpacket;                                                           // router_011:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          slider_switches_s1_agent_rp_valid;                                                    // Slider_Switches_s1_agent:rp_valid -> router_012:sink_valid
	wire  [132:0] slider_switches_s1_agent_rp_data;                                                     // Slider_Switches_s1_agent:rp_data -> router_012:sink_data
	wire          slider_switches_s1_agent_rp_ready;                                                    // router_012:sink_ready -> Slider_Switches_s1_agent:rp_ready
	wire          slider_switches_s1_agent_rp_startofpacket;                                            // Slider_Switches_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          slider_switches_s1_agent_rp_endofpacket;                                              // Slider_Switches_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                                 // router_012:src_valid -> rsp_demux_003:sink_valid
	wire  [132:0] router_012_src_data;                                                                  // router_012:src_data -> rsp_demux_003:sink_data
	wire          router_012_src_ready;                                                                 // rsp_demux_003:sink_ready -> router_012:src_ready
	wire   [27:0] router_012_src_channel;                                                               // router_012:src_channel -> rsp_demux_003:sink_channel
	wire          router_012_src_startofpacket;                                                         // router_012:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_012_src_endofpacket;                                                           // router_012:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          pushbuttons_s1_agent_rp_valid;                                                        // Pushbuttons_s1_agent:rp_valid -> router_013:sink_valid
	wire  [132:0] pushbuttons_s1_agent_rp_data;                                                         // Pushbuttons_s1_agent:rp_data -> router_013:sink_data
	wire          pushbuttons_s1_agent_rp_ready;                                                        // router_013:sink_ready -> Pushbuttons_s1_agent:rp_ready
	wire          pushbuttons_s1_agent_rp_startofpacket;                                                // Pushbuttons_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          pushbuttons_s1_agent_rp_endofpacket;                                                  // Pushbuttons_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                                                 // router_013:src_valid -> rsp_demux_004:sink_valid
	wire  [132:0] router_013_src_data;                                                                  // router_013:src_data -> rsp_demux_004:sink_data
	wire          router_013_src_ready;                                                                 // rsp_demux_004:sink_ready -> router_013:src_ready
	wire   [27:0] router_013_src_channel;                                                               // router_013:src_channel -> rsp_demux_004:sink_channel
	wire          router_013_src_startofpacket;                                                         // router_013:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_013_src_endofpacket;                                                           // router_013:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          expansion_jp1_s1_agent_rp_valid;                                                      // Expansion_JP1_s1_agent:rp_valid -> router_014:sink_valid
	wire  [132:0] expansion_jp1_s1_agent_rp_data;                                                       // Expansion_JP1_s1_agent:rp_data -> router_014:sink_data
	wire          expansion_jp1_s1_agent_rp_ready;                                                      // router_014:sink_ready -> Expansion_JP1_s1_agent:rp_ready
	wire          expansion_jp1_s1_agent_rp_startofpacket;                                              // Expansion_JP1_s1_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          expansion_jp1_s1_agent_rp_endofpacket;                                                // Expansion_JP1_s1_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                                 // router_014:src_valid -> rsp_demux_005:sink_valid
	wire  [132:0] router_014_src_data;                                                                  // router_014:src_data -> rsp_demux_005:sink_data
	wire          router_014_src_ready;                                                                 // rsp_demux_005:sink_ready -> router_014:src_ready
	wire   [27:0] router_014_src_channel;                                                               // router_014:src_channel -> rsp_demux_005:sink_channel
	wire          router_014_src_startofpacket;                                                         // router_014:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_014_src_endofpacket;                                                           // router_014:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          expansion_jp7_s1_agent_rp_valid;                                                      // Expansion_JP7_s1_agent:rp_valid -> router_015:sink_valid
	wire  [132:0] expansion_jp7_s1_agent_rp_data;                                                       // Expansion_JP7_s1_agent:rp_data -> router_015:sink_data
	wire          expansion_jp7_s1_agent_rp_ready;                                                      // router_015:sink_ready -> Expansion_JP7_s1_agent:rp_ready
	wire          expansion_jp7_s1_agent_rp_startofpacket;                                              // Expansion_JP7_s1_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          expansion_jp7_s1_agent_rp_endofpacket;                                                // Expansion_JP7_s1_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          router_015_src_valid;                                                                 // router_015:src_valid -> rsp_demux_006:sink_valid
	wire  [132:0] router_015_src_data;                                                                  // router_015:src_data -> rsp_demux_006:sink_data
	wire          router_015_src_ready;                                                                 // rsp_demux_006:sink_ready -> router_015:src_ready
	wire   [27:0] router_015_src_channel;                                                               // router_015:src_channel -> rsp_demux_006:sink_channel
	wire          router_015_src_startofpacket;                                                         // router_015:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_015_src_endofpacket;                                                           // router_015:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          arduino_gpio_s1_agent_rp_valid;                                                       // Arduino_GPIO_s1_agent:rp_valid -> router_016:sink_valid
	wire  [132:0] arduino_gpio_s1_agent_rp_data;                                                        // Arduino_GPIO_s1_agent:rp_data -> router_016:sink_data
	wire          arduino_gpio_s1_agent_rp_ready;                                                       // router_016:sink_ready -> Arduino_GPIO_s1_agent:rp_ready
	wire          arduino_gpio_s1_agent_rp_startofpacket;                                               // Arduino_GPIO_s1_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire          arduino_gpio_s1_agent_rp_endofpacket;                                                 // Arduino_GPIO_s1_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          router_016_src_valid;                                                                 // router_016:src_valid -> rsp_demux_007:sink_valid
	wire  [132:0] router_016_src_data;                                                                  // router_016:src_data -> rsp_demux_007:sink_data
	wire          router_016_src_ready;                                                                 // rsp_demux_007:sink_ready -> router_016:src_ready
	wire   [27:0] router_016_src_channel;                                                               // router_016:src_channel -> rsp_demux_007:sink_channel
	wire          router_016_src_startofpacket;                                                         // router_016:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_016_src_endofpacket;                                                           // router_016:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          arduino_reset_n_s1_agent_rp_valid;                                                    // Arduino_Reset_N_s1_agent:rp_valid -> router_017:sink_valid
	wire  [132:0] arduino_reset_n_s1_agent_rp_data;                                                     // Arduino_Reset_N_s1_agent:rp_data -> router_017:sink_data
	wire          arduino_reset_n_s1_agent_rp_ready;                                                    // router_017:sink_ready -> Arduino_Reset_N_s1_agent:rp_ready
	wire          arduino_reset_n_s1_agent_rp_startofpacket;                                            // Arduino_Reset_N_s1_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire          arduino_reset_n_s1_agent_rp_endofpacket;                                              // Arduino_Reset_N_s1_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          router_017_src_valid;                                                                 // router_017:src_valid -> rsp_demux_008:sink_valid
	wire  [132:0] router_017_src_data;                                                                  // router_017:src_data -> rsp_demux_008:sink_data
	wire          router_017_src_ready;                                                                 // rsp_demux_008:sink_ready -> router_017:src_ready
	wire   [27:0] router_017_src_channel;                                                               // router_017:src_channel -> rsp_demux_008:sink_channel
	wire          router_017_src_startofpacket;                                                         // router_017:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_017_src_endofpacket;                                                           // router_017:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          interval_timer_s1_agent_rp_valid;                                                     // Interval_Timer_s1_agent:rp_valid -> router_018:sink_valid
	wire  [132:0] interval_timer_s1_agent_rp_data;                                                      // Interval_Timer_s1_agent:rp_data -> router_018:sink_data
	wire          interval_timer_s1_agent_rp_ready;                                                     // router_018:sink_ready -> Interval_Timer_s1_agent:rp_ready
	wire          interval_timer_s1_agent_rp_startofpacket;                                             // Interval_Timer_s1_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire          interval_timer_s1_agent_rp_endofpacket;                                               // Interval_Timer_s1_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire          router_018_src_valid;                                                                 // router_018:src_valid -> rsp_demux_009:sink_valid
	wire  [132:0] router_018_src_data;                                                                  // router_018:src_data -> rsp_demux_009:sink_data
	wire          router_018_src_ready;                                                                 // rsp_demux_009:sink_ready -> router_018:src_ready
	wire   [27:0] router_018_src_channel;                                                               // router_018:src_channel -> rsp_demux_009:sink_channel
	wire          router_018_src_startofpacket;                                                         // router_018:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_018_src_endofpacket;                                                           // router_018:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          interval_timer_2_s1_agent_rp_valid;                                                   // Interval_Timer_2_s1_agent:rp_valid -> router_019:sink_valid
	wire  [132:0] interval_timer_2_s1_agent_rp_data;                                                    // Interval_Timer_2_s1_agent:rp_data -> router_019:sink_data
	wire          interval_timer_2_s1_agent_rp_ready;                                                   // router_019:sink_ready -> Interval_Timer_2_s1_agent:rp_ready
	wire          interval_timer_2_s1_agent_rp_startofpacket;                                           // Interval_Timer_2_s1_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire          interval_timer_2_s1_agent_rp_endofpacket;                                             // Interval_Timer_2_s1_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire          router_019_src_valid;                                                                 // router_019:src_valid -> rsp_demux_010:sink_valid
	wire  [132:0] router_019_src_data;                                                                  // router_019:src_data -> rsp_demux_010:sink_data
	wire          router_019_src_ready;                                                                 // rsp_demux_010:sink_ready -> router_019:src_ready
	wire   [27:0] router_019_src_channel;                                                               // router_019:src_channel -> rsp_demux_010:sink_channel
	wire          router_019_src_startofpacket;                                                         // router_019:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_019_src_endofpacket;                                                           // router_019:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_rp_valid;                                 // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rp_valid -> router_020:sink_valid
	wire  [132:0] jtag_uart_for_arm_0_avalon_jtag_slave_agent_rp_data;                                  // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rp_data -> router_020:sink_data
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_rp_ready;                                 // router_020:sink_ready -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_rp_startofpacket;                         // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rp_startofpacket -> router_020:sink_startofpacket
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_rp_endofpacket;                           // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rp_endofpacket -> router_020:sink_endofpacket
	wire          router_020_src_valid;                                                                 // router_020:src_valid -> rsp_demux_011:sink_valid
	wire  [132:0] router_020_src_data;                                                                  // router_020:src_data -> rsp_demux_011:sink_data
	wire          router_020_src_ready;                                                                 // rsp_demux_011:sink_ready -> router_020:src_ready
	wire   [27:0] router_020_src_channel;                                                               // router_020:src_channel -> rsp_demux_011:sink_channel
	wire          router_020_src_startofpacket;                                                         // router_020:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_020_src_endofpacket;                                                           // router_020:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_rp_valid;                                 // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rp_valid -> router_021:sink_valid
	wire  [132:0] jtag_uart_for_arm_1_avalon_jtag_slave_agent_rp_data;                                  // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rp_data -> router_021:sink_data
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_rp_ready;                                 // router_021:sink_ready -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_rp_startofpacket;                         // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rp_startofpacket -> router_021:sink_startofpacket
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_rp_endofpacket;                           // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rp_endofpacket -> router_021:sink_endofpacket
	wire          router_021_src_valid;                                                                 // router_021:src_valid -> rsp_demux_012:sink_valid
	wire  [132:0] router_021_src_data;                                                                  // router_021:src_data -> rsp_demux_012:sink_data
	wire          router_021_src_ready;                                                                 // rsp_demux_012:sink_ready -> router_021:src_ready
	wire   [27:0] router_021_src_channel;                                                               // router_021:src_channel -> rsp_demux_012:sink_channel
	wire          router_021_src_startofpacket;                                                         // router_021:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          router_021_src_endofpacket;                                                           // router_021:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_valid;                                           // JTAG_UART_avalon_jtag_slave_agent:rp_valid -> router_022:sink_valid
	wire  [132:0] jtag_uart_avalon_jtag_slave_agent_rp_data;                                            // JTAG_UART_avalon_jtag_slave_agent:rp_data -> router_022:sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rp_ready;                                           // router_022:sink_ready -> JTAG_UART_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rp_startofpacket;                                   // JTAG_UART_avalon_jtag_slave_agent:rp_startofpacket -> router_022:sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_endofpacket;                                     // JTAG_UART_avalon_jtag_slave_agent:rp_endofpacket -> router_022:sink_endofpacket
	wire          router_022_src_valid;                                                                 // router_022:src_valid -> rsp_demux_013:sink_valid
	wire  [132:0] router_022_src_data;                                                                  // router_022:src_data -> rsp_demux_013:sink_data
	wire          router_022_src_ready;                                                                 // rsp_demux_013:sink_ready -> router_022:src_ready
	wire   [27:0] router_022_src_channel;                                                               // router_022:src_channel -> rsp_demux_013:sink_channel
	wire          router_022_src_startofpacket;                                                         // router_022:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire          router_022_src_endofpacket;                                                           // router_022:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          nios2_sram_s1_agent_rp_valid;                                                         // Nios2_SRAM_s1_agent:rp_valid -> router_023:sink_valid
	wire  [132:0] nios2_sram_s1_agent_rp_data;                                                          // Nios2_SRAM_s1_agent:rp_data -> router_023:sink_data
	wire          nios2_sram_s1_agent_rp_ready;                                                         // router_023:sink_ready -> Nios2_SRAM_s1_agent:rp_ready
	wire          nios2_sram_s1_agent_rp_startofpacket;                                                 // Nios2_SRAM_s1_agent:rp_startofpacket -> router_023:sink_startofpacket
	wire          nios2_sram_s1_agent_rp_endofpacket;                                                   // Nios2_SRAM_s1_agent:rp_endofpacket -> router_023:sink_endofpacket
	wire          router_023_src_valid;                                                                 // router_023:src_valid -> rsp_demux_014:sink_valid
	wire  [132:0] router_023_src_data;                                                                  // router_023:src_data -> rsp_demux_014:sink_data
	wire          router_023_src_ready;                                                                 // rsp_demux_014:sink_ready -> router_023:src_ready
	wire   [27:0] router_023_src_channel;                                                               // router_023:src_channel -> rsp_demux_014:sink_channel
	wire          router_023_src_startofpacket;                                                         // router_023:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire          router_023_src_endofpacket;                                                           // router_023:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          nios2_2nd_core_sram_s1_agent_rp_valid;                                                // Nios2_2nd_Core_SRAM_s1_agent:rp_valid -> router_024:sink_valid
	wire  [132:0] nios2_2nd_core_sram_s1_agent_rp_data;                                                 // Nios2_2nd_Core_SRAM_s1_agent:rp_data -> router_024:sink_data
	wire          nios2_2nd_core_sram_s1_agent_rp_ready;                                                // router_024:sink_ready -> Nios2_2nd_Core_SRAM_s1_agent:rp_ready
	wire          nios2_2nd_core_sram_s1_agent_rp_startofpacket;                                        // Nios2_2nd_Core_SRAM_s1_agent:rp_startofpacket -> router_024:sink_startofpacket
	wire          nios2_2nd_core_sram_s1_agent_rp_endofpacket;                                          // Nios2_2nd_Core_SRAM_s1_agent:rp_endofpacket -> router_024:sink_endofpacket
	wire          router_024_src_valid;                                                                 // router_024:src_valid -> rsp_demux_015:sink_valid
	wire  [132:0] router_024_src_data;                                                                  // router_024:src_data -> rsp_demux_015:sink_data
	wire          router_024_src_ready;                                                                 // rsp_demux_015:sink_ready -> router_024:src_ready
	wire   [27:0] router_024_src_channel;                                                               // router_024:src_channel -> rsp_demux_015:sink_channel
	wire          router_024_src_startofpacket;                                                         // router_024:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire          router_024_src_endofpacket;                                                           // router_024:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire          onchip_sram_s1_agent_rp_valid;                                                        // Onchip_SRAM_s1_agent:rp_valid -> router_025:sink_valid
	wire  [132:0] onchip_sram_s1_agent_rp_data;                                                         // Onchip_SRAM_s1_agent:rp_data -> router_025:sink_data
	wire          onchip_sram_s1_agent_rp_ready;                                                        // router_025:sink_ready -> Onchip_SRAM_s1_agent:rp_ready
	wire          onchip_sram_s1_agent_rp_startofpacket;                                                // Onchip_SRAM_s1_agent:rp_startofpacket -> router_025:sink_startofpacket
	wire          onchip_sram_s1_agent_rp_endofpacket;                                                  // Onchip_SRAM_s1_agent:rp_endofpacket -> router_025:sink_endofpacket
	wire          router_025_src_valid;                                                                 // router_025:src_valid -> rsp_demux_016:sink_valid
	wire  [132:0] router_025_src_data;                                                                  // router_025:src_data -> rsp_demux_016:sink_data
	wire          router_025_src_ready;                                                                 // rsp_demux_016:sink_ready -> router_025:src_ready
	wire   [27:0] router_025_src_channel;                                                               // router_025:src_channel -> rsp_demux_016:sink_channel
	wire          router_025_src_startofpacket;                                                         // router_025:src_startofpacket -> rsp_demux_016:sink_startofpacket
	wire          router_025_src_endofpacket;                                                           // router_025:src_endofpacket -> rsp_demux_016:sink_endofpacket
	wire          f2h_mem_window_00000000_windowed_slave_agent_rp_valid;                                // F2H_Mem_Window_00000000_windowed_slave_agent:rp_valid -> router_026:sink_valid
	wire  [132:0] f2h_mem_window_00000000_windowed_slave_agent_rp_data;                                 // F2H_Mem_Window_00000000_windowed_slave_agent:rp_data -> router_026:sink_data
	wire          f2h_mem_window_00000000_windowed_slave_agent_rp_ready;                                // router_026:sink_ready -> F2H_Mem_Window_00000000_windowed_slave_agent:rp_ready
	wire          f2h_mem_window_00000000_windowed_slave_agent_rp_startofpacket;                        // F2H_Mem_Window_00000000_windowed_slave_agent:rp_startofpacket -> router_026:sink_startofpacket
	wire          f2h_mem_window_00000000_windowed_slave_agent_rp_endofpacket;                          // F2H_Mem_Window_00000000_windowed_slave_agent:rp_endofpacket -> router_026:sink_endofpacket
	wire          router_026_src_valid;                                                                 // router_026:src_valid -> rsp_demux_017:sink_valid
	wire  [132:0] router_026_src_data;                                                                  // router_026:src_data -> rsp_demux_017:sink_data
	wire          router_026_src_ready;                                                                 // rsp_demux_017:sink_ready -> router_026:src_ready
	wire   [27:0] router_026_src_channel;                                                               // router_026:src_channel -> rsp_demux_017:sink_channel
	wire          router_026_src_startofpacket;                                                         // router_026:src_startofpacket -> rsp_demux_017:sink_startofpacket
	wire          router_026_src_endofpacket;                                                           // router_026:src_endofpacket -> rsp_demux_017:sink_endofpacket
	wire          f2h_mem_window_ff600000_windowed_slave_agent_rp_valid;                                // F2H_Mem_Window_FF600000_windowed_slave_agent:rp_valid -> router_027:sink_valid
	wire  [132:0] f2h_mem_window_ff600000_windowed_slave_agent_rp_data;                                 // F2H_Mem_Window_FF600000_windowed_slave_agent:rp_data -> router_027:sink_data
	wire          f2h_mem_window_ff600000_windowed_slave_agent_rp_ready;                                // router_027:sink_ready -> F2H_Mem_Window_FF600000_windowed_slave_agent:rp_ready
	wire          f2h_mem_window_ff600000_windowed_slave_agent_rp_startofpacket;                        // F2H_Mem_Window_FF600000_windowed_slave_agent:rp_startofpacket -> router_027:sink_startofpacket
	wire          f2h_mem_window_ff600000_windowed_slave_agent_rp_endofpacket;                          // F2H_Mem_Window_FF600000_windowed_slave_agent:rp_endofpacket -> router_027:sink_endofpacket
	wire          router_027_src_valid;                                                                 // router_027:src_valid -> rsp_demux_018:sink_valid
	wire  [132:0] router_027_src_data;                                                                  // router_027:src_data -> rsp_demux_018:sink_data
	wire          router_027_src_ready;                                                                 // rsp_demux_018:sink_ready -> router_027:src_ready
	wire   [27:0] router_027_src_channel;                                                               // router_027:src_channel -> rsp_demux_018:sink_channel
	wire          router_027_src_startofpacket;                                                         // router_027:src_startofpacket -> rsp_demux_018:sink_startofpacket
	wire          router_027_src_endofpacket;                                                           // router_027:src_endofpacket -> rsp_demux_018:sink_endofpacket
	wire          f2h_mem_window_ff800000_windowed_slave_agent_rp_valid;                                // F2H_Mem_Window_FF800000_windowed_slave_agent:rp_valid -> router_028:sink_valid
	wire  [132:0] f2h_mem_window_ff800000_windowed_slave_agent_rp_data;                                 // F2H_Mem_Window_FF800000_windowed_slave_agent:rp_data -> router_028:sink_data
	wire          f2h_mem_window_ff800000_windowed_slave_agent_rp_ready;                                // router_028:sink_ready -> F2H_Mem_Window_FF800000_windowed_slave_agent:rp_ready
	wire          f2h_mem_window_ff800000_windowed_slave_agent_rp_startofpacket;                        // F2H_Mem_Window_FF800000_windowed_slave_agent:rp_startofpacket -> router_028:sink_startofpacket
	wire          f2h_mem_window_ff800000_windowed_slave_agent_rp_endofpacket;                          // F2H_Mem_Window_FF800000_windowed_slave_agent:rp_endofpacket -> router_028:sink_endofpacket
	wire          router_028_src_valid;                                                                 // router_028:src_valid -> rsp_demux_019:sink_valid
	wire  [132:0] router_028_src_data;                                                                  // router_028:src_data -> rsp_demux_019:sink_data
	wire          router_028_src_ready;                                                                 // rsp_demux_019:sink_ready -> router_028:src_ready
	wire   [27:0] router_028_src_channel;                                                               // router_028:src_channel -> rsp_demux_019:sink_channel
	wire          router_028_src_startofpacket;                                                         // router_028:src_startofpacket -> rsp_demux_019:sink_startofpacket
	wire          router_028_src_endofpacket;                                                           // router_028:src_endofpacket -> rsp_demux_019:sink_endofpacket
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_rp_valid;                                  // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rp_valid -> router_029:sink_valid
	wire  [132:0] jtag_uart_2nd_core_avalon_jtag_slave_agent_rp_data;                                   // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rp_data -> router_029:sink_data
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_rp_ready;                                  // router_029:sink_ready -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_rp_startofpacket;                          // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rp_startofpacket -> router_029:sink_startofpacket
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_rp_endofpacket;                            // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rp_endofpacket -> router_029:sink_endofpacket
	wire          router_029_src_valid;                                                                 // router_029:src_valid -> rsp_demux_020:sink_valid
	wire  [132:0] router_029_src_data;                                                                  // router_029:src_data -> rsp_demux_020:sink_data
	wire          router_029_src_ready;                                                                 // rsp_demux_020:sink_ready -> router_029:src_ready
	wire   [27:0] router_029_src_channel;                                                               // router_029:src_channel -> rsp_demux_020:sink_channel
	wire          router_029_src_startofpacket;                                                         // router_029:src_startofpacket -> rsp_demux_020:sink_startofpacket
	wire          router_029_src_endofpacket;                                                           // router_029:src_endofpacket -> rsp_demux_020:sink_endofpacket
	wire          nios2_2nd_core_debug_mem_slave_agent_rp_valid;                                        // Nios2_2nd_Core_debug_mem_slave_agent:rp_valid -> router_030:sink_valid
	wire  [132:0] nios2_2nd_core_debug_mem_slave_agent_rp_data;                                         // Nios2_2nd_Core_debug_mem_slave_agent:rp_data -> router_030:sink_data
	wire          nios2_2nd_core_debug_mem_slave_agent_rp_ready;                                        // router_030:sink_ready -> Nios2_2nd_Core_debug_mem_slave_agent:rp_ready
	wire          nios2_2nd_core_debug_mem_slave_agent_rp_startofpacket;                                // Nios2_2nd_Core_debug_mem_slave_agent:rp_startofpacket -> router_030:sink_startofpacket
	wire          nios2_2nd_core_debug_mem_slave_agent_rp_endofpacket;                                  // Nios2_2nd_Core_debug_mem_slave_agent:rp_endofpacket -> router_030:sink_endofpacket
	wire          router_030_src_valid;                                                                 // router_030:src_valid -> rsp_demux_021:sink_valid
	wire  [132:0] router_030_src_data;                                                                  // router_030:src_data -> rsp_demux_021:sink_data
	wire          router_030_src_ready;                                                                 // rsp_demux_021:sink_ready -> router_030:src_ready
	wire   [27:0] router_030_src_channel;                                                               // router_030:src_channel -> rsp_demux_021:sink_channel
	wire          router_030_src_startofpacket;                                                         // router_030:src_startofpacket -> rsp_demux_021:sink_startofpacket
	wire          router_030_src_endofpacket;                                                           // router_030:src_endofpacket -> rsp_demux_021:sink_endofpacket
	wire          interval_timer_2nd_core_s1_agent_rp_valid;                                            // Interval_Timer_2nd_Core_s1_agent:rp_valid -> router_031:sink_valid
	wire  [132:0] interval_timer_2nd_core_s1_agent_rp_data;                                             // Interval_Timer_2nd_Core_s1_agent:rp_data -> router_031:sink_data
	wire          interval_timer_2nd_core_s1_agent_rp_ready;                                            // router_031:sink_ready -> Interval_Timer_2nd_Core_s1_agent:rp_ready
	wire          interval_timer_2nd_core_s1_agent_rp_startofpacket;                                    // Interval_Timer_2nd_Core_s1_agent:rp_startofpacket -> router_031:sink_startofpacket
	wire          interval_timer_2nd_core_s1_agent_rp_endofpacket;                                      // Interval_Timer_2nd_Core_s1_agent:rp_endofpacket -> router_031:sink_endofpacket
	wire          router_031_src_valid;                                                                 // router_031:src_valid -> rsp_demux_022:sink_valid
	wire  [132:0] router_031_src_data;                                                                  // router_031:src_data -> rsp_demux_022:sink_data
	wire          router_031_src_ready;                                                                 // rsp_demux_022:sink_ready -> router_031:src_ready
	wire   [27:0] router_031_src_channel;                                                               // router_031:src_channel -> rsp_demux_022:sink_channel
	wire          router_031_src_startofpacket;                                                         // router_031:src_startofpacket -> rsp_demux_022:sink_startofpacket
	wire          router_031_src_endofpacket;                                                           // router_031:src_endofpacket -> rsp_demux_022:sink_endofpacket
	wire          interval_timer_2nd_core_2_s1_agent_rp_valid;                                          // Interval_Timer_2nd_Core_2_s1_agent:rp_valid -> router_032:sink_valid
	wire  [132:0] interval_timer_2nd_core_2_s1_agent_rp_data;                                           // Interval_Timer_2nd_Core_2_s1_agent:rp_data -> router_032:sink_data
	wire          interval_timer_2nd_core_2_s1_agent_rp_ready;                                          // router_032:sink_ready -> Interval_Timer_2nd_Core_2_s1_agent:rp_ready
	wire          interval_timer_2nd_core_2_s1_agent_rp_startofpacket;                                  // Interval_Timer_2nd_Core_2_s1_agent:rp_startofpacket -> router_032:sink_startofpacket
	wire          interval_timer_2nd_core_2_s1_agent_rp_endofpacket;                                    // Interval_Timer_2nd_Core_2_s1_agent:rp_endofpacket -> router_032:sink_endofpacket
	wire          router_032_src_valid;                                                                 // router_032:src_valid -> rsp_demux_023:sink_valid
	wire  [132:0] router_032_src_data;                                                                  // router_032:src_data -> rsp_demux_023:sink_data
	wire          router_032_src_ready;                                                                 // rsp_demux_023:sink_ready -> router_032:src_ready
	wire   [27:0] router_032_src_channel;                                                               // router_032:src_channel -> rsp_demux_023:sink_channel
	wire          router_032_src_startofpacket;                                                         // router_032:src_startofpacket -> rsp_demux_023:sink_startofpacket
	wire          router_032_src_endofpacket;                                                           // router_032:src_endofpacket -> rsp_demux_023:sink_endofpacket
	wire          nios2_sram_s2_agent_rp_valid;                                                         // Nios2_SRAM_s2_agent:rp_valid -> router_033:sink_valid
	wire  [132:0] nios2_sram_s2_agent_rp_data;                                                          // Nios2_SRAM_s2_agent:rp_data -> router_033:sink_data
	wire          nios2_sram_s2_agent_rp_ready;                                                         // router_033:sink_ready -> Nios2_SRAM_s2_agent:rp_ready
	wire          nios2_sram_s2_agent_rp_startofpacket;                                                 // Nios2_SRAM_s2_agent:rp_startofpacket -> router_033:sink_startofpacket
	wire          nios2_sram_s2_agent_rp_endofpacket;                                                   // Nios2_SRAM_s2_agent:rp_endofpacket -> router_033:sink_endofpacket
	wire          router_033_src_valid;                                                                 // router_033:src_valid -> rsp_demux_024:sink_valid
	wire  [132:0] router_033_src_data;                                                                  // router_033:src_data -> rsp_demux_024:sink_data
	wire          router_033_src_ready;                                                                 // rsp_demux_024:sink_ready -> router_033:src_ready
	wire   [27:0] router_033_src_channel;                                                               // router_033:src_channel -> rsp_demux_024:sink_channel
	wire          router_033_src_startofpacket;                                                         // router_033:src_startofpacket -> rsp_demux_024:sink_startofpacket
	wire          router_033_src_endofpacket;                                                           // router_033:src_endofpacket -> rsp_demux_024:sink_endofpacket
	wire          nios2_2nd_core_sram_s2_agent_rp_valid;                                                // Nios2_2nd_Core_SRAM_s2_agent:rp_valid -> router_034:sink_valid
	wire  [132:0] nios2_2nd_core_sram_s2_agent_rp_data;                                                 // Nios2_2nd_Core_SRAM_s2_agent:rp_data -> router_034:sink_data
	wire          nios2_2nd_core_sram_s2_agent_rp_ready;                                                // router_034:sink_ready -> Nios2_2nd_Core_SRAM_s2_agent:rp_ready
	wire          nios2_2nd_core_sram_s2_agent_rp_startofpacket;                                        // Nios2_2nd_Core_SRAM_s2_agent:rp_startofpacket -> router_034:sink_startofpacket
	wire          nios2_2nd_core_sram_s2_agent_rp_endofpacket;                                          // Nios2_2nd_Core_SRAM_s2_agent:rp_endofpacket -> router_034:sink_endofpacket
	wire          router_034_src_valid;                                                                 // router_034:src_valid -> rsp_demux_025:sink_valid
	wire  [132:0] router_034_src_data;                                                                  // router_034:src_data -> rsp_demux_025:sink_data
	wire          router_034_src_ready;                                                                 // rsp_demux_025:sink_ready -> router_034:src_ready
	wire   [27:0] router_034_src_channel;                                                               // router_034:src_channel -> rsp_demux_025:sink_channel
	wire          router_034_src_startofpacket;                                                         // router_034:src_startofpacket -> rsp_demux_025:sink_startofpacket
	wire          router_034_src_endofpacket;                                                           // router_034:src_endofpacket -> rsp_demux_025:sink_endofpacket
	wire          onchip_sram_s2_agent_rp_valid;                                                        // Onchip_SRAM_s2_agent:rp_valid -> router_035:sink_valid
	wire  [132:0] onchip_sram_s2_agent_rp_data;                                                         // Onchip_SRAM_s2_agent:rp_data -> router_035:sink_data
	wire          onchip_sram_s2_agent_rp_ready;                                                        // router_035:sink_ready -> Onchip_SRAM_s2_agent:rp_ready
	wire          onchip_sram_s2_agent_rp_startofpacket;                                                // Onchip_SRAM_s2_agent:rp_startofpacket -> router_035:sink_startofpacket
	wire          onchip_sram_s2_agent_rp_endofpacket;                                                  // Onchip_SRAM_s2_agent:rp_endofpacket -> router_035:sink_endofpacket
	wire          router_035_src_valid;                                                                 // router_035:src_valid -> rsp_demux_026:sink_valid
	wire  [132:0] router_035_src_data;                                                                  // router_035:src_data -> rsp_demux_026:sink_data
	wire          router_035_src_ready;                                                                 // rsp_demux_026:sink_ready -> router_035:src_ready
	wire   [27:0] router_035_src_channel;                                                               // router_035:src_channel -> rsp_demux_026:sink_channel
	wire          router_035_src_startofpacket;                                                         // router_035:src_startofpacket -> rsp_demux_026:sink_startofpacket
	wire          router_035_src_endofpacket;                                                           // router_035:src_endofpacket -> rsp_demux_026:sink_endofpacket
	wire          nios2_debug_mem_slave_agent_rp_valid;                                                 // Nios2_debug_mem_slave_agent:rp_valid -> router_036:sink_valid
	wire  [132:0] nios2_debug_mem_slave_agent_rp_data;                                                  // Nios2_debug_mem_slave_agent:rp_data -> router_036:sink_data
	wire          nios2_debug_mem_slave_agent_rp_ready;                                                 // router_036:sink_ready -> Nios2_debug_mem_slave_agent:rp_ready
	wire          nios2_debug_mem_slave_agent_rp_startofpacket;                                         // Nios2_debug_mem_slave_agent:rp_startofpacket -> router_036:sink_startofpacket
	wire          nios2_debug_mem_slave_agent_rp_endofpacket;                                           // Nios2_debug_mem_slave_agent:rp_endofpacket -> router_036:sink_endofpacket
	wire          router_036_src_valid;                                                                 // router_036:src_valid -> rsp_demux_027:sink_valid
	wire  [132:0] router_036_src_data;                                                                  // router_036:src_data -> rsp_demux_027:sink_data
	wire          router_036_src_ready;                                                                 // rsp_demux_027:sink_ready -> router_036:src_ready
	wire   [27:0] router_036_src_channel;                                                               // router_036:src_channel -> rsp_demux_027:sink_channel
	wire          router_036_src_startofpacket;                                                         // router_036:src_startofpacket -> rsp_demux_027:sink_startofpacket
	wire          router_036_src_endofpacket;                                                           // router_036:src_endofpacket -> rsp_demux_027:sink_endofpacket
	wire          router_src_valid;                                                                     // router:src_valid -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_sink_valid
	wire  [132:0] router_src_data;                                                                      // router:src_data -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_sink_data
	wire          router_src_ready;                                                                     // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_sink_ready -> router:src_ready
	wire   [27:0] router_src_channel;                                                                   // router:src_channel -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                             // router:src_startofpacket -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                               // router:src_endofpacket -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_sink_endofpacket
	wire  [132:0] arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_data;                                 // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_ready;                                // cmd_demux:sink_ready -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_src_ready
	wire   [27:0] arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_channel;                              // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket;                        // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket;                          // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                                    // rsp_mux:src_valid -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_sink_valid
	wire  [132:0] rsp_mux_src_data;                                                                     // rsp_mux:src_data -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                                    // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire   [27:0] rsp_mux_src_channel;                                                                  // rsp_mux:src_channel -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                            // rsp_mux:src_startofpacket -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                              // rsp_mux:src_endofpacket -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_sink_endofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_valid;                                // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_src_valid -> ARM_A9_HPS_h2f_lw_axi_master_agent:write_rp_valid
	wire  [132:0] arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_data;                                 // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_src_data -> ARM_A9_HPS_h2f_lw_axi_master_agent:write_rp_data
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_ready;                                // ARM_A9_HPS_h2f_lw_axi_master_agent:write_rp_ready -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_src_ready
	wire   [27:0] arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_channel;                              // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_src_channel -> ARM_A9_HPS_h2f_lw_axi_master_agent:write_rp_channel
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket;                        // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_src_startofpacket -> ARM_A9_HPS_h2f_lw_axi_master_agent:write_rp_startofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket;                          // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_src_endofpacket -> ARM_A9_HPS_h2f_lw_axi_master_agent:write_rp_endofpacket
	wire          router_001_src_valid;                                                                 // router_001:src_valid -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_sink_valid
	wire  [132:0] router_001_src_data;                                                                  // router_001:src_data -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                                 // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_sink_ready -> router_001:src_ready
	wire   [27:0] router_001_src_channel;                                                               // router_001:src_channel -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                                         // router_001:src_startofpacket -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                           // router_001:src_endofpacket -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_sink_endofpacket
	wire  [132:0] arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_data;                                 // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_ready;                                // cmd_demux_001:sink_ready -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_src_ready
	wire   [27:0] arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_channel;                              // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket;                        // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket;                          // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                                // rsp_mux_001:src_valid -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_sink_valid
	wire  [132:0] rsp_mux_001_src_data;                                                                 // rsp_mux_001:src_data -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                                // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire   [27:0] rsp_mux_001_src_channel;                                                              // rsp_mux_001:src_channel -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                                        // rsp_mux_001:src_startofpacket -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                          // rsp_mux_001:src_endofpacket -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_sink_endofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_valid;                                // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_src_valid -> ARM_A9_HPS_h2f_lw_axi_master_agent:read_rp_valid
	wire  [132:0] arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_data;                                 // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_src_data -> ARM_A9_HPS_h2f_lw_axi_master_agent:read_rp_data
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_ready;                                // ARM_A9_HPS_h2f_lw_axi_master_agent:read_rp_ready -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_src_ready
	wire   [27:0] arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_channel;                              // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_src_channel -> ARM_A9_HPS_h2f_lw_axi_master_agent:read_rp_channel
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket;                        // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_src_startofpacket -> ARM_A9_HPS_h2f_lw_axi_master_agent:read_rp_startofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket;                          // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_src_endofpacket -> ARM_A9_HPS_h2f_lw_axi_master_agent:read_rp_endofpacket
	wire          router_004_src_valid;                                                                 // router_004:src_valid -> JTAG_to_FPGA_Bridge_master_limiter:cmd_sink_valid
	wire  [132:0] router_004_src_data;                                                                  // router_004:src_data -> JTAG_to_FPGA_Bridge_master_limiter:cmd_sink_data
	wire          router_004_src_ready;                                                                 // JTAG_to_FPGA_Bridge_master_limiter:cmd_sink_ready -> router_004:src_ready
	wire   [27:0] router_004_src_channel;                                                               // router_004:src_channel -> JTAG_to_FPGA_Bridge_master_limiter:cmd_sink_channel
	wire          router_004_src_startofpacket;                                                         // router_004:src_startofpacket -> JTAG_to_FPGA_Bridge_master_limiter:cmd_sink_startofpacket
	wire          router_004_src_endofpacket;                                                           // router_004:src_endofpacket -> JTAG_to_FPGA_Bridge_master_limiter:cmd_sink_endofpacket
	wire  [132:0] jtag_to_fpga_bridge_master_limiter_cmd_src_data;                                      // JTAG_to_FPGA_Bridge_master_limiter:cmd_src_data -> cmd_demux_004:sink_data
	wire          jtag_to_fpga_bridge_master_limiter_cmd_src_ready;                                     // cmd_demux_004:sink_ready -> JTAG_to_FPGA_Bridge_master_limiter:cmd_src_ready
	wire   [27:0] jtag_to_fpga_bridge_master_limiter_cmd_src_channel;                                   // JTAG_to_FPGA_Bridge_master_limiter:cmd_src_channel -> cmd_demux_004:sink_channel
	wire          jtag_to_fpga_bridge_master_limiter_cmd_src_startofpacket;                             // JTAG_to_FPGA_Bridge_master_limiter:cmd_src_startofpacket -> cmd_demux_004:sink_startofpacket
	wire          jtag_to_fpga_bridge_master_limiter_cmd_src_endofpacket;                               // JTAG_to_FPGA_Bridge_master_limiter:cmd_src_endofpacket -> cmd_demux_004:sink_endofpacket
	wire          rsp_mux_004_src_valid;                                                                // rsp_mux_004:src_valid -> JTAG_to_FPGA_Bridge_master_limiter:rsp_sink_valid
	wire  [132:0] rsp_mux_004_src_data;                                                                 // rsp_mux_004:src_data -> JTAG_to_FPGA_Bridge_master_limiter:rsp_sink_data
	wire          rsp_mux_004_src_ready;                                                                // JTAG_to_FPGA_Bridge_master_limiter:rsp_sink_ready -> rsp_mux_004:src_ready
	wire   [27:0] rsp_mux_004_src_channel;                                                              // rsp_mux_004:src_channel -> JTAG_to_FPGA_Bridge_master_limiter:rsp_sink_channel
	wire          rsp_mux_004_src_startofpacket;                                                        // rsp_mux_004:src_startofpacket -> JTAG_to_FPGA_Bridge_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_004_src_endofpacket;                                                          // rsp_mux_004:src_endofpacket -> JTAG_to_FPGA_Bridge_master_limiter:rsp_sink_endofpacket
	wire          jtag_to_fpga_bridge_master_limiter_rsp_src_valid;                                     // JTAG_to_FPGA_Bridge_master_limiter:rsp_src_valid -> JTAG_to_FPGA_Bridge_master_agent:rp_valid
	wire  [132:0] jtag_to_fpga_bridge_master_limiter_rsp_src_data;                                      // JTAG_to_FPGA_Bridge_master_limiter:rsp_src_data -> JTAG_to_FPGA_Bridge_master_agent:rp_data
	wire          jtag_to_fpga_bridge_master_limiter_rsp_src_ready;                                     // JTAG_to_FPGA_Bridge_master_agent:rp_ready -> JTAG_to_FPGA_Bridge_master_limiter:rsp_src_ready
	wire   [27:0] jtag_to_fpga_bridge_master_limiter_rsp_src_channel;                                   // JTAG_to_FPGA_Bridge_master_limiter:rsp_src_channel -> JTAG_to_FPGA_Bridge_master_agent:rp_channel
	wire          jtag_to_fpga_bridge_master_limiter_rsp_src_startofpacket;                             // JTAG_to_FPGA_Bridge_master_limiter:rsp_src_startofpacket -> JTAG_to_FPGA_Bridge_master_agent:rp_startofpacket
	wire          jtag_to_fpga_bridge_master_limiter_rsp_src_endofpacket;                               // JTAG_to_FPGA_Bridge_master_limiter:rsp_src_endofpacket -> JTAG_to_FPGA_Bridge_master_agent:rp_endofpacket
	wire          router_007_src_valid;                                                                 // router_007:src_valid -> ARM_A9_HPS_h2f_axi_master_wr_limiter:cmd_sink_valid
	wire  [168:0] router_007_src_data;                                                                  // router_007:src_data -> ARM_A9_HPS_h2f_axi_master_wr_limiter:cmd_sink_data
	wire          router_007_src_ready;                                                                 // ARM_A9_HPS_h2f_axi_master_wr_limiter:cmd_sink_ready -> router_007:src_ready
	wire   [27:0] router_007_src_channel;                                                               // router_007:src_channel -> ARM_A9_HPS_h2f_axi_master_wr_limiter:cmd_sink_channel
	wire          router_007_src_startofpacket;                                                         // router_007:src_startofpacket -> ARM_A9_HPS_h2f_axi_master_wr_limiter:cmd_sink_startofpacket
	wire          router_007_src_endofpacket;                                                           // router_007:src_endofpacket -> ARM_A9_HPS_h2f_axi_master_wr_limiter:cmd_sink_endofpacket
	wire          arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_valid;                                   // ARM_A9_HPS_h2f_axi_master_wr_limiter:rsp_src_valid -> ARM_A9_HPS_h2f_axi_master_agent:write_rp_valid
	wire  [168:0] arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_data;                                    // ARM_A9_HPS_h2f_axi_master_wr_limiter:rsp_src_data -> ARM_A9_HPS_h2f_axi_master_agent:write_rp_data
	wire          arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_ready;                                   // ARM_A9_HPS_h2f_axi_master_agent:write_rp_ready -> ARM_A9_HPS_h2f_axi_master_wr_limiter:rsp_src_ready
	wire   [27:0] arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_channel;                                 // ARM_A9_HPS_h2f_axi_master_wr_limiter:rsp_src_channel -> ARM_A9_HPS_h2f_axi_master_agent:write_rp_channel
	wire          arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_startofpacket;                           // ARM_A9_HPS_h2f_axi_master_wr_limiter:rsp_src_startofpacket -> ARM_A9_HPS_h2f_axi_master_agent:write_rp_startofpacket
	wire          arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_endofpacket;                             // ARM_A9_HPS_h2f_axi_master_wr_limiter:rsp_src_endofpacket -> ARM_A9_HPS_h2f_axi_master_agent:write_rp_endofpacket
	wire          router_008_src_valid;                                                                 // router_008:src_valid -> ARM_A9_HPS_h2f_axi_master_rd_limiter:cmd_sink_valid
	wire  [168:0] router_008_src_data;                                                                  // router_008:src_data -> ARM_A9_HPS_h2f_axi_master_rd_limiter:cmd_sink_data
	wire          router_008_src_ready;                                                                 // ARM_A9_HPS_h2f_axi_master_rd_limiter:cmd_sink_ready -> router_008:src_ready
	wire   [27:0] router_008_src_channel;                                                               // router_008:src_channel -> ARM_A9_HPS_h2f_axi_master_rd_limiter:cmd_sink_channel
	wire          router_008_src_startofpacket;                                                         // router_008:src_startofpacket -> ARM_A9_HPS_h2f_axi_master_rd_limiter:cmd_sink_startofpacket
	wire          router_008_src_endofpacket;                                                           // router_008:src_endofpacket -> ARM_A9_HPS_h2f_axi_master_rd_limiter:cmd_sink_endofpacket
	wire          arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_valid;                                   // ARM_A9_HPS_h2f_axi_master_rd_limiter:rsp_src_valid -> ARM_A9_HPS_h2f_axi_master_agent:read_rp_valid
	wire  [168:0] arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_data;                                    // ARM_A9_HPS_h2f_axi_master_rd_limiter:rsp_src_data -> ARM_A9_HPS_h2f_axi_master_agent:read_rp_data
	wire          arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_ready;                                   // ARM_A9_HPS_h2f_axi_master_agent:read_rp_ready -> ARM_A9_HPS_h2f_axi_master_rd_limiter:rsp_src_ready
	wire   [27:0] arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_channel;                                 // ARM_A9_HPS_h2f_axi_master_rd_limiter:rsp_src_channel -> ARM_A9_HPS_h2f_axi_master_agent:read_rp_channel
	wire          arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_startofpacket;                           // ARM_A9_HPS_h2f_axi_master_rd_limiter:rsp_src_startofpacket -> ARM_A9_HPS_h2f_axi_master_agent:read_rp_startofpacket
	wire          arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_endofpacket;                             // ARM_A9_HPS_h2f_axi_master_rd_limiter:rsp_src_endofpacket -> ARM_A9_HPS_h2f_axi_master_agent:read_rp_endofpacket
	wire          cmd_mux_src_valid;                                                                    // cmd_mux:src_valid -> ADC_adc_slave_burst_adapter:sink0_valid
	wire  [132:0] cmd_mux_src_data;                                                                     // cmd_mux:src_data -> ADC_adc_slave_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                                    // ADC_adc_slave_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire   [27:0] cmd_mux_src_channel;                                                                  // cmd_mux:src_channel -> ADC_adc_slave_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                                            // cmd_mux:src_startofpacket -> ADC_adc_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                                              // cmd_mux:src_endofpacket -> ADC_adc_slave_burst_adapter:sink0_endofpacket
	wire          adc_adc_slave_burst_adapter_source0_valid;                                            // ADC_adc_slave_burst_adapter:source0_valid -> ADC_adc_slave_agent:cp_valid
	wire  [132:0] adc_adc_slave_burst_adapter_source0_data;                                             // ADC_adc_slave_burst_adapter:source0_data -> ADC_adc_slave_agent:cp_data
	wire          adc_adc_slave_burst_adapter_source0_ready;                                            // ADC_adc_slave_agent:cp_ready -> ADC_adc_slave_burst_adapter:source0_ready
	wire   [27:0] adc_adc_slave_burst_adapter_source0_channel;                                          // ADC_adc_slave_burst_adapter:source0_channel -> ADC_adc_slave_agent:cp_channel
	wire          adc_adc_slave_burst_adapter_source0_startofpacket;                                    // ADC_adc_slave_burst_adapter:source0_startofpacket -> ADC_adc_slave_agent:cp_startofpacket
	wire          adc_adc_slave_burst_adapter_source0_endofpacket;                                      // ADC_adc_slave_burst_adapter:source0_endofpacket -> ADC_adc_slave_agent:cp_endofpacket
	wire          cmd_mux_001_src_valid;                                                                // cmd_mux_001:src_valid -> SysID_control_slave_burst_adapter:sink0_valid
	wire  [132:0] cmd_mux_001_src_data;                                                                 // cmd_mux_001:src_data -> SysID_control_slave_burst_adapter:sink0_data
	wire          cmd_mux_001_src_ready;                                                                // SysID_control_slave_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire   [27:0] cmd_mux_001_src_channel;                                                              // cmd_mux_001:src_channel -> SysID_control_slave_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_startofpacket;                                                        // cmd_mux_001:src_startofpacket -> SysID_control_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                          // cmd_mux_001:src_endofpacket -> SysID_control_slave_burst_adapter:sink0_endofpacket
	wire          sysid_control_slave_burst_adapter_source0_valid;                                      // SysID_control_slave_burst_adapter:source0_valid -> SysID_control_slave_agent:cp_valid
	wire  [132:0] sysid_control_slave_burst_adapter_source0_data;                                       // SysID_control_slave_burst_adapter:source0_data -> SysID_control_slave_agent:cp_data
	wire          sysid_control_slave_burst_adapter_source0_ready;                                      // SysID_control_slave_agent:cp_ready -> SysID_control_slave_burst_adapter:source0_ready
	wire   [27:0] sysid_control_slave_burst_adapter_source0_channel;                                    // SysID_control_slave_burst_adapter:source0_channel -> SysID_control_slave_agent:cp_channel
	wire          sysid_control_slave_burst_adapter_source0_startofpacket;                              // SysID_control_slave_burst_adapter:source0_startofpacket -> SysID_control_slave_agent:cp_startofpacket
	wire          sysid_control_slave_burst_adapter_source0_endofpacket;                                // SysID_control_slave_burst_adapter:source0_endofpacket -> SysID_control_slave_agent:cp_endofpacket
	wire          cmd_mux_002_src_valid;                                                                // cmd_mux_002:src_valid -> LEDs_s1_burst_adapter:sink0_valid
	wire  [132:0] cmd_mux_002_src_data;                                                                 // cmd_mux_002:src_data -> LEDs_s1_burst_adapter:sink0_data
	wire          cmd_mux_002_src_ready;                                                                // LEDs_s1_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire   [27:0] cmd_mux_002_src_channel;                                                              // cmd_mux_002:src_channel -> LEDs_s1_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_startofpacket;                                                        // cmd_mux_002:src_startofpacket -> LEDs_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                          // cmd_mux_002:src_endofpacket -> LEDs_s1_burst_adapter:sink0_endofpacket
	wire          leds_s1_burst_adapter_source0_valid;                                                  // LEDs_s1_burst_adapter:source0_valid -> LEDs_s1_agent:cp_valid
	wire  [132:0] leds_s1_burst_adapter_source0_data;                                                   // LEDs_s1_burst_adapter:source0_data -> LEDs_s1_agent:cp_data
	wire          leds_s1_burst_adapter_source0_ready;                                                  // LEDs_s1_agent:cp_ready -> LEDs_s1_burst_adapter:source0_ready
	wire   [27:0] leds_s1_burst_adapter_source0_channel;                                                // LEDs_s1_burst_adapter:source0_channel -> LEDs_s1_agent:cp_channel
	wire          leds_s1_burst_adapter_source0_startofpacket;                                          // LEDs_s1_burst_adapter:source0_startofpacket -> LEDs_s1_agent:cp_startofpacket
	wire          leds_s1_burst_adapter_source0_endofpacket;                                            // LEDs_s1_burst_adapter:source0_endofpacket -> LEDs_s1_agent:cp_endofpacket
	wire          cmd_mux_003_src_valid;                                                                // cmd_mux_003:src_valid -> Slider_Switches_s1_burst_adapter:sink0_valid
	wire  [132:0] cmd_mux_003_src_data;                                                                 // cmd_mux_003:src_data -> Slider_Switches_s1_burst_adapter:sink0_data
	wire          cmd_mux_003_src_ready;                                                                // Slider_Switches_s1_burst_adapter:sink0_ready -> cmd_mux_003:src_ready
	wire   [27:0] cmd_mux_003_src_channel;                                                              // cmd_mux_003:src_channel -> Slider_Switches_s1_burst_adapter:sink0_channel
	wire          cmd_mux_003_src_startofpacket;                                                        // cmd_mux_003:src_startofpacket -> Slider_Switches_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                          // cmd_mux_003:src_endofpacket -> Slider_Switches_s1_burst_adapter:sink0_endofpacket
	wire          slider_switches_s1_burst_adapter_source0_valid;                                       // Slider_Switches_s1_burst_adapter:source0_valid -> Slider_Switches_s1_agent:cp_valid
	wire  [132:0] slider_switches_s1_burst_adapter_source0_data;                                        // Slider_Switches_s1_burst_adapter:source0_data -> Slider_Switches_s1_agent:cp_data
	wire          slider_switches_s1_burst_adapter_source0_ready;                                       // Slider_Switches_s1_agent:cp_ready -> Slider_Switches_s1_burst_adapter:source0_ready
	wire   [27:0] slider_switches_s1_burst_adapter_source0_channel;                                     // Slider_Switches_s1_burst_adapter:source0_channel -> Slider_Switches_s1_agent:cp_channel
	wire          slider_switches_s1_burst_adapter_source0_startofpacket;                               // Slider_Switches_s1_burst_adapter:source0_startofpacket -> Slider_Switches_s1_agent:cp_startofpacket
	wire          slider_switches_s1_burst_adapter_source0_endofpacket;                                 // Slider_Switches_s1_burst_adapter:source0_endofpacket -> Slider_Switches_s1_agent:cp_endofpacket
	wire          cmd_mux_004_src_valid;                                                                // cmd_mux_004:src_valid -> Pushbuttons_s1_burst_adapter:sink0_valid
	wire  [132:0] cmd_mux_004_src_data;                                                                 // cmd_mux_004:src_data -> Pushbuttons_s1_burst_adapter:sink0_data
	wire          cmd_mux_004_src_ready;                                                                // Pushbuttons_s1_burst_adapter:sink0_ready -> cmd_mux_004:src_ready
	wire   [27:0] cmd_mux_004_src_channel;                                                              // cmd_mux_004:src_channel -> Pushbuttons_s1_burst_adapter:sink0_channel
	wire          cmd_mux_004_src_startofpacket;                                                        // cmd_mux_004:src_startofpacket -> Pushbuttons_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                          // cmd_mux_004:src_endofpacket -> Pushbuttons_s1_burst_adapter:sink0_endofpacket
	wire          pushbuttons_s1_burst_adapter_source0_valid;                                           // Pushbuttons_s1_burst_adapter:source0_valid -> Pushbuttons_s1_agent:cp_valid
	wire  [132:0] pushbuttons_s1_burst_adapter_source0_data;                                            // Pushbuttons_s1_burst_adapter:source0_data -> Pushbuttons_s1_agent:cp_data
	wire          pushbuttons_s1_burst_adapter_source0_ready;                                           // Pushbuttons_s1_agent:cp_ready -> Pushbuttons_s1_burst_adapter:source0_ready
	wire   [27:0] pushbuttons_s1_burst_adapter_source0_channel;                                         // Pushbuttons_s1_burst_adapter:source0_channel -> Pushbuttons_s1_agent:cp_channel
	wire          pushbuttons_s1_burst_adapter_source0_startofpacket;                                   // Pushbuttons_s1_burst_adapter:source0_startofpacket -> Pushbuttons_s1_agent:cp_startofpacket
	wire          pushbuttons_s1_burst_adapter_source0_endofpacket;                                     // Pushbuttons_s1_burst_adapter:source0_endofpacket -> Pushbuttons_s1_agent:cp_endofpacket
	wire          cmd_mux_005_src_valid;                                                                // cmd_mux_005:src_valid -> Expansion_JP1_s1_burst_adapter:sink0_valid
	wire  [132:0] cmd_mux_005_src_data;                                                                 // cmd_mux_005:src_data -> Expansion_JP1_s1_burst_adapter:sink0_data
	wire          cmd_mux_005_src_ready;                                                                // Expansion_JP1_s1_burst_adapter:sink0_ready -> cmd_mux_005:src_ready
	wire   [27:0] cmd_mux_005_src_channel;                                                              // cmd_mux_005:src_channel -> Expansion_JP1_s1_burst_adapter:sink0_channel
	wire          cmd_mux_005_src_startofpacket;                                                        // cmd_mux_005:src_startofpacket -> Expansion_JP1_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                          // cmd_mux_005:src_endofpacket -> Expansion_JP1_s1_burst_adapter:sink0_endofpacket
	wire          expansion_jp1_s1_burst_adapter_source0_valid;                                         // Expansion_JP1_s1_burst_adapter:source0_valid -> Expansion_JP1_s1_agent:cp_valid
	wire  [132:0] expansion_jp1_s1_burst_adapter_source0_data;                                          // Expansion_JP1_s1_burst_adapter:source0_data -> Expansion_JP1_s1_agent:cp_data
	wire          expansion_jp1_s1_burst_adapter_source0_ready;                                         // Expansion_JP1_s1_agent:cp_ready -> Expansion_JP1_s1_burst_adapter:source0_ready
	wire   [27:0] expansion_jp1_s1_burst_adapter_source0_channel;                                       // Expansion_JP1_s1_burst_adapter:source0_channel -> Expansion_JP1_s1_agent:cp_channel
	wire          expansion_jp1_s1_burst_adapter_source0_startofpacket;                                 // Expansion_JP1_s1_burst_adapter:source0_startofpacket -> Expansion_JP1_s1_agent:cp_startofpacket
	wire          expansion_jp1_s1_burst_adapter_source0_endofpacket;                                   // Expansion_JP1_s1_burst_adapter:source0_endofpacket -> Expansion_JP1_s1_agent:cp_endofpacket
	wire          cmd_mux_006_src_valid;                                                                // cmd_mux_006:src_valid -> Expansion_JP7_s1_burst_adapter:sink0_valid
	wire  [132:0] cmd_mux_006_src_data;                                                                 // cmd_mux_006:src_data -> Expansion_JP7_s1_burst_adapter:sink0_data
	wire          cmd_mux_006_src_ready;                                                                // Expansion_JP7_s1_burst_adapter:sink0_ready -> cmd_mux_006:src_ready
	wire   [27:0] cmd_mux_006_src_channel;                                                              // cmd_mux_006:src_channel -> Expansion_JP7_s1_burst_adapter:sink0_channel
	wire          cmd_mux_006_src_startofpacket;                                                        // cmd_mux_006:src_startofpacket -> Expansion_JP7_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                          // cmd_mux_006:src_endofpacket -> Expansion_JP7_s1_burst_adapter:sink0_endofpacket
	wire          expansion_jp7_s1_burst_adapter_source0_valid;                                         // Expansion_JP7_s1_burst_adapter:source0_valid -> Expansion_JP7_s1_agent:cp_valid
	wire  [132:0] expansion_jp7_s1_burst_adapter_source0_data;                                          // Expansion_JP7_s1_burst_adapter:source0_data -> Expansion_JP7_s1_agent:cp_data
	wire          expansion_jp7_s1_burst_adapter_source0_ready;                                         // Expansion_JP7_s1_agent:cp_ready -> Expansion_JP7_s1_burst_adapter:source0_ready
	wire   [27:0] expansion_jp7_s1_burst_adapter_source0_channel;                                       // Expansion_JP7_s1_burst_adapter:source0_channel -> Expansion_JP7_s1_agent:cp_channel
	wire          expansion_jp7_s1_burst_adapter_source0_startofpacket;                                 // Expansion_JP7_s1_burst_adapter:source0_startofpacket -> Expansion_JP7_s1_agent:cp_startofpacket
	wire          expansion_jp7_s1_burst_adapter_source0_endofpacket;                                   // Expansion_JP7_s1_burst_adapter:source0_endofpacket -> Expansion_JP7_s1_agent:cp_endofpacket
	wire          cmd_mux_007_src_valid;                                                                // cmd_mux_007:src_valid -> Arduino_GPIO_s1_burst_adapter:sink0_valid
	wire  [132:0] cmd_mux_007_src_data;                                                                 // cmd_mux_007:src_data -> Arduino_GPIO_s1_burst_adapter:sink0_data
	wire          cmd_mux_007_src_ready;                                                                // Arduino_GPIO_s1_burst_adapter:sink0_ready -> cmd_mux_007:src_ready
	wire   [27:0] cmd_mux_007_src_channel;                                                              // cmd_mux_007:src_channel -> Arduino_GPIO_s1_burst_adapter:sink0_channel
	wire          cmd_mux_007_src_startofpacket;                                                        // cmd_mux_007:src_startofpacket -> Arduino_GPIO_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                          // cmd_mux_007:src_endofpacket -> Arduino_GPIO_s1_burst_adapter:sink0_endofpacket
	wire          arduino_gpio_s1_burst_adapter_source0_valid;                                          // Arduino_GPIO_s1_burst_adapter:source0_valid -> Arduino_GPIO_s1_agent:cp_valid
	wire  [132:0] arduino_gpio_s1_burst_adapter_source0_data;                                           // Arduino_GPIO_s1_burst_adapter:source0_data -> Arduino_GPIO_s1_agent:cp_data
	wire          arduino_gpio_s1_burst_adapter_source0_ready;                                          // Arduino_GPIO_s1_agent:cp_ready -> Arduino_GPIO_s1_burst_adapter:source0_ready
	wire   [27:0] arduino_gpio_s1_burst_adapter_source0_channel;                                        // Arduino_GPIO_s1_burst_adapter:source0_channel -> Arduino_GPIO_s1_agent:cp_channel
	wire          arduino_gpio_s1_burst_adapter_source0_startofpacket;                                  // Arduino_GPIO_s1_burst_adapter:source0_startofpacket -> Arduino_GPIO_s1_agent:cp_startofpacket
	wire          arduino_gpio_s1_burst_adapter_source0_endofpacket;                                    // Arduino_GPIO_s1_burst_adapter:source0_endofpacket -> Arduino_GPIO_s1_agent:cp_endofpacket
	wire          cmd_mux_008_src_valid;                                                                // cmd_mux_008:src_valid -> Arduino_Reset_N_s1_burst_adapter:sink0_valid
	wire  [132:0] cmd_mux_008_src_data;                                                                 // cmd_mux_008:src_data -> Arduino_Reset_N_s1_burst_adapter:sink0_data
	wire          cmd_mux_008_src_ready;                                                                // Arduino_Reset_N_s1_burst_adapter:sink0_ready -> cmd_mux_008:src_ready
	wire   [27:0] cmd_mux_008_src_channel;                                                              // cmd_mux_008:src_channel -> Arduino_Reset_N_s1_burst_adapter:sink0_channel
	wire          cmd_mux_008_src_startofpacket;                                                        // cmd_mux_008:src_startofpacket -> Arduino_Reset_N_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                          // cmd_mux_008:src_endofpacket -> Arduino_Reset_N_s1_burst_adapter:sink0_endofpacket
	wire          arduino_reset_n_s1_burst_adapter_source0_valid;                                       // Arduino_Reset_N_s1_burst_adapter:source0_valid -> Arduino_Reset_N_s1_agent:cp_valid
	wire  [132:0] arduino_reset_n_s1_burst_adapter_source0_data;                                        // Arduino_Reset_N_s1_burst_adapter:source0_data -> Arduino_Reset_N_s1_agent:cp_data
	wire          arduino_reset_n_s1_burst_adapter_source0_ready;                                       // Arduino_Reset_N_s1_agent:cp_ready -> Arduino_Reset_N_s1_burst_adapter:source0_ready
	wire   [27:0] arduino_reset_n_s1_burst_adapter_source0_channel;                                     // Arduino_Reset_N_s1_burst_adapter:source0_channel -> Arduino_Reset_N_s1_agent:cp_channel
	wire          arduino_reset_n_s1_burst_adapter_source0_startofpacket;                               // Arduino_Reset_N_s1_burst_adapter:source0_startofpacket -> Arduino_Reset_N_s1_agent:cp_startofpacket
	wire          arduino_reset_n_s1_burst_adapter_source0_endofpacket;                                 // Arduino_Reset_N_s1_burst_adapter:source0_endofpacket -> Arduino_Reset_N_s1_agent:cp_endofpacket
	wire          cmd_mux_009_src_valid;                                                                // cmd_mux_009:src_valid -> Interval_Timer_s1_burst_adapter:sink0_valid
	wire  [132:0] cmd_mux_009_src_data;                                                                 // cmd_mux_009:src_data -> Interval_Timer_s1_burst_adapter:sink0_data
	wire          cmd_mux_009_src_ready;                                                                // Interval_Timer_s1_burst_adapter:sink0_ready -> cmd_mux_009:src_ready
	wire   [27:0] cmd_mux_009_src_channel;                                                              // cmd_mux_009:src_channel -> Interval_Timer_s1_burst_adapter:sink0_channel
	wire          cmd_mux_009_src_startofpacket;                                                        // cmd_mux_009:src_startofpacket -> Interval_Timer_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                          // cmd_mux_009:src_endofpacket -> Interval_Timer_s1_burst_adapter:sink0_endofpacket
	wire          interval_timer_s1_burst_adapter_source0_valid;                                        // Interval_Timer_s1_burst_adapter:source0_valid -> Interval_Timer_s1_agent:cp_valid
	wire  [132:0] interval_timer_s1_burst_adapter_source0_data;                                         // Interval_Timer_s1_burst_adapter:source0_data -> Interval_Timer_s1_agent:cp_data
	wire          interval_timer_s1_burst_adapter_source0_ready;                                        // Interval_Timer_s1_agent:cp_ready -> Interval_Timer_s1_burst_adapter:source0_ready
	wire   [27:0] interval_timer_s1_burst_adapter_source0_channel;                                      // Interval_Timer_s1_burst_adapter:source0_channel -> Interval_Timer_s1_agent:cp_channel
	wire          interval_timer_s1_burst_adapter_source0_startofpacket;                                // Interval_Timer_s1_burst_adapter:source0_startofpacket -> Interval_Timer_s1_agent:cp_startofpacket
	wire          interval_timer_s1_burst_adapter_source0_endofpacket;                                  // Interval_Timer_s1_burst_adapter:source0_endofpacket -> Interval_Timer_s1_agent:cp_endofpacket
	wire          cmd_mux_010_src_valid;                                                                // cmd_mux_010:src_valid -> Interval_Timer_2_s1_burst_adapter:sink0_valid
	wire  [132:0] cmd_mux_010_src_data;                                                                 // cmd_mux_010:src_data -> Interval_Timer_2_s1_burst_adapter:sink0_data
	wire          cmd_mux_010_src_ready;                                                                // Interval_Timer_2_s1_burst_adapter:sink0_ready -> cmd_mux_010:src_ready
	wire   [27:0] cmd_mux_010_src_channel;                                                              // cmd_mux_010:src_channel -> Interval_Timer_2_s1_burst_adapter:sink0_channel
	wire          cmd_mux_010_src_startofpacket;                                                        // cmd_mux_010:src_startofpacket -> Interval_Timer_2_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                          // cmd_mux_010:src_endofpacket -> Interval_Timer_2_s1_burst_adapter:sink0_endofpacket
	wire          interval_timer_2_s1_burst_adapter_source0_valid;                                      // Interval_Timer_2_s1_burst_adapter:source0_valid -> Interval_Timer_2_s1_agent:cp_valid
	wire  [132:0] interval_timer_2_s1_burst_adapter_source0_data;                                       // Interval_Timer_2_s1_burst_adapter:source0_data -> Interval_Timer_2_s1_agent:cp_data
	wire          interval_timer_2_s1_burst_adapter_source0_ready;                                      // Interval_Timer_2_s1_agent:cp_ready -> Interval_Timer_2_s1_burst_adapter:source0_ready
	wire   [27:0] interval_timer_2_s1_burst_adapter_source0_channel;                                    // Interval_Timer_2_s1_burst_adapter:source0_channel -> Interval_Timer_2_s1_agent:cp_channel
	wire          interval_timer_2_s1_burst_adapter_source0_startofpacket;                              // Interval_Timer_2_s1_burst_adapter:source0_startofpacket -> Interval_Timer_2_s1_agent:cp_startofpacket
	wire          interval_timer_2_s1_burst_adapter_source0_endofpacket;                                // Interval_Timer_2_s1_burst_adapter:source0_endofpacket -> Interval_Timer_2_s1_agent:cp_endofpacket
	wire          cmd_mux_011_src_valid;                                                                // cmd_mux_011:src_valid -> JTAG_UART_for_ARM_0_avalon_jtag_slave_burst_adapter:sink0_valid
	wire  [132:0] cmd_mux_011_src_data;                                                                 // cmd_mux_011:src_data -> JTAG_UART_for_ARM_0_avalon_jtag_slave_burst_adapter:sink0_data
	wire          cmd_mux_011_src_ready;                                                                // JTAG_UART_for_ARM_0_avalon_jtag_slave_burst_adapter:sink0_ready -> cmd_mux_011:src_ready
	wire   [27:0] cmd_mux_011_src_channel;                                                              // cmd_mux_011:src_channel -> JTAG_UART_for_ARM_0_avalon_jtag_slave_burst_adapter:sink0_channel
	wire          cmd_mux_011_src_startofpacket;                                                        // cmd_mux_011:src_startofpacket -> JTAG_UART_for_ARM_0_avalon_jtag_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                                          // cmd_mux_011:src_endofpacket -> JTAG_UART_for_ARM_0_avalon_jtag_slave_burst_adapter:sink0_endofpacket
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_valid;                    // JTAG_UART_for_ARM_0_avalon_jtag_slave_burst_adapter:source0_valid -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:cp_valid
	wire  [132:0] jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_data;                     // JTAG_UART_for_ARM_0_avalon_jtag_slave_burst_adapter:source0_data -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:cp_data
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_ready;                    // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:cp_ready -> JTAG_UART_for_ARM_0_avalon_jtag_slave_burst_adapter:source0_ready
	wire   [27:0] jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_channel;                  // JTAG_UART_for_ARM_0_avalon_jtag_slave_burst_adapter:source0_channel -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:cp_channel
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_startofpacket;            // JTAG_UART_for_ARM_0_avalon_jtag_slave_burst_adapter:source0_startofpacket -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:cp_startofpacket
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_endofpacket;              // JTAG_UART_for_ARM_0_avalon_jtag_slave_burst_adapter:source0_endofpacket -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:cp_endofpacket
	wire          cmd_mux_012_src_valid;                                                                // cmd_mux_012:src_valid -> JTAG_UART_for_ARM_1_avalon_jtag_slave_burst_adapter:sink0_valid
	wire  [132:0] cmd_mux_012_src_data;                                                                 // cmd_mux_012:src_data -> JTAG_UART_for_ARM_1_avalon_jtag_slave_burst_adapter:sink0_data
	wire          cmd_mux_012_src_ready;                                                                // JTAG_UART_for_ARM_1_avalon_jtag_slave_burst_adapter:sink0_ready -> cmd_mux_012:src_ready
	wire   [27:0] cmd_mux_012_src_channel;                                                              // cmd_mux_012:src_channel -> JTAG_UART_for_ARM_1_avalon_jtag_slave_burst_adapter:sink0_channel
	wire          cmd_mux_012_src_startofpacket;                                                        // cmd_mux_012:src_startofpacket -> JTAG_UART_for_ARM_1_avalon_jtag_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                                          // cmd_mux_012:src_endofpacket -> JTAG_UART_for_ARM_1_avalon_jtag_slave_burst_adapter:sink0_endofpacket
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_valid;                    // JTAG_UART_for_ARM_1_avalon_jtag_slave_burst_adapter:source0_valid -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:cp_valid
	wire  [132:0] jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_data;                     // JTAG_UART_for_ARM_1_avalon_jtag_slave_burst_adapter:source0_data -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:cp_data
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_ready;                    // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:cp_ready -> JTAG_UART_for_ARM_1_avalon_jtag_slave_burst_adapter:source0_ready
	wire   [27:0] jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_channel;                  // JTAG_UART_for_ARM_1_avalon_jtag_slave_burst_adapter:source0_channel -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:cp_channel
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_startofpacket;            // JTAG_UART_for_ARM_1_avalon_jtag_slave_burst_adapter:source0_startofpacket -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:cp_startofpacket
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_endofpacket;              // JTAG_UART_for_ARM_1_avalon_jtag_slave_burst_adapter:source0_endofpacket -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:cp_endofpacket
	wire          cmd_mux_014_src_valid;                                                                // cmd_mux_014:src_valid -> Nios2_SRAM_s1_burst_adapter:sink0_valid
	wire  [132:0] cmd_mux_014_src_data;                                                                 // cmd_mux_014:src_data -> Nios2_SRAM_s1_burst_adapter:sink0_data
	wire          cmd_mux_014_src_ready;                                                                // Nios2_SRAM_s1_burst_adapter:sink0_ready -> cmd_mux_014:src_ready
	wire   [27:0] cmd_mux_014_src_channel;                                                              // cmd_mux_014:src_channel -> Nios2_SRAM_s1_burst_adapter:sink0_channel
	wire          cmd_mux_014_src_startofpacket;                                                        // cmd_mux_014:src_startofpacket -> Nios2_SRAM_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_014_src_endofpacket;                                                          // cmd_mux_014:src_endofpacket -> Nios2_SRAM_s1_burst_adapter:sink0_endofpacket
	wire          nios2_sram_s1_burst_adapter_source0_valid;                                            // Nios2_SRAM_s1_burst_adapter:source0_valid -> Nios2_SRAM_s1_agent:cp_valid
	wire  [132:0] nios2_sram_s1_burst_adapter_source0_data;                                             // Nios2_SRAM_s1_burst_adapter:source0_data -> Nios2_SRAM_s1_agent:cp_data
	wire          nios2_sram_s1_burst_adapter_source0_ready;                                            // Nios2_SRAM_s1_agent:cp_ready -> Nios2_SRAM_s1_burst_adapter:source0_ready
	wire   [27:0] nios2_sram_s1_burst_adapter_source0_channel;                                          // Nios2_SRAM_s1_burst_adapter:source0_channel -> Nios2_SRAM_s1_agent:cp_channel
	wire          nios2_sram_s1_burst_adapter_source0_startofpacket;                                    // Nios2_SRAM_s1_burst_adapter:source0_startofpacket -> Nios2_SRAM_s1_agent:cp_startofpacket
	wire          nios2_sram_s1_burst_adapter_source0_endofpacket;                                      // Nios2_SRAM_s1_burst_adapter:source0_endofpacket -> Nios2_SRAM_s1_agent:cp_endofpacket
	wire          cmd_mux_015_src_valid;                                                                // cmd_mux_015:src_valid -> Nios2_2nd_Core_SRAM_s1_burst_adapter:sink0_valid
	wire  [132:0] cmd_mux_015_src_data;                                                                 // cmd_mux_015:src_data -> Nios2_2nd_Core_SRAM_s1_burst_adapter:sink0_data
	wire          cmd_mux_015_src_ready;                                                                // Nios2_2nd_Core_SRAM_s1_burst_adapter:sink0_ready -> cmd_mux_015:src_ready
	wire   [27:0] cmd_mux_015_src_channel;                                                              // cmd_mux_015:src_channel -> Nios2_2nd_Core_SRAM_s1_burst_adapter:sink0_channel
	wire          cmd_mux_015_src_startofpacket;                                                        // cmd_mux_015:src_startofpacket -> Nios2_2nd_Core_SRAM_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_015_src_endofpacket;                                                          // cmd_mux_015:src_endofpacket -> Nios2_2nd_Core_SRAM_s1_burst_adapter:sink0_endofpacket
	wire          nios2_2nd_core_sram_s1_burst_adapter_source0_valid;                                   // Nios2_2nd_Core_SRAM_s1_burst_adapter:source0_valid -> Nios2_2nd_Core_SRAM_s1_agent:cp_valid
	wire  [132:0] nios2_2nd_core_sram_s1_burst_adapter_source0_data;                                    // Nios2_2nd_Core_SRAM_s1_burst_adapter:source0_data -> Nios2_2nd_Core_SRAM_s1_agent:cp_data
	wire          nios2_2nd_core_sram_s1_burst_adapter_source0_ready;                                   // Nios2_2nd_Core_SRAM_s1_agent:cp_ready -> Nios2_2nd_Core_SRAM_s1_burst_adapter:source0_ready
	wire   [27:0] nios2_2nd_core_sram_s1_burst_adapter_source0_channel;                                 // Nios2_2nd_Core_SRAM_s1_burst_adapter:source0_channel -> Nios2_2nd_Core_SRAM_s1_agent:cp_channel
	wire          nios2_2nd_core_sram_s1_burst_adapter_source0_startofpacket;                           // Nios2_2nd_Core_SRAM_s1_burst_adapter:source0_startofpacket -> Nios2_2nd_Core_SRAM_s1_agent:cp_startofpacket
	wire          nios2_2nd_core_sram_s1_burst_adapter_source0_endofpacket;                             // Nios2_2nd_Core_SRAM_s1_burst_adapter:source0_endofpacket -> Nios2_2nd_Core_SRAM_s1_agent:cp_endofpacket
	wire          cmd_mux_016_src_valid;                                                                // cmd_mux_016:src_valid -> Onchip_SRAM_s1_burst_adapter:sink0_valid
	wire  [132:0] cmd_mux_016_src_data;                                                                 // cmd_mux_016:src_data -> Onchip_SRAM_s1_burst_adapter:sink0_data
	wire          cmd_mux_016_src_ready;                                                                // Onchip_SRAM_s1_burst_adapter:sink0_ready -> cmd_mux_016:src_ready
	wire   [27:0] cmd_mux_016_src_channel;                                                              // cmd_mux_016:src_channel -> Onchip_SRAM_s1_burst_adapter:sink0_channel
	wire          cmd_mux_016_src_startofpacket;                                                        // cmd_mux_016:src_startofpacket -> Onchip_SRAM_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_016_src_endofpacket;                                                          // cmd_mux_016:src_endofpacket -> Onchip_SRAM_s1_burst_adapter:sink0_endofpacket
	wire          onchip_sram_s1_burst_adapter_source0_valid;                                           // Onchip_SRAM_s1_burst_adapter:source0_valid -> Onchip_SRAM_s1_agent:cp_valid
	wire  [132:0] onchip_sram_s1_burst_adapter_source0_data;                                            // Onchip_SRAM_s1_burst_adapter:source0_data -> Onchip_SRAM_s1_agent:cp_data
	wire          onchip_sram_s1_burst_adapter_source0_ready;                                           // Onchip_SRAM_s1_agent:cp_ready -> Onchip_SRAM_s1_burst_adapter:source0_ready
	wire   [27:0] onchip_sram_s1_burst_adapter_source0_channel;                                         // Onchip_SRAM_s1_burst_adapter:source0_channel -> Onchip_SRAM_s1_agent:cp_channel
	wire          onchip_sram_s1_burst_adapter_source0_startofpacket;                                   // Onchip_SRAM_s1_burst_adapter:source0_startofpacket -> Onchip_SRAM_s1_agent:cp_startofpacket
	wire          onchip_sram_s1_burst_adapter_source0_endofpacket;                                     // Onchip_SRAM_s1_burst_adapter:source0_endofpacket -> Onchip_SRAM_s1_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                                 // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [132:0] cmd_demux_src0_data;                                                                  // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                                 // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [27:0] cmd_demux_src0_channel;                                                               // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                         // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                           // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                                 // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [132:0] cmd_demux_src1_data;                                                                  // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                                 // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [27:0] cmd_demux_src1_channel;                                                               // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                         // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                           // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                                 // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [132:0] cmd_demux_src2_data;                                                                  // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                                 // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [27:0] cmd_demux_src2_channel;                                                               // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                                         // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                           // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                                 // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [132:0] cmd_demux_src3_data;                                                                  // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                                 // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [27:0] cmd_demux_src3_channel;                                                               // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                                         // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                           // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                                 // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [132:0] cmd_demux_src4_data;                                                                  // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                                                 // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire   [27:0] cmd_demux_src4_channel;                                                               // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                                         // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                           // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                                 // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [132:0] cmd_demux_src5_data;                                                                  // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                                                 // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire   [27:0] cmd_demux_src5_channel;                                                               // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                                         // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                           // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                                 // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [132:0] cmd_demux_src6_data;                                                                  // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_src6_ready;                                                                 // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire   [27:0] cmd_demux_src6_channel;                                                               // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_startofpacket;                                                         // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                           // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                                 // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [132:0] cmd_demux_src7_data;                                                                  // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_src7_ready;                                                                 // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire   [27:0] cmd_demux_src7_channel;                                                               // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src7_startofpacket;                                                         // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                           // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                                 // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [132:0] cmd_demux_src8_data;                                                                  // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_src8_ready;                                                                 // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire   [27:0] cmd_demux_src8_channel;                                                               // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_src8_startofpacket;                                                         // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_src8_endofpacket;                                                           // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_src9_valid;                                                                 // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire  [132:0] cmd_demux_src9_data;                                                                  // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_src9_ready;                                                                 // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire   [27:0] cmd_demux_src9_channel;                                                               // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_src9_startofpacket;                                                         // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_src9_endofpacket;                                                           // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_src10_valid;                                                                // cmd_demux:src10_valid -> cmd_mux_010:sink0_valid
	wire  [132:0] cmd_demux_src10_data;                                                                 // cmd_demux:src10_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_src10_ready;                                                                // cmd_mux_010:sink0_ready -> cmd_demux:src10_ready
	wire   [27:0] cmd_demux_src10_channel;                                                              // cmd_demux:src10_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_src10_startofpacket;                                                        // cmd_demux:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_src10_endofpacket;                                                          // cmd_demux:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_src11_valid;                                                                // cmd_demux:src11_valid -> cmd_mux_011:sink0_valid
	wire  [132:0] cmd_demux_src11_data;                                                                 // cmd_demux:src11_data -> cmd_mux_011:sink0_data
	wire          cmd_demux_src11_ready;                                                                // cmd_mux_011:sink0_ready -> cmd_demux:src11_ready
	wire   [27:0] cmd_demux_src11_channel;                                                              // cmd_demux:src11_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_src11_startofpacket;                                                        // cmd_demux:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          cmd_demux_src11_endofpacket;                                                          // cmd_demux:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_src12_valid;                                                                // cmd_demux:src12_valid -> cmd_mux_012:sink0_valid
	wire  [132:0] cmd_demux_src12_data;                                                                 // cmd_demux:src12_data -> cmd_mux_012:sink0_data
	wire          cmd_demux_src12_ready;                                                                // cmd_mux_012:sink0_ready -> cmd_demux:src12_ready
	wire   [27:0] cmd_demux_src12_channel;                                                              // cmd_demux:src12_channel -> cmd_mux_012:sink0_channel
	wire          cmd_demux_src12_startofpacket;                                                        // cmd_demux:src12_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          cmd_demux_src12_endofpacket;                                                          // cmd_demux:src12_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                             // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [132:0] cmd_demux_001_src0_data;                                                              // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                                             // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire   [27:0] cmd_demux_001_src0_channel;                                                           // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                                     // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                       // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                             // cmd_demux_001:src1_valid -> cmd_mux_001:sink1_valid
	wire  [132:0] cmd_demux_001_src1_data;                                                              // cmd_demux_001:src1_data -> cmd_mux_001:sink1_data
	wire          cmd_demux_001_src1_ready;                                                             // cmd_mux_001:sink1_ready -> cmd_demux_001:src1_ready
	wire   [27:0] cmd_demux_001_src1_channel;                                                           // cmd_demux_001:src1_channel -> cmd_mux_001:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                                     // cmd_demux_001:src1_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                       // cmd_demux_001:src1_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                                             // cmd_demux_001:src2_valid -> cmd_mux_002:sink1_valid
	wire  [132:0] cmd_demux_001_src2_data;                                                              // cmd_demux_001:src2_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_001_src2_ready;                                                             // cmd_mux_002:sink1_ready -> cmd_demux_001:src2_ready
	wire   [27:0] cmd_demux_001_src2_channel;                                                           // cmd_demux_001:src2_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                                                     // cmd_demux_001:src2_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                                       // cmd_demux_001:src2_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_001_src3_valid;                                                             // cmd_demux_001:src3_valid -> cmd_mux_003:sink1_valid
	wire  [132:0] cmd_demux_001_src3_data;                                                              // cmd_demux_001:src3_data -> cmd_mux_003:sink1_data
	wire          cmd_demux_001_src3_ready;                                                             // cmd_mux_003:sink1_ready -> cmd_demux_001:src3_ready
	wire   [27:0] cmd_demux_001_src3_channel;                                                           // cmd_demux_001:src3_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_001_src3_startofpacket;                                                     // cmd_demux_001:src3_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                                       // cmd_demux_001:src3_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_001_src4_valid;                                                             // cmd_demux_001:src4_valid -> cmd_mux_004:sink1_valid
	wire  [132:0] cmd_demux_001_src4_data;                                                              // cmd_demux_001:src4_data -> cmd_mux_004:sink1_data
	wire          cmd_demux_001_src4_ready;                                                             // cmd_mux_004:sink1_ready -> cmd_demux_001:src4_ready
	wire   [27:0] cmd_demux_001_src4_channel;                                                           // cmd_demux_001:src4_channel -> cmd_mux_004:sink1_channel
	wire          cmd_demux_001_src4_startofpacket;                                                     // cmd_demux_001:src4_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                                       // cmd_demux_001:src4_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_001_src5_valid;                                                             // cmd_demux_001:src5_valid -> cmd_mux_005:sink1_valid
	wire  [132:0] cmd_demux_001_src5_data;                                                              // cmd_demux_001:src5_data -> cmd_mux_005:sink1_data
	wire          cmd_demux_001_src5_ready;                                                             // cmd_mux_005:sink1_ready -> cmd_demux_001:src5_ready
	wire   [27:0] cmd_demux_001_src5_channel;                                                           // cmd_demux_001:src5_channel -> cmd_mux_005:sink1_channel
	wire          cmd_demux_001_src5_startofpacket;                                                     // cmd_demux_001:src5_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire          cmd_demux_001_src5_endofpacket;                                                       // cmd_demux_001:src5_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          cmd_demux_001_src6_valid;                                                             // cmd_demux_001:src6_valid -> cmd_mux_006:sink1_valid
	wire  [132:0] cmd_demux_001_src6_data;                                                              // cmd_demux_001:src6_data -> cmd_mux_006:sink1_data
	wire          cmd_demux_001_src6_ready;                                                             // cmd_mux_006:sink1_ready -> cmd_demux_001:src6_ready
	wire   [27:0] cmd_demux_001_src6_channel;                                                           // cmd_demux_001:src6_channel -> cmd_mux_006:sink1_channel
	wire          cmd_demux_001_src6_startofpacket;                                                     // cmd_demux_001:src6_startofpacket -> cmd_mux_006:sink1_startofpacket
	wire          cmd_demux_001_src6_endofpacket;                                                       // cmd_demux_001:src6_endofpacket -> cmd_mux_006:sink1_endofpacket
	wire          cmd_demux_001_src7_valid;                                                             // cmd_demux_001:src7_valid -> cmd_mux_007:sink1_valid
	wire  [132:0] cmd_demux_001_src7_data;                                                              // cmd_demux_001:src7_data -> cmd_mux_007:sink1_data
	wire          cmd_demux_001_src7_ready;                                                             // cmd_mux_007:sink1_ready -> cmd_demux_001:src7_ready
	wire   [27:0] cmd_demux_001_src7_channel;                                                           // cmd_demux_001:src7_channel -> cmd_mux_007:sink1_channel
	wire          cmd_demux_001_src7_startofpacket;                                                     // cmd_demux_001:src7_startofpacket -> cmd_mux_007:sink1_startofpacket
	wire          cmd_demux_001_src7_endofpacket;                                                       // cmd_demux_001:src7_endofpacket -> cmd_mux_007:sink1_endofpacket
	wire          cmd_demux_001_src8_valid;                                                             // cmd_demux_001:src8_valid -> cmd_mux_008:sink1_valid
	wire  [132:0] cmd_demux_001_src8_data;                                                              // cmd_demux_001:src8_data -> cmd_mux_008:sink1_data
	wire          cmd_demux_001_src8_ready;                                                             // cmd_mux_008:sink1_ready -> cmd_demux_001:src8_ready
	wire   [27:0] cmd_demux_001_src8_channel;                                                           // cmd_demux_001:src8_channel -> cmd_mux_008:sink1_channel
	wire          cmd_demux_001_src8_startofpacket;                                                     // cmd_demux_001:src8_startofpacket -> cmd_mux_008:sink1_startofpacket
	wire          cmd_demux_001_src8_endofpacket;                                                       // cmd_demux_001:src8_endofpacket -> cmd_mux_008:sink1_endofpacket
	wire          cmd_demux_001_src9_valid;                                                             // cmd_demux_001:src9_valid -> cmd_mux_009:sink1_valid
	wire  [132:0] cmd_demux_001_src9_data;                                                              // cmd_demux_001:src9_data -> cmd_mux_009:sink1_data
	wire          cmd_demux_001_src9_ready;                                                             // cmd_mux_009:sink1_ready -> cmd_demux_001:src9_ready
	wire   [27:0] cmd_demux_001_src9_channel;                                                           // cmd_demux_001:src9_channel -> cmd_mux_009:sink1_channel
	wire          cmd_demux_001_src9_startofpacket;                                                     // cmd_demux_001:src9_startofpacket -> cmd_mux_009:sink1_startofpacket
	wire          cmd_demux_001_src9_endofpacket;                                                       // cmd_demux_001:src9_endofpacket -> cmd_mux_009:sink1_endofpacket
	wire          cmd_demux_001_src10_valid;                                                            // cmd_demux_001:src10_valid -> cmd_mux_010:sink1_valid
	wire  [132:0] cmd_demux_001_src10_data;                                                             // cmd_demux_001:src10_data -> cmd_mux_010:sink1_data
	wire          cmd_demux_001_src10_ready;                                                            // cmd_mux_010:sink1_ready -> cmd_demux_001:src10_ready
	wire   [27:0] cmd_demux_001_src10_channel;                                                          // cmd_demux_001:src10_channel -> cmd_mux_010:sink1_channel
	wire          cmd_demux_001_src10_startofpacket;                                                    // cmd_demux_001:src10_startofpacket -> cmd_mux_010:sink1_startofpacket
	wire          cmd_demux_001_src10_endofpacket;                                                      // cmd_demux_001:src10_endofpacket -> cmd_mux_010:sink1_endofpacket
	wire          cmd_demux_001_src11_valid;                                                            // cmd_demux_001:src11_valid -> cmd_mux_011:sink1_valid
	wire  [132:0] cmd_demux_001_src11_data;                                                             // cmd_demux_001:src11_data -> cmd_mux_011:sink1_data
	wire          cmd_demux_001_src11_ready;                                                            // cmd_mux_011:sink1_ready -> cmd_demux_001:src11_ready
	wire   [27:0] cmd_demux_001_src11_channel;                                                          // cmd_demux_001:src11_channel -> cmd_mux_011:sink1_channel
	wire          cmd_demux_001_src11_startofpacket;                                                    // cmd_demux_001:src11_startofpacket -> cmd_mux_011:sink1_startofpacket
	wire          cmd_demux_001_src11_endofpacket;                                                      // cmd_demux_001:src11_endofpacket -> cmd_mux_011:sink1_endofpacket
	wire          cmd_demux_001_src12_valid;                                                            // cmd_demux_001:src12_valid -> cmd_mux_012:sink1_valid
	wire  [132:0] cmd_demux_001_src12_data;                                                             // cmd_demux_001:src12_data -> cmd_mux_012:sink1_data
	wire          cmd_demux_001_src12_ready;                                                            // cmd_mux_012:sink1_ready -> cmd_demux_001:src12_ready
	wire   [27:0] cmd_demux_001_src12_channel;                                                          // cmd_demux_001:src12_channel -> cmd_mux_012:sink1_channel
	wire          cmd_demux_001_src12_startofpacket;                                                    // cmd_demux_001:src12_startofpacket -> cmd_mux_012:sink1_startofpacket
	wire          cmd_demux_001_src12_endofpacket;                                                      // cmd_demux_001:src12_endofpacket -> cmd_mux_012:sink1_endofpacket
	wire          cmd_demux_002_src0_valid;                                                             // cmd_demux_002:src0_valid -> cmd_mux:sink2_valid
	wire  [132:0] cmd_demux_002_src0_data;                                                              // cmd_demux_002:src0_data -> cmd_mux:sink2_data
	wire          cmd_demux_002_src0_ready;                                                             // cmd_mux:sink2_ready -> cmd_demux_002:src0_ready
	wire   [27:0] cmd_demux_002_src0_channel;                                                           // cmd_demux_002:src0_channel -> cmd_mux:sink2_channel
	wire          cmd_demux_002_src0_startofpacket;                                                     // cmd_demux_002:src0_startofpacket -> cmd_mux:sink2_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                       // cmd_demux_002:src0_endofpacket -> cmd_mux:sink2_endofpacket
	wire          cmd_demux_002_src1_valid;                                                             // cmd_demux_002:src1_valid -> cmd_mux_001:sink2_valid
	wire  [132:0] cmd_demux_002_src1_data;                                                              // cmd_demux_002:src1_data -> cmd_mux_001:sink2_data
	wire          cmd_demux_002_src1_ready;                                                             // cmd_mux_001:sink2_ready -> cmd_demux_002:src1_ready
	wire   [27:0] cmd_demux_002_src1_channel;                                                           // cmd_demux_002:src1_channel -> cmd_mux_001:sink2_channel
	wire          cmd_demux_002_src1_startofpacket;                                                     // cmd_demux_002:src1_startofpacket -> cmd_mux_001:sink2_startofpacket
	wire          cmd_demux_002_src1_endofpacket;                                                       // cmd_demux_002:src1_endofpacket -> cmd_mux_001:sink2_endofpacket
	wire          cmd_demux_002_src2_valid;                                                             // cmd_demux_002:src2_valid -> cmd_mux_002:sink2_valid
	wire  [132:0] cmd_demux_002_src2_data;                                                              // cmd_demux_002:src2_data -> cmd_mux_002:sink2_data
	wire          cmd_demux_002_src2_ready;                                                             // cmd_mux_002:sink2_ready -> cmd_demux_002:src2_ready
	wire   [27:0] cmd_demux_002_src2_channel;                                                           // cmd_demux_002:src2_channel -> cmd_mux_002:sink2_channel
	wire          cmd_demux_002_src2_startofpacket;                                                     // cmd_demux_002:src2_startofpacket -> cmd_mux_002:sink2_startofpacket
	wire          cmd_demux_002_src2_endofpacket;                                                       // cmd_demux_002:src2_endofpacket -> cmd_mux_002:sink2_endofpacket
	wire          cmd_demux_002_src3_valid;                                                             // cmd_demux_002:src3_valid -> cmd_mux_003:sink2_valid
	wire  [132:0] cmd_demux_002_src3_data;                                                              // cmd_demux_002:src3_data -> cmd_mux_003:sink2_data
	wire          cmd_demux_002_src3_ready;                                                             // cmd_mux_003:sink2_ready -> cmd_demux_002:src3_ready
	wire   [27:0] cmd_demux_002_src3_channel;                                                           // cmd_demux_002:src3_channel -> cmd_mux_003:sink2_channel
	wire          cmd_demux_002_src3_startofpacket;                                                     // cmd_demux_002:src3_startofpacket -> cmd_mux_003:sink2_startofpacket
	wire          cmd_demux_002_src3_endofpacket;                                                       // cmd_demux_002:src3_endofpacket -> cmd_mux_003:sink2_endofpacket
	wire          cmd_demux_002_src4_valid;                                                             // cmd_demux_002:src4_valid -> cmd_mux_004:sink2_valid
	wire  [132:0] cmd_demux_002_src4_data;                                                              // cmd_demux_002:src4_data -> cmd_mux_004:sink2_data
	wire          cmd_demux_002_src4_ready;                                                             // cmd_mux_004:sink2_ready -> cmd_demux_002:src4_ready
	wire   [27:0] cmd_demux_002_src4_channel;                                                           // cmd_demux_002:src4_channel -> cmd_mux_004:sink2_channel
	wire          cmd_demux_002_src4_startofpacket;                                                     // cmd_demux_002:src4_startofpacket -> cmd_mux_004:sink2_startofpacket
	wire          cmd_demux_002_src4_endofpacket;                                                       // cmd_demux_002:src4_endofpacket -> cmd_mux_004:sink2_endofpacket
	wire          cmd_demux_002_src5_valid;                                                             // cmd_demux_002:src5_valid -> cmd_mux_005:sink2_valid
	wire  [132:0] cmd_demux_002_src5_data;                                                              // cmd_demux_002:src5_data -> cmd_mux_005:sink2_data
	wire          cmd_demux_002_src5_ready;                                                             // cmd_mux_005:sink2_ready -> cmd_demux_002:src5_ready
	wire   [27:0] cmd_demux_002_src5_channel;                                                           // cmd_demux_002:src5_channel -> cmd_mux_005:sink2_channel
	wire          cmd_demux_002_src5_startofpacket;                                                     // cmd_demux_002:src5_startofpacket -> cmd_mux_005:sink2_startofpacket
	wire          cmd_demux_002_src5_endofpacket;                                                       // cmd_demux_002:src5_endofpacket -> cmd_mux_005:sink2_endofpacket
	wire          cmd_demux_002_src6_valid;                                                             // cmd_demux_002:src6_valid -> cmd_mux_006:sink2_valid
	wire  [132:0] cmd_demux_002_src6_data;                                                              // cmd_demux_002:src6_data -> cmd_mux_006:sink2_data
	wire          cmd_demux_002_src6_ready;                                                             // cmd_mux_006:sink2_ready -> cmd_demux_002:src6_ready
	wire   [27:0] cmd_demux_002_src6_channel;                                                           // cmd_demux_002:src6_channel -> cmd_mux_006:sink2_channel
	wire          cmd_demux_002_src6_startofpacket;                                                     // cmd_demux_002:src6_startofpacket -> cmd_mux_006:sink2_startofpacket
	wire          cmd_demux_002_src6_endofpacket;                                                       // cmd_demux_002:src6_endofpacket -> cmd_mux_006:sink2_endofpacket
	wire          cmd_demux_002_src7_valid;                                                             // cmd_demux_002:src7_valid -> cmd_mux_007:sink2_valid
	wire  [132:0] cmd_demux_002_src7_data;                                                              // cmd_demux_002:src7_data -> cmd_mux_007:sink2_data
	wire          cmd_demux_002_src7_ready;                                                             // cmd_mux_007:sink2_ready -> cmd_demux_002:src7_ready
	wire   [27:0] cmd_demux_002_src7_channel;                                                           // cmd_demux_002:src7_channel -> cmd_mux_007:sink2_channel
	wire          cmd_demux_002_src7_startofpacket;                                                     // cmd_demux_002:src7_startofpacket -> cmd_mux_007:sink2_startofpacket
	wire          cmd_demux_002_src7_endofpacket;                                                       // cmd_demux_002:src7_endofpacket -> cmd_mux_007:sink2_endofpacket
	wire          cmd_demux_002_src8_valid;                                                             // cmd_demux_002:src8_valid -> cmd_mux_008:sink2_valid
	wire  [132:0] cmd_demux_002_src8_data;                                                              // cmd_demux_002:src8_data -> cmd_mux_008:sink2_data
	wire          cmd_demux_002_src8_ready;                                                             // cmd_mux_008:sink2_ready -> cmd_demux_002:src8_ready
	wire   [27:0] cmd_demux_002_src8_channel;                                                           // cmd_demux_002:src8_channel -> cmd_mux_008:sink2_channel
	wire          cmd_demux_002_src8_startofpacket;                                                     // cmd_demux_002:src8_startofpacket -> cmd_mux_008:sink2_startofpacket
	wire          cmd_demux_002_src8_endofpacket;                                                       // cmd_demux_002:src8_endofpacket -> cmd_mux_008:sink2_endofpacket
	wire          cmd_demux_002_src9_valid;                                                             // cmd_demux_002:src9_valid -> cmd_mux_009:sink2_valid
	wire  [132:0] cmd_demux_002_src9_data;                                                              // cmd_demux_002:src9_data -> cmd_mux_009:sink2_data
	wire          cmd_demux_002_src9_ready;                                                             // cmd_mux_009:sink2_ready -> cmd_demux_002:src9_ready
	wire   [27:0] cmd_demux_002_src9_channel;                                                           // cmd_demux_002:src9_channel -> cmd_mux_009:sink2_channel
	wire          cmd_demux_002_src9_startofpacket;                                                     // cmd_demux_002:src9_startofpacket -> cmd_mux_009:sink2_startofpacket
	wire          cmd_demux_002_src9_endofpacket;                                                       // cmd_demux_002:src9_endofpacket -> cmd_mux_009:sink2_endofpacket
	wire          cmd_demux_002_src10_valid;                                                            // cmd_demux_002:src10_valid -> cmd_mux_010:sink2_valid
	wire  [132:0] cmd_demux_002_src10_data;                                                             // cmd_demux_002:src10_data -> cmd_mux_010:sink2_data
	wire          cmd_demux_002_src10_ready;                                                            // cmd_mux_010:sink2_ready -> cmd_demux_002:src10_ready
	wire   [27:0] cmd_demux_002_src10_channel;                                                          // cmd_demux_002:src10_channel -> cmd_mux_010:sink2_channel
	wire          cmd_demux_002_src10_startofpacket;                                                    // cmd_demux_002:src10_startofpacket -> cmd_mux_010:sink2_startofpacket
	wire          cmd_demux_002_src10_endofpacket;                                                      // cmd_demux_002:src10_endofpacket -> cmd_mux_010:sink2_endofpacket
	wire          cmd_demux_002_src11_valid;                                                            // cmd_demux_002:src11_valid -> cmd_mux_013:sink0_valid
	wire  [132:0] cmd_demux_002_src11_data;                                                             // cmd_demux_002:src11_data -> cmd_mux_013:sink0_data
	wire          cmd_demux_002_src11_ready;                                                            // cmd_mux_013:sink0_ready -> cmd_demux_002:src11_ready
	wire   [27:0] cmd_demux_002_src11_channel;                                                          // cmd_demux_002:src11_channel -> cmd_mux_013:sink0_channel
	wire          cmd_demux_002_src11_startofpacket;                                                    // cmd_demux_002:src11_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire          cmd_demux_002_src11_endofpacket;                                                      // cmd_demux_002:src11_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_002_src12_valid;                                                            // cmd_demux_002:src12_valid -> cmd_mux_014:sink0_valid
	wire  [132:0] cmd_demux_002_src12_data;                                                             // cmd_demux_002:src12_data -> cmd_mux_014:sink0_data
	wire          cmd_demux_002_src12_ready;                                                            // cmd_mux_014:sink0_ready -> cmd_demux_002:src12_ready
	wire   [27:0] cmd_demux_002_src12_channel;                                                          // cmd_demux_002:src12_channel -> cmd_mux_014:sink0_channel
	wire          cmd_demux_002_src12_startofpacket;                                                    // cmd_demux_002:src12_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire          cmd_demux_002_src12_endofpacket;                                                      // cmd_demux_002:src12_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          cmd_demux_002_src13_valid;                                                            // cmd_demux_002:src13_valid -> cmd_mux_015:sink0_valid
	wire  [132:0] cmd_demux_002_src13_data;                                                             // cmd_demux_002:src13_data -> cmd_mux_015:sink0_data
	wire          cmd_demux_002_src13_ready;                                                            // cmd_mux_015:sink0_ready -> cmd_demux_002:src13_ready
	wire   [27:0] cmd_demux_002_src13_channel;                                                          // cmd_demux_002:src13_channel -> cmd_mux_015:sink0_channel
	wire          cmd_demux_002_src13_startofpacket;                                                    // cmd_demux_002:src13_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire          cmd_demux_002_src13_endofpacket;                                                      // cmd_demux_002:src13_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire          cmd_demux_002_src14_valid;                                                            // cmd_demux_002:src14_valid -> cmd_mux_016:sink0_valid
	wire  [132:0] cmd_demux_002_src14_data;                                                             // cmd_demux_002:src14_data -> cmd_mux_016:sink0_data
	wire          cmd_demux_002_src14_ready;                                                            // cmd_mux_016:sink0_ready -> cmd_demux_002:src14_ready
	wire   [27:0] cmd_demux_002_src14_channel;                                                          // cmd_demux_002:src14_channel -> cmd_mux_016:sink0_channel
	wire          cmd_demux_002_src14_startofpacket;                                                    // cmd_demux_002:src14_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire          cmd_demux_002_src14_endofpacket;                                                      // cmd_demux_002:src14_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire          cmd_demux_002_src15_valid;                                                            // cmd_demux_002:src15_valid -> cmd_mux_017:sink0_valid
	wire  [132:0] cmd_demux_002_src15_data;                                                             // cmd_demux_002:src15_data -> cmd_mux_017:sink0_data
	wire          cmd_demux_002_src15_ready;                                                            // cmd_mux_017:sink0_ready -> cmd_demux_002:src15_ready
	wire   [27:0] cmd_demux_002_src15_channel;                                                          // cmd_demux_002:src15_channel -> cmd_mux_017:sink0_channel
	wire          cmd_demux_002_src15_startofpacket;                                                    // cmd_demux_002:src15_startofpacket -> cmd_mux_017:sink0_startofpacket
	wire          cmd_demux_002_src15_endofpacket;                                                      // cmd_demux_002:src15_endofpacket -> cmd_mux_017:sink0_endofpacket
	wire          cmd_demux_002_src16_valid;                                                            // cmd_demux_002:src16_valid -> cmd_mux_018:sink0_valid
	wire  [132:0] cmd_demux_002_src16_data;                                                             // cmd_demux_002:src16_data -> cmd_mux_018:sink0_data
	wire          cmd_demux_002_src16_ready;                                                            // cmd_mux_018:sink0_ready -> cmd_demux_002:src16_ready
	wire   [27:0] cmd_demux_002_src16_channel;                                                          // cmd_demux_002:src16_channel -> cmd_mux_018:sink0_channel
	wire          cmd_demux_002_src16_startofpacket;                                                    // cmd_demux_002:src16_startofpacket -> cmd_mux_018:sink0_startofpacket
	wire          cmd_demux_002_src16_endofpacket;                                                      // cmd_demux_002:src16_endofpacket -> cmd_mux_018:sink0_endofpacket
	wire          cmd_demux_002_src17_valid;                                                            // cmd_demux_002:src17_valid -> cmd_mux_019:sink0_valid
	wire  [132:0] cmd_demux_002_src17_data;                                                             // cmd_demux_002:src17_data -> cmd_mux_019:sink0_data
	wire          cmd_demux_002_src17_ready;                                                            // cmd_mux_019:sink0_ready -> cmd_demux_002:src17_ready
	wire   [27:0] cmd_demux_002_src17_channel;                                                          // cmd_demux_002:src17_channel -> cmd_mux_019:sink0_channel
	wire          cmd_demux_002_src17_startofpacket;                                                    // cmd_demux_002:src17_startofpacket -> cmd_mux_019:sink0_startofpacket
	wire          cmd_demux_002_src17_endofpacket;                                                      // cmd_demux_002:src17_endofpacket -> cmd_mux_019:sink0_endofpacket
	wire          cmd_demux_002_src18_valid;                                                            // cmd_demux_002:src18_valid -> cmd_mux_027:sink0_valid
	wire  [132:0] cmd_demux_002_src18_data;                                                             // cmd_demux_002:src18_data -> cmd_mux_027:sink0_data
	wire          cmd_demux_002_src18_ready;                                                            // cmd_mux_027:sink0_ready -> cmd_demux_002:src18_ready
	wire   [27:0] cmd_demux_002_src18_channel;                                                          // cmd_demux_002:src18_channel -> cmd_mux_027:sink0_channel
	wire          cmd_demux_002_src18_startofpacket;                                                    // cmd_demux_002:src18_startofpacket -> cmd_mux_027:sink0_startofpacket
	wire          cmd_demux_002_src18_endofpacket;                                                      // cmd_demux_002:src18_endofpacket -> cmd_mux_027:sink0_endofpacket
	wire          cmd_demux_003_src0_valid;                                                             // cmd_demux_003:src0_valid -> cmd_mux:sink3_valid
	wire  [132:0] cmd_demux_003_src0_data;                                                              // cmd_demux_003:src0_data -> cmd_mux:sink3_data
	wire          cmd_demux_003_src0_ready;                                                             // cmd_mux:sink3_ready -> cmd_demux_003:src0_ready
	wire   [27:0] cmd_demux_003_src0_channel;                                                           // cmd_demux_003:src0_channel -> cmd_mux:sink3_channel
	wire          cmd_demux_003_src0_startofpacket;                                                     // cmd_demux_003:src0_startofpacket -> cmd_mux:sink3_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                                                       // cmd_demux_003:src0_endofpacket -> cmd_mux:sink3_endofpacket
	wire          cmd_demux_003_src1_valid;                                                             // cmd_demux_003:src1_valid -> cmd_mux_001:sink3_valid
	wire  [132:0] cmd_demux_003_src1_data;                                                              // cmd_demux_003:src1_data -> cmd_mux_001:sink3_data
	wire          cmd_demux_003_src1_ready;                                                             // cmd_mux_001:sink3_ready -> cmd_demux_003:src1_ready
	wire   [27:0] cmd_demux_003_src1_channel;                                                           // cmd_demux_003:src1_channel -> cmd_mux_001:sink3_channel
	wire          cmd_demux_003_src1_startofpacket;                                                     // cmd_demux_003:src1_startofpacket -> cmd_mux_001:sink3_startofpacket
	wire          cmd_demux_003_src1_endofpacket;                                                       // cmd_demux_003:src1_endofpacket -> cmd_mux_001:sink3_endofpacket
	wire          cmd_demux_003_src2_valid;                                                             // cmd_demux_003:src2_valid -> cmd_mux_002:sink3_valid
	wire  [132:0] cmd_demux_003_src2_data;                                                              // cmd_demux_003:src2_data -> cmd_mux_002:sink3_data
	wire          cmd_demux_003_src2_ready;                                                             // cmd_mux_002:sink3_ready -> cmd_demux_003:src2_ready
	wire   [27:0] cmd_demux_003_src2_channel;                                                           // cmd_demux_003:src2_channel -> cmd_mux_002:sink3_channel
	wire          cmd_demux_003_src2_startofpacket;                                                     // cmd_demux_003:src2_startofpacket -> cmd_mux_002:sink3_startofpacket
	wire          cmd_demux_003_src2_endofpacket;                                                       // cmd_demux_003:src2_endofpacket -> cmd_mux_002:sink3_endofpacket
	wire          cmd_demux_003_src3_valid;                                                             // cmd_demux_003:src3_valid -> cmd_mux_003:sink3_valid
	wire  [132:0] cmd_demux_003_src3_data;                                                              // cmd_demux_003:src3_data -> cmd_mux_003:sink3_data
	wire          cmd_demux_003_src3_ready;                                                             // cmd_mux_003:sink3_ready -> cmd_demux_003:src3_ready
	wire   [27:0] cmd_demux_003_src3_channel;                                                           // cmd_demux_003:src3_channel -> cmd_mux_003:sink3_channel
	wire          cmd_demux_003_src3_startofpacket;                                                     // cmd_demux_003:src3_startofpacket -> cmd_mux_003:sink3_startofpacket
	wire          cmd_demux_003_src3_endofpacket;                                                       // cmd_demux_003:src3_endofpacket -> cmd_mux_003:sink3_endofpacket
	wire          cmd_demux_003_src4_valid;                                                             // cmd_demux_003:src4_valid -> cmd_mux_004:sink3_valid
	wire  [132:0] cmd_demux_003_src4_data;                                                              // cmd_demux_003:src4_data -> cmd_mux_004:sink3_data
	wire          cmd_demux_003_src4_ready;                                                             // cmd_mux_004:sink3_ready -> cmd_demux_003:src4_ready
	wire   [27:0] cmd_demux_003_src4_channel;                                                           // cmd_demux_003:src4_channel -> cmd_mux_004:sink3_channel
	wire          cmd_demux_003_src4_startofpacket;                                                     // cmd_demux_003:src4_startofpacket -> cmd_mux_004:sink3_startofpacket
	wire          cmd_demux_003_src4_endofpacket;                                                       // cmd_demux_003:src4_endofpacket -> cmd_mux_004:sink3_endofpacket
	wire          cmd_demux_003_src5_valid;                                                             // cmd_demux_003:src5_valid -> cmd_mux_005:sink3_valid
	wire  [132:0] cmd_demux_003_src5_data;                                                              // cmd_demux_003:src5_data -> cmd_mux_005:sink3_data
	wire          cmd_demux_003_src5_ready;                                                             // cmd_mux_005:sink3_ready -> cmd_demux_003:src5_ready
	wire   [27:0] cmd_demux_003_src5_channel;                                                           // cmd_demux_003:src5_channel -> cmd_mux_005:sink3_channel
	wire          cmd_demux_003_src5_startofpacket;                                                     // cmd_demux_003:src5_startofpacket -> cmd_mux_005:sink3_startofpacket
	wire          cmd_demux_003_src5_endofpacket;                                                       // cmd_demux_003:src5_endofpacket -> cmd_mux_005:sink3_endofpacket
	wire          cmd_demux_003_src6_valid;                                                             // cmd_demux_003:src6_valid -> cmd_mux_006:sink3_valid
	wire  [132:0] cmd_demux_003_src6_data;                                                              // cmd_demux_003:src6_data -> cmd_mux_006:sink3_data
	wire          cmd_demux_003_src6_ready;                                                             // cmd_mux_006:sink3_ready -> cmd_demux_003:src6_ready
	wire   [27:0] cmd_demux_003_src6_channel;                                                           // cmd_demux_003:src6_channel -> cmd_mux_006:sink3_channel
	wire          cmd_demux_003_src6_startofpacket;                                                     // cmd_demux_003:src6_startofpacket -> cmd_mux_006:sink3_startofpacket
	wire          cmd_demux_003_src6_endofpacket;                                                       // cmd_demux_003:src6_endofpacket -> cmd_mux_006:sink3_endofpacket
	wire          cmd_demux_003_src7_valid;                                                             // cmd_demux_003:src7_valid -> cmd_mux_007:sink3_valid
	wire  [132:0] cmd_demux_003_src7_data;                                                              // cmd_demux_003:src7_data -> cmd_mux_007:sink3_data
	wire          cmd_demux_003_src7_ready;                                                             // cmd_mux_007:sink3_ready -> cmd_demux_003:src7_ready
	wire   [27:0] cmd_demux_003_src7_channel;                                                           // cmd_demux_003:src7_channel -> cmd_mux_007:sink3_channel
	wire          cmd_demux_003_src7_startofpacket;                                                     // cmd_demux_003:src7_startofpacket -> cmd_mux_007:sink3_startofpacket
	wire          cmd_demux_003_src7_endofpacket;                                                       // cmd_demux_003:src7_endofpacket -> cmd_mux_007:sink3_endofpacket
	wire          cmd_demux_003_src8_valid;                                                             // cmd_demux_003:src8_valid -> cmd_mux_008:sink3_valid
	wire  [132:0] cmd_demux_003_src8_data;                                                              // cmd_demux_003:src8_data -> cmd_mux_008:sink3_data
	wire          cmd_demux_003_src8_ready;                                                             // cmd_mux_008:sink3_ready -> cmd_demux_003:src8_ready
	wire   [27:0] cmd_demux_003_src8_channel;                                                           // cmd_demux_003:src8_channel -> cmd_mux_008:sink3_channel
	wire          cmd_demux_003_src8_startofpacket;                                                     // cmd_demux_003:src8_startofpacket -> cmd_mux_008:sink3_startofpacket
	wire          cmd_demux_003_src8_endofpacket;                                                       // cmd_demux_003:src8_endofpacket -> cmd_mux_008:sink3_endofpacket
	wire          cmd_demux_003_src9_valid;                                                             // cmd_demux_003:src9_valid -> cmd_mux_014:sink1_valid
	wire  [132:0] cmd_demux_003_src9_data;                                                              // cmd_demux_003:src9_data -> cmd_mux_014:sink1_data
	wire          cmd_demux_003_src9_ready;                                                             // cmd_mux_014:sink1_ready -> cmd_demux_003:src9_ready
	wire   [27:0] cmd_demux_003_src9_channel;                                                           // cmd_demux_003:src9_channel -> cmd_mux_014:sink1_channel
	wire          cmd_demux_003_src9_startofpacket;                                                     // cmd_demux_003:src9_startofpacket -> cmd_mux_014:sink1_startofpacket
	wire          cmd_demux_003_src9_endofpacket;                                                       // cmd_demux_003:src9_endofpacket -> cmd_mux_014:sink1_endofpacket
	wire          cmd_demux_003_src10_valid;                                                            // cmd_demux_003:src10_valid -> cmd_mux_015:sink1_valid
	wire  [132:0] cmd_demux_003_src10_data;                                                             // cmd_demux_003:src10_data -> cmd_mux_015:sink1_data
	wire          cmd_demux_003_src10_ready;                                                            // cmd_mux_015:sink1_ready -> cmd_demux_003:src10_ready
	wire   [27:0] cmd_demux_003_src10_channel;                                                          // cmd_demux_003:src10_channel -> cmd_mux_015:sink1_channel
	wire          cmd_demux_003_src10_startofpacket;                                                    // cmd_demux_003:src10_startofpacket -> cmd_mux_015:sink1_startofpacket
	wire          cmd_demux_003_src10_endofpacket;                                                      // cmd_demux_003:src10_endofpacket -> cmd_mux_015:sink1_endofpacket
	wire          cmd_demux_003_src11_valid;                                                            // cmd_demux_003:src11_valid -> cmd_mux_016:sink1_valid
	wire  [132:0] cmd_demux_003_src11_data;                                                             // cmd_demux_003:src11_data -> cmd_mux_016:sink1_data
	wire          cmd_demux_003_src11_ready;                                                            // cmd_mux_016:sink1_ready -> cmd_demux_003:src11_ready
	wire   [27:0] cmd_demux_003_src11_channel;                                                          // cmd_demux_003:src11_channel -> cmd_mux_016:sink1_channel
	wire          cmd_demux_003_src11_startofpacket;                                                    // cmd_demux_003:src11_startofpacket -> cmd_mux_016:sink1_startofpacket
	wire          cmd_demux_003_src11_endofpacket;                                                      // cmd_demux_003:src11_endofpacket -> cmd_mux_016:sink1_endofpacket
	wire          cmd_demux_003_src12_valid;                                                            // cmd_demux_003:src12_valid -> cmd_mux_017:sink1_valid
	wire  [132:0] cmd_demux_003_src12_data;                                                             // cmd_demux_003:src12_data -> cmd_mux_017:sink1_data
	wire          cmd_demux_003_src12_ready;                                                            // cmd_mux_017:sink1_ready -> cmd_demux_003:src12_ready
	wire   [27:0] cmd_demux_003_src12_channel;                                                          // cmd_demux_003:src12_channel -> cmd_mux_017:sink1_channel
	wire          cmd_demux_003_src12_startofpacket;                                                    // cmd_demux_003:src12_startofpacket -> cmd_mux_017:sink1_startofpacket
	wire          cmd_demux_003_src12_endofpacket;                                                      // cmd_demux_003:src12_endofpacket -> cmd_mux_017:sink1_endofpacket
	wire          cmd_demux_003_src13_valid;                                                            // cmd_demux_003:src13_valid -> cmd_mux_018:sink1_valid
	wire  [132:0] cmd_demux_003_src13_data;                                                             // cmd_demux_003:src13_data -> cmd_mux_018:sink1_data
	wire          cmd_demux_003_src13_ready;                                                            // cmd_mux_018:sink1_ready -> cmd_demux_003:src13_ready
	wire   [27:0] cmd_demux_003_src13_channel;                                                          // cmd_demux_003:src13_channel -> cmd_mux_018:sink1_channel
	wire          cmd_demux_003_src13_startofpacket;                                                    // cmd_demux_003:src13_startofpacket -> cmd_mux_018:sink1_startofpacket
	wire          cmd_demux_003_src13_endofpacket;                                                      // cmd_demux_003:src13_endofpacket -> cmd_mux_018:sink1_endofpacket
	wire          cmd_demux_003_src14_valid;                                                            // cmd_demux_003:src14_valid -> cmd_mux_019:sink1_valid
	wire  [132:0] cmd_demux_003_src14_data;                                                             // cmd_demux_003:src14_data -> cmd_mux_019:sink1_data
	wire          cmd_demux_003_src14_ready;                                                            // cmd_mux_019:sink1_ready -> cmd_demux_003:src14_ready
	wire   [27:0] cmd_demux_003_src14_channel;                                                          // cmd_demux_003:src14_channel -> cmd_mux_019:sink1_channel
	wire          cmd_demux_003_src14_startofpacket;                                                    // cmd_demux_003:src14_startofpacket -> cmd_mux_019:sink1_startofpacket
	wire          cmd_demux_003_src14_endofpacket;                                                      // cmd_demux_003:src14_endofpacket -> cmd_mux_019:sink1_endofpacket
	wire          cmd_demux_003_src15_valid;                                                            // cmd_demux_003:src15_valid -> cmd_mux_020:sink0_valid
	wire  [132:0] cmd_demux_003_src15_data;                                                             // cmd_demux_003:src15_data -> cmd_mux_020:sink0_data
	wire          cmd_demux_003_src15_ready;                                                            // cmd_mux_020:sink0_ready -> cmd_demux_003:src15_ready
	wire   [27:0] cmd_demux_003_src15_channel;                                                          // cmd_demux_003:src15_channel -> cmd_mux_020:sink0_channel
	wire          cmd_demux_003_src15_startofpacket;                                                    // cmd_demux_003:src15_startofpacket -> cmd_mux_020:sink0_startofpacket
	wire          cmd_demux_003_src15_endofpacket;                                                      // cmd_demux_003:src15_endofpacket -> cmd_mux_020:sink0_endofpacket
	wire          cmd_demux_003_src16_valid;                                                            // cmd_demux_003:src16_valid -> cmd_mux_021:sink0_valid
	wire  [132:0] cmd_demux_003_src16_data;                                                             // cmd_demux_003:src16_data -> cmd_mux_021:sink0_data
	wire          cmd_demux_003_src16_ready;                                                            // cmd_mux_021:sink0_ready -> cmd_demux_003:src16_ready
	wire   [27:0] cmd_demux_003_src16_channel;                                                          // cmd_demux_003:src16_channel -> cmd_mux_021:sink0_channel
	wire          cmd_demux_003_src16_startofpacket;                                                    // cmd_demux_003:src16_startofpacket -> cmd_mux_021:sink0_startofpacket
	wire          cmd_demux_003_src16_endofpacket;                                                      // cmd_demux_003:src16_endofpacket -> cmd_mux_021:sink0_endofpacket
	wire          cmd_demux_003_src17_valid;                                                            // cmd_demux_003:src17_valid -> cmd_mux_022:sink0_valid
	wire  [132:0] cmd_demux_003_src17_data;                                                             // cmd_demux_003:src17_data -> cmd_mux_022:sink0_data
	wire          cmd_demux_003_src17_ready;                                                            // cmd_mux_022:sink0_ready -> cmd_demux_003:src17_ready
	wire   [27:0] cmd_demux_003_src17_channel;                                                          // cmd_demux_003:src17_channel -> cmd_mux_022:sink0_channel
	wire          cmd_demux_003_src17_startofpacket;                                                    // cmd_demux_003:src17_startofpacket -> cmd_mux_022:sink0_startofpacket
	wire          cmd_demux_003_src17_endofpacket;                                                      // cmd_demux_003:src17_endofpacket -> cmd_mux_022:sink0_endofpacket
	wire          cmd_demux_003_src18_valid;                                                            // cmd_demux_003:src18_valid -> cmd_mux_023:sink0_valid
	wire  [132:0] cmd_demux_003_src18_data;                                                             // cmd_demux_003:src18_data -> cmd_mux_023:sink0_data
	wire          cmd_demux_003_src18_ready;                                                            // cmd_mux_023:sink0_ready -> cmd_demux_003:src18_ready
	wire   [27:0] cmd_demux_003_src18_channel;                                                          // cmd_demux_003:src18_channel -> cmd_mux_023:sink0_channel
	wire          cmd_demux_003_src18_startofpacket;                                                    // cmd_demux_003:src18_startofpacket -> cmd_mux_023:sink0_startofpacket
	wire          cmd_demux_003_src18_endofpacket;                                                      // cmd_demux_003:src18_endofpacket -> cmd_mux_023:sink0_endofpacket
	wire          cmd_demux_004_src0_valid;                                                             // cmd_demux_004:src0_valid -> cmd_mux:sink4_valid
	wire  [132:0] cmd_demux_004_src0_data;                                                              // cmd_demux_004:src0_data -> cmd_mux:sink4_data
	wire          cmd_demux_004_src0_ready;                                                             // cmd_mux:sink4_ready -> cmd_demux_004:src0_ready
	wire   [27:0] cmd_demux_004_src0_channel;                                                           // cmd_demux_004:src0_channel -> cmd_mux:sink4_channel
	wire          cmd_demux_004_src0_startofpacket;                                                     // cmd_demux_004:src0_startofpacket -> cmd_mux:sink4_startofpacket
	wire          cmd_demux_004_src0_endofpacket;                                                       // cmd_demux_004:src0_endofpacket -> cmd_mux:sink4_endofpacket
	wire          cmd_demux_004_src1_valid;                                                             // cmd_demux_004:src1_valid -> cmd_mux_001:sink4_valid
	wire  [132:0] cmd_demux_004_src1_data;                                                              // cmd_demux_004:src1_data -> cmd_mux_001:sink4_data
	wire          cmd_demux_004_src1_ready;                                                             // cmd_mux_001:sink4_ready -> cmd_demux_004:src1_ready
	wire   [27:0] cmd_demux_004_src1_channel;                                                           // cmd_demux_004:src1_channel -> cmd_mux_001:sink4_channel
	wire          cmd_demux_004_src1_startofpacket;                                                     // cmd_demux_004:src1_startofpacket -> cmd_mux_001:sink4_startofpacket
	wire          cmd_demux_004_src1_endofpacket;                                                       // cmd_demux_004:src1_endofpacket -> cmd_mux_001:sink4_endofpacket
	wire          cmd_demux_004_src2_valid;                                                             // cmd_demux_004:src2_valid -> cmd_mux_002:sink4_valid
	wire  [132:0] cmd_demux_004_src2_data;                                                              // cmd_demux_004:src2_data -> cmd_mux_002:sink4_data
	wire          cmd_demux_004_src2_ready;                                                             // cmd_mux_002:sink4_ready -> cmd_demux_004:src2_ready
	wire   [27:0] cmd_demux_004_src2_channel;                                                           // cmd_demux_004:src2_channel -> cmd_mux_002:sink4_channel
	wire          cmd_demux_004_src2_startofpacket;                                                     // cmd_demux_004:src2_startofpacket -> cmd_mux_002:sink4_startofpacket
	wire          cmd_demux_004_src2_endofpacket;                                                       // cmd_demux_004:src2_endofpacket -> cmd_mux_002:sink4_endofpacket
	wire          cmd_demux_004_src3_valid;                                                             // cmd_demux_004:src3_valid -> cmd_mux_003:sink4_valid
	wire  [132:0] cmd_demux_004_src3_data;                                                              // cmd_demux_004:src3_data -> cmd_mux_003:sink4_data
	wire          cmd_demux_004_src3_ready;                                                             // cmd_mux_003:sink4_ready -> cmd_demux_004:src3_ready
	wire   [27:0] cmd_demux_004_src3_channel;                                                           // cmd_demux_004:src3_channel -> cmd_mux_003:sink4_channel
	wire          cmd_demux_004_src3_startofpacket;                                                     // cmd_demux_004:src3_startofpacket -> cmd_mux_003:sink4_startofpacket
	wire          cmd_demux_004_src3_endofpacket;                                                       // cmd_demux_004:src3_endofpacket -> cmd_mux_003:sink4_endofpacket
	wire          cmd_demux_004_src4_valid;                                                             // cmd_demux_004:src4_valid -> cmd_mux_004:sink4_valid
	wire  [132:0] cmd_demux_004_src4_data;                                                              // cmd_demux_004:src4_data -> cmd_mux_004:sink4_data
	wire          cmd_demux_004_src4_ready;                                                             // cmd_mux_004:sink4_ready -> cmd_demux_004:src4_ready
	wire   [27:0] cmd_demux_004_src4_channel;                                                           // cmd_demux_004:src4_channel -> cmd_mux_004:sink4_channel
	wire          cmd_demux_004_src4_startofpacket;                                                     // cmd_demux_004:src4_startofpacket -> cmd_mux_004:sink4_startofpacket
	wire          cmd_demux_004_src4_endofpacket;                                                       // cmd_demux_004:src4_endofpacket -> cmd_mux_004:sink4_endofpacket
	wire          cmd_demux_004_src5_valid;                                                             // cmd_demux_004:src5_valid -> cmd_mux_005:sink4_valid
	wire  [132:0] cmd_demux_004_src5_data;                                                              // cmd_demux_004:src5_data -> cmd_mux_005:sink4_data
	wire          cmd_demux_004_src5_ready;                                                             // cmd_mux_005:sink4_ready -> cmd_demux_004:src5_ready
	wire   [27:0] cmd_demux_004_src5_channel;                                                           // cmd_demux_004:src5_channel -> cmd_mux_005:sink4_channel
	wire          cmd_demux_004_src5_startofpacket;                                                     // cmd_demux_004:src5_startofpacket -> cmd_mux_005:sink4_startofpacket
	wire          cmd_demux_004_src5_endofpacket;                                                       // cmd_demux_004:src5_endofpacket -> cmd_mux_005:sink4_endofpacket
	wire          cmd_demux_004_src6_valid;                                                             // cmd_demux_004:src6_valid -> cmd_mux_006:sink4_valid
	wire  [132:0] cmd_demux_004_src6_data;                                                              // cmd_demux_004:src6_data -> cmd_mux_006:sink4_data
	wire          cmd_demux_004_src6_ready;                                                             // cmd_mux_006:sink4_ready -> cmd_demux_004:src6_ready
	wire   [27:0] cmd_demux_004_src6_channel;                                                           // cmd_demux_004:src6_channel -> cmd_mux_006:sink4_channel
	wire          cmd_demux_004_src6_startofpacket;                                                     // cmd_demux_004:src6_startofpacket -> cmd_mux_006:sink4_startofpacket
	wire          cmd_demux_004_src6_endofpacket;                                                       // cmd_demux_004:src6_endofpacket -> cmd_mux_006:sink4_endofpacket
	wire          cmd_demux_004_src7_valid;                                                             // cmd_demux_004:src7_valid -> cmd_mux_007:sink4_valid
	wire  [132:0] cmd_demux_004_src7_data;                                                              // cmd_demux_004:src7_data -> cmd_mux_007:sink4_data
	wire          cmd_demux_004_src7_ready;                                                             // cmd_mux_007:sink4_ready -> cmd_demux_004:src7_ready
	wire   [27:0] cmd_demux_004_src7_channel;                                                           // cmd_demux_004:src7_channel -> cmd_mux_007:sink4_channel
	wire          cmd_demux_004_src7_startofpacket;                                                     // cmd_demux_004:src7_startofpacket -> cmd_mux_007:sink4_startofpacket
	wire          cmd_demux_004_src7_endofpacket;                                                       // cmd_demux_004:src7_endofpacket -> cmd_mux_007:sink4_endofpacket
	wire          cmd_demux_004_src8_valid;                                                             // cmd_demux_004:src8_valid -> cmd_mux_008:sink4_valid
	wire  [132:0] cmd_demux_004_src8_data;                                                              // cmd_demux_004:src8_data -> cmd_mux_008:sink4_data
	wire          cmd_demux_004_src8_ready;                                                             // cmd_mux_008:sink4_ready -> cmd_demux_004:src8_ready
	wire   [27:0] cmd_demux_004_src8_channel;                                                           // cmd_demux_004:src8_channel -> cmd_mux_008:sink4_channel
	wire          cmd_demux_004_src8_startofpacket;                                                     // cmd_demux_004:src8_startofpacket -> cmd_mux_008:sink4_startofpacket
	wire          cmd_demux_004_src8_endofpacket;                                                       // cmd_demux_004:src8_endofpacket -> cmd_mux_008:sink4_endofpacket
	wire          cmd_demux_004_src9_valid;                                                             // cmd_demux_004:src9_valid -> cmd_mux_009:sink3_valid
	wire  [132:0] cmd_demux_004_src9_data;                                                              // cmd_demux_004:src9_data -> cmd_mux_009:sink3_data
	wire          cmd_demux_004_src9_ready;                                                             // cmd_mux_009:sink3_ready -> cmd_demux_004:src9_ready
	wire   [27:0] cmd_demux_004_src9_channel;                                                           // cmd_demux_004:src9_channel -> cmd_mux_009:sink3_channel
	wire          cmd_demux_004_src9_startofpacket;                                                     // cmd_demux_004:src9_startofpacket -> cmd_mux_009:sink3_startofpacket
	wire          cmd_demux_004_src9_endofpacket;                                                       // cmd_demux_004:src9_endofpacket -> cmd_mux_009:sink3_endofpacket
	wire          cmd_demux_004_src10_valid;                                                            // cmd_demux_004:src10_valid -> cmd_mux_010:sink3_valid
	wire  [132:0] cmd_demux_004_src10_data;                                                             // cmd_demux_004:src10_data -> cmd_mux_010:sink3_data
	wire          cmd_demux_004_src10_ready;                                                            // cmd_mux_010:sink3_ready -> cmd_demux_004:src10_ready
	wire   [27:0] cmd_demux_004_src10_channel;                                                          // cmd_demux_004:src10_channel -> cmd_mux_010:sink3_channel
	wire          cmd_demux_004_src10_startofpacket;                                                    // cmd_demux_004:src10_startofpacket -> cmd_mux_010:sink3_startofpacket
	wire          cmd_demux_004_src10_endofpacket;                                                      // cmd_demux_004:src10_endofpacket -> cmd_mux_010:sink3_endofpacket
	wire          cmd_demux_004_src11_valid;                                                            // cmd_demux_004:src11_valid -> cmd_mux_013:sink1_valid
	wire  [132:0] cmd_demux_004_src11_data;                                                             // cmd_demux_004:src11_data -> cmd_mux_013:sink1_data
	wire          cmd_demux_004_src11_ready;                                                            // cmd_mux_013:sink1_ready -> cmd_demux_004:src11_ready
	wire   [27:0] cmd_demux_004_src11_channel;                                                          // cmd_demux_004:src11_channel -> cmd_mux_013:sink1_channel
	wire          cmd_demux_004_src11_startofpacket;                                                    // cmd_demux_004:src11_startofpacket -> cmd_mux_013:sink1_startofpacket
	wire          cmd_demux_004_src11_endofpacket;                                                      // cmd_demux_004:src11_endofpacket -> cmd_mux_013:sink1_endofpacket
	wire          cmd_demux_004_src12_valid;                                                            // cmd_demux_004:src12_valid -> cmd_mux_014:sink2_valid
	wire  [132:0] cmd_demux_004_src12_data;                                                             // cmd_demux_004:src12_data -> cmd_mux_014:sink2_data
	wire          cmd_demux_004_src12_ready;                                                            // cmd_mux_014:sink2_ready -> cmd_demux_004:src12_ready
	wire   [27:0] cmd_demux_004_src12_channel;                                                          // cmd_demux_004:src12_channel -> cmd_mux_014:sink2_channel
	wire          cmd_demux_004_src12_startofpacket;                                                    // cmd_demux_004:src12_startofpacket -> cmd_mux_014:sink2_startofpacket
	wire          cmd_demux_004_src12_endofpacket;                                                      // cmd_demux_004:src12_endofpacket -> cmd_mux_014:sink2_endofpacket
	wire          cmd_demux_004_src13_valid;                                                            // cmd_demux_004:src13_valid -> cmd_mux_015:sink2_valid
	wire  [132:0] cmd_demux_004_src13_data;                                                             // cmd_demux_004:src13_data -> cmd_mux_015:sink2_data
	wire          cmd_demux_004_src13_ready;                                                            // cmd_mux_015:sink2_ready -> cmd_demux_004:src13_ready
	wire   [27:0] cmd_demux_004_src13_channel;                                                          // cmd_demux_004:src13_channel -> cmd_mux_015:sink2_channel
	wire          cmd_demux_004_src13_startofpacket;                                                    // cmd_demux_004:src13_startofpacket -> cmd_mux_015:sink2_startofpacket
	wire          cmd_demux_004_src13_endofpacket;                                                      // cmd_demux_004:src13_endofpacket -> cmd_mux_015:sink2_endofpacket
	wire          cmd_demux_004_src14_valid;                                                            // cmd_demux_004:src14_valid -> cmd_mux_016:sink2_valid
	wire  [132:0] cmd_demux_004_src14_data;                                                             // cmd_demux_004:src14_data -> cmd_mux_016:sink2_data
	wire          cmd_demux_004_src14_ready;                                                            // cmd_mux_016:sink2_ready -> cmd_demux_004:src14_ready
	wire   [27:0] cmd_demux_004_src14_channel;                                                          // cmd_demux_004:src14_channel -> cmd_mux_016:sink2_channel
	wire          cmd_demux_004_src14_startofpacket;                                                    // cmd_demux_004:src14_startofpacket -> cmd_mux_016:sink2_startofpacket
	wire          cmd_demux_004_src14_endofpacket;                                                      // cmd_demux_004:src14_endofpacket -> cmd_mux_016:sink2_endofpacket
	wire          cmd_demux_004_src15_valid;                                                            // cmd_demux_004:src15_valid -> cmd_mux_017:sink2_valid
	wire  [132:0] cmd_demux_004_src15_data;                                                             // cmd_demux_004:src15_data -> cmd_mux_017:sink2_data
	wire          cmd_demux_004_src15_ready;                                                            // cmd_mux_017:sink2_ready -> cmd_demux_004:src15_ready
	wire   [27:0] cmd_demux_004_src15_channel;                                                          // cmd_demux_004:src15_channel -> cmd_mux_017:sink2_channel
	wire          cmd_demux_004_src15_startofpacket;                                                    // cmd_demux_004:src15_startofpacket -> cmd_mux_017:sink2_startofpacket
	wire          cmd_demux_004_src15_endofpacket;                                                      // cmd_demux_004:src15_endofpacket -> cmd_mux_017:sink2_endofpacket
	wire          cmd_demux_004_src16_valid;                                                            // cmd_demux_004:src16_valid -> cmd_mux_018:sink2_valid
	wire  [132:0] cmd_demux_004_src16_data;                                                             // cmd_demux_004:src16_data -> cmd_mux_018:sink2_data
	wire          cmd_demux_004_src16_ready;                                                            // cmd_mux_018:sink2_ready -> cmd_demux_004:src16_ready
	wire   [27:0] cmd_demux_004_src16_channel;                                                          // cmd_demux_004:src16_channel -> cmd_mux_018:sink2_channel
	wire          cmd_demux_004_src16_startofpacket;                                                    // cmd_demux_004:src16_startofpacket -> cmd_mux_018:sink2_startofpacket
	wire          cmd_demux_004_src16_endofpacket;                                                      // cmd_demux_004:src16_endofpacket -> cmd_mux_018:sink2_endofpacket
	wire          cmd_demux_004_src17_valid;                                                            // cmd_demux_004:src17_valid -> cmd_mux_019:sink2_valid
	wire  [132:0] cmd_demux_004_src17_data;                                                             // cmd_demux_004:src17_data -> cmd_mux_019:sink2_data
	wire          cmd_demux_004_src17_ready;                                                            // cmd_mux_019:sink2_ready -> cmd_demux_004:src17_ready
	wire   [27:0] cmd_demux_004_src17_channel;                                                          // cmd_demux_004:src17_channel -> cmd_mux_019:sink2_channel
	wire          cmd_demux_004_src17_startofpacket;                                                    // cmd_demux_004:src17_startofpacket -> cmd_mux_019:sink2_startofpacket
	wire          cmd_demux_004_src17_endofpacket;                                                      // cmd_demux_004:src17_endofpacket -> cmd_mux_019:sink2_endofpacket
	wire          cmd_demux_005_src0_valid;                                                             // cmd_demux_005:src0_valid -> cmd_mux_021:sink1_valid
	wire  [132:0] cmd_demux_005_src0_data;                                                              // cmd_demux_005:src0_data -> cmd_mux_021:sink1_data
	wire          cmd_demux_005_src0_ready;                                                             // cmd_mux_021:sink1_ready -> cmd_demux_005:src0_ready
	wire   [27:0] cmd_demux_005_src0_channel;                                                           // cmd_demux_005:src0_channel -> cmd_mux_021:sink1_channel
	wire          cmd_demux_005_src0_startofpacket;                                                     // cmd_demux_005:src0_startofpacket -> cmd_mux_021:sink1_startofpacket
	wire          cmd_demux_005_src0_endofpacket;                                                       // cmd_demux_005:src0_endofpacket -> cmd_mux_021:sink1_endofpacket
	wire          cmd_demux_005_src1_valid;                                                             // cmd_demux_005:src1_valid -> cmd_mux_024:sink0_valid
	wire  [132:0] cmd_demux_005_src1_data;                                                              // cmd_demux_005:src1_data -> cmd_mux_024:sink0_data
	wire          cmd_demux_005_src1_ready;                                                             // cmd_mux_024:sink0_ready -> cmd_demux_005:src1_ready
	wire   [27:0] cmd_demux_005_src1_channel;                                                           // cmd_demux_005:src1_channel -> cmd_mux_024:sink0_channel
	wire          cmd_demux_005_src1_startofpacket;                                                     // cmd_demux_005:src1_startofpacket -> cmd_mux_024:sink0_startofpacket
	wire          cmd_demux_005_src1_endofpacket;                                                       // cmd_demux_005:src1_endofpacket -> cmd_mux_024:sink0_endofpacket
	wire          cmd_demux_005_src2_valid;                                                             // cmd_demux_005:src2_valid -> cmd_mux_025:sink0_valid
	wire  [132:0] cmd_demux_005_src2_data;                                                              // cmd_demux_005:src2_data -> cmd_mux_025:sink0_data
	wire          cmd_demux_005_src2_ready;                                                             // cmd_mux_025:sink0_ready -> cmd_demux_005:src2_ready
	wire   [27:0] cmd_demux_005_src2_channel;                                                           // cmd_demux_005:src2_channel -> cmd_mux_025:sink0_channel
	wire          cmd_demux_005_src2_startofpacket;                                                     // cmd_demux_005:src2_startofpacket -> cmd_mux_025:sink0_startofpacket
	wire          cmd_demux_005_src2_endofpacket;                                                       // cmd_demux_005:src2_endofpacket -> cmd_mux_025:sink0_endofpacket
	wire          cmd_demux_005_src3_valid;                                                             // cmd_demux_005:src3_valid -> cmd_mux_026:sink0_valid
	wire  [132:0] cmd_demux_005_src3_data;                                                              // cmd_demux_005:src3_data -> cmd_mux_026:sink0_data
	wire          cmd_demux_005_src3_ready;                                                             // cmd_mux_026:sink0_ready -> cmd_demux_005:src3_ready
	wire   [27:0] cmd_demux_005_src3_channel;                                                           // cmd_demux_005:src3_channel -> cmd_mux_026:sink0_channel
	wire          cmd_demux_005_src3_startofpacket;                                                     // cmd_demux_005:src3_startofpacket -> cmd_mux_026:sink0_startofpacket
	wire          cmd_demux_005_src3_endofpacket;                                                       // cmd_demux_005:src3_endofpacket -> cmd_mux_026:sink0_endofpacket
	wire          cmd_demux_006_src0_valid;                                                             // cmd_demux_006:src0_valid -> cmd_mux_024:sink1_valid
	wire  [132:0] cmd_demux_006_src0_data;                                                              // cmd_demux_006:src0_data -> cmd_mux_024:sink1_data
	wire          cmd_demux_006_src0_ready;                                                             // cmd_mux_024:sink1_ready -> cmd_demux_006:src0_ready
	wire   [27:0] cmd_demux_006_src0_channel;                                                           // cmd_demux_006:src0_channel -> cmd_mux_024:sink1_channel
	wire          cmd_demux_006_src0_startofpacket;                                                     // cmd_demux_006:src0_startofpacket -> cmd_mux_024:sink1_startofpacket
	wire          cmd_demux_006_src0_endofpacket;                                                       // cmd_demux_006:src0_endofpacket -> cmd_mux_024:sink1_endofpacket
	wire          cmd_demux_006_src1_valid;                                                             // cmd_demux_006:src1_valid -> cmd_mux_025:sink1_valid
	wire  [132:0] cmd_demux_006_src1_data;                                                              // cmd_demux_006:src1_data -> cmd_mux_025:sink1_data
	wire          cmd_demux_006_src1_ready;                                                             // cmd_mux_025:sink1_ready -> cmd_demux_006:src1_ready
	wire   [27:0] cmd_demux_006_src1_channel;                                                           // cmd_demux_006:src1_channel -> cmd_mux_025:sink1_channel
	wire          cmd_demux_006_src1_startofpacket;                                                     // cmd_demux_006:src1_startofpacket -> cmd_mux_025:sink1_startofpacket
	wire          cmd_demux_006_src1_endofpacket;                                                       // cmd_demux_006:src1_endofpacket -> cmd_mux_025:sink1_endofpacket
	wire          cmd_demux_006_src2_valid;                                                             // cmd_demux_006:src2_valid -> cmd_mux_026:sink1_valid
	wire  [132:0] cmd_demux_006_src2_data;                                                              // cmd_demux_006:src2_data -> cmd_mux_026:sink1_data
	wire          cmd_demux_006_src2_ready;                                                             // cmd_mux_026:sink1_ready -> cmd_demux_006:src2_ready
	wire   [27:0] cmd_demux_006_src2_channel;                                                           // cmd_demux_006:src2_channel -> cmd_mux_026:sink1_channel
	wire          cmd_demux_006_src2_startofpacket;                                                     // cmd_demux_006:src2_startofpacket -> cmd_mux_026:sink1_startofpacket
	wire          cmd_demux_006_src2_endofpacket;                                                       // cmd_demux_006:src2_endofpacket -> cmd_mux_026:sink1_endofpacket
	wire          cmd_demux_006_src3_valid;                                                             // cmd_demux_006:src3_valid -> cmd_mux_027:sink1_valid
	wire  [132:0] cmd_demux_006_src3_data;                                                              // cmd_demux_006:src3_data -> cmd_mux_027:sink1_data
	wire          cmd_demux_006_src3_ready;                                                             // cmd_mux_027:sink1_ready -> cmd_demux_006:src3_ready
	wire   [27:0] cmd_demux_006_src3_channel;                                                           // cmd_demux_006:src3_channel -> cmd_mux_027:sink1_channel
	wire          cmd_demux_006_src3_startofpacket;                                                     // cmd_demux_006:src3_startofpacket -> cmd_mux_027:sink1_startofpacket
	wire          cmd_demux_006_src3_endofpacket;                                                       // cmd_demux_006:src3_endofpacket -> cmd_mux_027:sink1_endofpacket
	wire          cmd_demux_007_src0_valid;                                                             // cmd_demux_007:src0_valid -> cmd_mux_014:sink3_valid
	wire  [132:0] cmd_demux_007_src0_data;                                                              // cmd_demux_007:src0_data -> cmd_mux_014:sink3_data
	wire          cmd_demux_007_src0_ready;                                                             // cmd_mux_014:sink3_ready -> cmd_demux_007:src0_ready
	wire   [27:0] cmd_demux_007_src0_channel;                                                           // cmd_demux_007:src0_channel -> cmd_mux_014:sink3_channel
	wire          cmd_demux_007_src0_startofpacket;                                                     // cmd_demux_007:src0_startofpacket -> cmd_mux_014:sink3_startofpacket
	wire          cmd_demux_007_src0_endofpacket;                                                       // cmd_demux_007:src0_endofpacket -> cmd_mux_014:sink3_endofpacket
	wire          cmd_demux_007_src1_valid;                                                             // cmd_demux_007:src1_valid -> cmd_mux_015:sink3_valid
	wire  [132:0] cmd_demux_007_src1_data;                                                              // cmd_demux_007:src1_data -> cmd_mux_015:sink3_data
	wire          cmd_demux_007_src1_ready;                                                             // cmd_mux_015:sink3_ready -> cmd_demux_007:src1_ready
	wire   [27:0] cmd_demux_007_src1_channel;                                                           // cmd_demux_007:src1_channel -> cmd_mux_015:sink3_channel
	wire          cmd_demux_007_src1_startofpacket;                                                     // cmd_demux_007:src1_startofpacket -> cmd_mux_015:sink3_startofpacket
	wire          cmd_demux_007_src1_endofpacket;                                                       // cmd_demux_007:src1_endofpacket -> cmd_mux_015:sink3_endofpacket
	wire          cmd_demux_007_src2_valid;                                                             // cmd_demux_007:src2_valid -> cmd_mux_016:sink3_valid
	wire  [132:0] cmd_demux_007_src2_data;                                                              // cmd_demux_007:src2_data -> cmd_mux_016:sink3_data
	wire          cmd_demux_007_src2_ready;                                                             // cmd_mux_016:sink3_ready -> cmd_demux_007:src2_ready
	wire   [27:0] cmd_demux_007_src2_channel;                                                           // cmd_demux_007:src2_channel -> cmd_mux_016:sink3_channel
	wire          cmd_demux_007_src2_startofpacket;                                                     // cmd_demux_007:src2_startofpacket -> cmd_mux_016:sink3_startofpacket
	wire          cmd_demux_007_src2_endofpacket;                                                       // cmd_demux_007:src2_endofpacket -> cmd_mux_016:sink3_endofpacket
	wire          cmd_demux_008_src0_valid;                                                             // cmd_demux_008:src0_valid -> cmd_mux_014:sink4_valid
	wire  [132:0] cmd_demux_008_src0_data;                                                              // cmd_demux_008:src0_data -> cmd_mux_014:sink4_data
	wire          cmd_demux_008_src0_ready;                                                             // cmd_mux_014:sink4_ready -> cmd_demux_008:src0_ready
	wire   [27:0] cmd_demux_008_src0_channel;                                                           // cmd_demux_008:src0_channel -> cmd_mux_014:sink4_channel
	wire          cmd_demux_008_src0_startofpacket;                                                     // cmd_demux_008:src0_startofpacket -> cmd_mux_014:sink4_startofpacket
	wire          cmd_demux_008_src0_endofpacket;                                                       // cmd_demux_008:src0_endofpacket -> cmd_mux_014:sink4_endofpacket
	wire          cmd_demux_008_src1_valid;                                                             // cmd_demux_008:src1_valid -> cmd_mux_015:sink4_valid
	wire  [132:0] cmd_demux_008_src1_data;                                                              // cmd_demux_008:src1_data -> cmd_mux_015:sink4_data
	wire          cmd_demux_008_src1_ready;                                                             // cmd_mux_015:sink4_ready -> cmd_demux_008:src1_ready
	wire   [27:0] cmd_demux_008_src1_channel;                                                           // cmd_demux_008:src1_channel -> cmd_mux_015:sink4_channel
	wire          cmd_demux_008_src1_startofpacket;                                                     // cmd_demux_008:src1_startofpacket -> cmd_mux_015:sink4_startofpacket
	wire          cmd_demux_008_src1_endofpacket;                                                       // cmd_demux_008:src1_endofpacket -> cmd_mux_015:sink4_endofpacket
	wire          cmd_demux_008_src2_valid;                                                             // cmd_demux_008:src2_valid -> cmd_mux_016:sink4_valid
	wire  [132:0] cmd_demux_008_src2_data;                                                              // cmd_demux_008:src2_data -> cmd_mux_016:sink4_data
	wire          cmd_demux_008_src2_ready;                                                             // cmd_mux_016:sink4_ready -> cmd_demux_008:src2_ready
	wire   [27:0] cmd_demux_008_src2_channel;                                                           // cmd_demux_008:src2_channel -> cmd_mux_016:sink4_channel
	wire          cmd_demux_008_src2_startofpacket;                                                     // cmd_demux_008:src2_startofpacket -> cmd_mux_016:sink4_startofpacket
	wire          cmd_demux_008_src2_endofpacket;                                                       // cmd_demux_008:src2_endofpacket -> cmd_mux_016:sink4_endofpacket
	wire          rsp_demux_src0_valid;                                                                 // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [132:0] rsp_demux_src0_data;                                                                  // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                                 // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [27:0] rsp_demux_src0_channel;                                                               // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                         // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                           // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                                 // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [132:0] rsp_demux_src1_data;                                                                  // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                                                 // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire   [27:0] rsp_demux_src1_channel;                                                               // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                                         // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                           // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_src2_valid;                                                                 // rsp_demux:src2_valid -> rsp_mux_002:sink0_valid
	wire  [132:0] rsp_demux_src2_data;                                                                  // rsp_demux:src2_data -> rsp_mux_002:sink0_data
	wire          rsp_demux_src2_ready;                                                                 // rsp_mux_002:sink0_ready -> rsp_demux:src2_ready
	wire   [27:0] rsp_demux_src2_channel;                                                               // rsp_demux:src2_channel -> rsp_mux_002:sink0_channel
	wire          rsp_demux_src2_startofpacket;                                                         // rsp_demux:src2_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          rsp_demux_src2_endofpacket;                                                           // rsp_demux:src2_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_src3_valid;                                                                 // rsp_demux:src3_valid -> rsp_mux_003:sink0_valid
	wire  [132:0] rsp_demux_src3_data;                                                                  // rsp_demux:src3_data -> rsp_mux_003:sink0_data
	wire          rsp_demux_src3_ready;                                                                 // rsp_mux_003:sink0_ready -> rsp_demux:src3_ready
	wire   [27:0] rsp_demux_src3_channel;                                                               // rsp_demux:src3_channel -> rsp_mux_003:sink0_channel
	wire          rsp_demux_src3_startofpacket;                                                         // rsp_demux:src3_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          rsp_demux_src3_endofpacket;                                                           // rsp_demux:src3_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_demux_src4_valid;                                                                 // rsp_demux:src4_valid -> rsp_mux_004:sink0_valid
	wire  [132:0] rsp_demux_src4_data;                                                                  // rsp_demux:src4_data -> rsp_mux_004:sink0_data
	wire          rsp_demux_src4_ready;                                                                 // rsp_mux_004:sink0_ready -> rsp_demux:src4_ready
	wire   [27:0] rsp_demux_src4_channel;                                                               // rsp_demux:src4_channel -> rsp_mux_004:sink0_channel
	wire          rsp_demux_src4_startofpacket;                                                         // rsp_demux:src4_startofpacket -> rsp_mux_004:sink0_startofpacket
	wire          rsp_demux_src4_endofpacket;                                                           // rsp_demux:src4_endofpacket -> rsp_mux_004:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                             // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [132:0] rsp_demux_001_src0_data;                                                              // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                             // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [27:0] rsp_demux_001_src0_channel;                                                           // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                     // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                       // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                                             // rsp_demux_001:src1_valid -> rsp_mux_001:sink1_valid
	wire  [132:0] rsp_demux_001_src1_data;                                                              // rsp_demux_001:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_001_src1_ready;                                                             // rsp_mux_001:sink1_ready -> rsp_demux_001:src1_ready
	wire   [27:0] rsp_demux_001_src1_channel;                                                           // rsp_demux_001:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_001_src1_startofpacket;                                                     // rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                                       // rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_001_src2_valid;                                                             // rsp_demux_001:src2_valid -> rsp_mux_002:sink1_valid
	wire  [132:0] rsp_demux_001_src2_data;                                                              // rsp_demux_001:src2_data -> rsp_mux_002:sink1_data
	wire          rsp_demux_001_src2_ready;                                                             // rsp_mux_002:sink1_ready -> rsp_demux_001:src2_ready
	wire   [27:0] rsp_demux_001_src2_channel;                                                           // rsp_demux_001:src2_channel -> rsp_mux_002:sink1_channel
	wire          rsp_demux_001_src2_startofpacket;                                                     // rsp_demux_001:src2_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire          rsp_demux_001_src2_endofpacket;                                                       // rsp_demux_001:src2_endofpacket -> rsp_mux_002:sink1_endofpacket
	wire          rsp_demux_001_src3_valid;                                                             // rsp_demux_001:src3_valid -> rsp_mux_003:sink1_valid
	wire  [132:0] rsp_demux_001_src3_data;                                                              // rsp_demux_001:src3_data -> rsp_mux_003:sink1_data
	wire          rsp_demux_001_src3_ready;                                                             // rsp_mux_003:sink1_ready -> rsp_demux_001:src3_ready
	wire   [27:0] rsp_demux_001_src3_channel;                                                           // rsp_demux_001:src3_channel -> rsp_mux_003:sink1_channel
	wire          rsp_demux_001_src3_startofpacket;                                                     // rsp_demux_001:src3_startofpacket -> rsp_mux_003:sink1_startofpacket
	wire          rsp_demux_001_src3_endofpacket;                                                       // rsp_demux_001:src3_endofpacket -> rsp_mux_003:sink1_endofpacket
	wire          rsp_demux_001_src4_valid;                                                             // rsp_demux_001:src4_valid -> rsp_mux_004:sink1_valid
	wire  [132:0] rsp_demux_001_src4_data;                                                              // rsp_demux_001:src4_data -> rsp_mux_004:sink1_data
	wire          rsp_demux_001_src4_ready;                                                             // rsp_mux_004:sink1_ready -> rsp_demux_001:src4_ready
	wire   [27:0] rsp_demux_001_src4_channel;                                                           // rsp_demux_001:src4_channel -> rsp_mux_004:sink1_channel
	wire          rsp_demux_001_src4_startofpacket;                                                     // rsp_demux_001:src4_startofpacket -> rsp_mux_004:sink1_startofpacket
	wire          rsp_demux_001_src4_endofpacket;                                                       // rsp_demux_001:src4_endofpacket -> rsp_mux_004:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                             // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [132:0] rsp_demux_002_src0_data;                                                              // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                             // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [27:0] rsp_demux_002_src0_channel;                                                           // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                     // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                       // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                                             // rsp_demux_002:src1_valid -> rsp_mux_001:sink2_valid
	wire  [132:0] rsp_demux_002_src1_data;                                                              // rsp_demux_002:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_002_src1_ready;                                                             // rsp_mux_001:sink2_ready -> rsp_demux_002:src1_ready
	wire   [27:0] rsp_demux_002_src1_channel;                                                           // rsp_demux_002:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_002_src1_startofpacket;                                                     // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                                       // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_002_src2_valid;                                                             // rsp_demux_002:src2_valid -> rsp_mux_002:sink2_valid
	wire  [132:0] rsp_demux_002_src2_data;                                                              // rsp_demux_002:src2_data -> rsp_mux_002:sink2_data
	wire          rsp_demux_002_src2_ready;                                                             // rsp_mux_002:sink2_ready -> rsp_demux_002:src2_ready
	wire   [27:0] rsp_demux_002_src2_channel;                                                           // rsp_demux_002:src2_channel -> rsp_mux_002:sink2_channel
	wire          rsp_demux_002_src2_startofpacket;                                                     // rsp_demux_002:src2_startofpacket -> rsp_mux_002:sink2_startofpacket
	wire          rsp_demux_002_src2_endofpacket;                                                       // rsp_demux_002:src2_endofpacket -> rsp_mux_002:sink2_endofpacket
	wire          rsp_demux_002_src3_valid;                                                             // rsp_demux_002:src3_valid -> rsp_mux_003:sink2_valid
	wire  [132:0] rsp_demux_002_src3_data;                                                              // rsp_demux_002:src3_data -> rsp_mux_003:sink2_data
	wire          rsp_demux_002_src3_ready;                                                             // rsp_mux_003:sink2_ready -> rsp_demux_002:src3_ready
	wire   [27:0] rsp_demux_002_src3_channel;                                                           // rsp_demux_002:src3_channel -> rsp_mux_003:sink2_channel
	wire          rsp_demux_002_src3_startofpacket;                                                     // rsp_demux_002:src3_startofpacket -> rsp_mux_003:sink2_startofpacket
	wire          rsp_demux_002_src3_endofpacket;                                                       // rsp_demux_002:src3_endofpacket -> rsp_mux_003:sink2_endofpacket
	wire          rsp_demux_002_src4_valid;                                                             // rsp_demux_002:src4_valid -> rsp_mux_004:sink2_valid
	wire  [132:0] rsp_demux_002_src4_data;                                                              // rsp_demux_002:src4_data -> rsp_mux_004:sink2_data
	wire          rsp_demux_002_src4_ready;                                                             // rsp_mux_004:sink2_ready -> rsp_demux_002:src4_ready
	wire   [27:0] rsp_demux_002_src4_channel;                                                           // rsp_demux_002:src4_channel -> rsp_mux_004:sink2_channel
	wire          rsp_demux_002_src4_startofpacket;                                                     // rsp_demux_002:src4_startofpacket -> rsp_mux_004:sink2_startofpacket
	wire          rsp_demux_002_src4_endofpacket;                                                       // rsp_demux_002:src4_endofpacket -> rsp_mux_004:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                             // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [132:0] rsp_demux_003_src0_data;                                                              // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                             // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [27:0] rsp_demux_003_src0_channel;                                                           // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                                     // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                       // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                                             // rsp_demux_003:src1_valid -> rsp_mux_001:sink3_valid
	wire  [132:0] rsp_demux_003_src1_data;                                                              // rsp_demux_003:src1_data -> rsp_mux_001:sink3_data
	wire          rsp_demux_003_src1_ready;                                                             // rsp_mux_001:sink3_ready -> rsp_demux_003:src1_ready
	wire   [27:0] rsp_demux_003_src1_channel;                                                           // rsp_demux_003:src1_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_003_src1_startofpacket;                                                     // rsp_demux_003:src1_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                                       // rsp_demux_003:src1_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_003_src2_valid;                                                             // rsp_demux_003:src2_valid -> rsp_mux_002:sink3_valid
	wire  [132:0] rsp_demux_003_src2_data;                                                              // rsp_demux_003:src2_data -> rsp_mux_002:sink3_data
	wire          rsp_demux_003_src2_ready;                                                             // rsp_mux_002:sink3_ready -> rsp_demux_003:src2_ready
	wire   [27:0] rsp_demux_003_src2_channel;                                                           // rsp_demux_003:src2_channel -> rsp_mux_002:sink3_channel
	wire          rsp_demux_003_src2_startofpacket;                                                     // rsp_demux_003:src2_startofpacket -> rsp_mux_002:sink3_startofpacket
	wire          rsp_demux_003_src2_endofpacket;                                                       // rsp_demux_003:src2_endofpacket -> rsp_mux_002:sink3_endofpacket
	wire          rsp_demux_003_src3_valid;                                                             // rsp_demux_003:src3_valid -> rsp_mux_003:sink3_valid
	wire  [132:0] rsp_demux_003_src3_data;                                                              // rsp_demux_003:src3_data -> rsp_mux_003:sink3_data
	wire          rsp_demux_003_src3_ready;                                                             // rsp_mux_003:sink3_ready -> rsp_demux_003:src3_ready
	wire   [27:0] rsp_demux_003_src3_channel;                                                           // rsp_demux_003:src3_channel -> rsp_mux_003:sink3_channel
	wire          rsp_demux_003_src3_startofpacket;                                                     // rsp_demux_003:src3_startofpacket -> rsp_mux_003:sink3_startofpacket
	wire          rsp_demux_003_src3_endofpacket;                                                       // rsp_demux_003:src3_endofpacket -> rsp_mux_003:sink3_endofpacket
	wire          rsp_demux_003_src4_valid;                                                             // rsp_demux_003:src4_valid -> rsp_mux_004:sink3_valid
	wire  [132:0] rsp_demux_003_src4_data;                                                              // rsp_demux_003:src4_data -> rsp_mux_004:sink3_data
	wire          rsp_demux_003_src4_ready;                                                             // rsp_mux_004:sink3_ready -> rsp_demux_003:src4_ready
	wire   [27:0] rsp_demux_003_src4_channel;                                                           // rsp_demux_003:src4_channel -> rsp_mux_004:sink3_channel
	wire          rsp_demux_003_src4_startofpacket;                                                     // rsp_demux_003:src4_startofpacket -> rsp_mux_004:sink3_startofpacket
	wire          rsp_demux_003_src4_endofpacket;                                                       // rsp_demux_003:src4_endofpacket -> rsp_mux_004:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                             // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [132:0] rsp_demux_004_src0_data;                                                              // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                                             // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire   [27:0] rsp_demux_004_src0_channel;                                                           // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                                     // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                       // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                                             // rsp_demux_004:src1_valid -> rsp_mux_001:sink4_valid
	wire  [132:0] rsp_demux_004_src1_data;                                                              // rsp_demux_004:src1_data -> rsp_mux_001:sink4_data
	wire          rsp_demux_004_src1_ready;                                                             // rsp_mux_001:sink4_ready -> rsp_demux_004:src1_ready
	wire   [27:0] rsp_demux_004_src1_channel;                                                           // rsp_demux_004:src1_channel -> rsp_mux_001:sink4_channel
	wire          rsp_demux_004_src1_startofpacket;                                                     // rsp_demux_004:src1_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                                       // rsp_demux_004:src1_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_004_src2_valid;                                                             // rsp_demux_004:src2_valid -> rsp_mux_002:sink4_valid
	wire  [132:0] rsp_demux_004_src2_data;                                                              // rsp_demux_004:src2_data -> rsp_mux_002:sink4_data
	wire          rsp_demux_004_src2_ready;                                                             // rsp_mux_002:sink4_ready -> rsp_demux_004:src2_ready
	wire   [27:0] rsp_demux_004_src2_channel;                                                           // rsp_demux_004:src2_channel -> rsp_mux_002:sink4_channel
	wire          rsp_demux_004_src2_startofpacket;                                                     // rsp_demux_004:src2_startofpacket -> rsp_mux_002:sink4_startofpacket
	wire          rsp_demux_004_src2_endofpacket;                                                       // rsp_demux_004:src2_endofpacket -> rsp_mux_002:sink4_endofpacket
	wire          rsp_demux_004_src3_valid;                                                             // rsp_demux_004:src3_valid -> rsp_mux_003:sink4_valid
	wire  [132:0] rsp_demux_004_src3_data;                                                              // rsp_demux_004:src3_data -> rsp_mux_003:sink4_data
	wire          rsp_demux_004_src3_ready;                                                             // rsp_mux_003:sink4_ready -> rsp_demux_004:src3_ready
	wire   [27:0] rsp_demux_004_src3_channel;                                                           // rsp_demux_004:src3_channel -> rsp_mux_003:sink4_channel
	wire          rsp_demux_004_src3_startofpacket;                                                     // rsp_demux_004:src3_startofpacket -> rsp_mux_003:sink4_startofpacket
	wire          rsp_demux_004_src3_endofpacket;                                                       // rsp_demux_004:src3_endofpacket -> rsp_mux_003:sink4_endofpacket
	wire          rsp_demux_004_src4_valid;                                                             // rsp_demux_004:src4_valid -> rsp_mux_004:sink4_valid
	wire  [132:0] rsp_demux_004_src4_data;                                                              // rsp_demux_004:src4_data -> rsp_mux_004:sink4_data
	wire          rsp_demux_004_src4_ready;                                                             // rsp_mux_004:sink4_ready -> rsp_demux_004:src4_ready
	wire   [27:0] rsp_demux_004_src4_channel;                                                           // rsp_demux_004:src4_channel -> rsp_mux_004:sink4_channel
	wire          rsp_demux_004_src4_startofpacket;                                                     // rsp_demux_004:src4_startofpacket -> rsp_mux_004:sink4_startofpacket
	wire          rsp_demux_004_src4_endofpacket;                                                       // rsp_demux_004:src4_endofpacket -> rsp_mux_004:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                                             // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [132:0] rsp_demux_005_src0_data;                                                              // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                                             // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire   [27:0] rsp_demux_005_src0_channel;                                                           // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                                     // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                       // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_005_src1_valid;                                                             // rsp_demux_005:src1_valid -> rsp_mux_001:sink5_valid
	wire  [132:0] rsp_demux_005_src1_data;                                                              // rsp_demux_005:src1_data -> rsp_mux_001:sink5_data
	wire          rsp_demux_005_src1_ready;                                                             // rsp_mux_001:sink5_ready -> rsp_demux_005:src1_ready
	wire   [27:0] rsp_demux_005_src1_channel;                                                           // rsp_demux_005:src1_channel -> rsp_mux_001:sink5_channel
	wire          rsp_demux_005_src1_startofpacket;                                                     // rsp_demux_005:src1_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire          rsp_demux_005_src1_endofpacket;                                                       // rsp_demux_005:src1_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire          rsp_demux_005_src2_valid;                                                             // rsp_demux_005:src2_valid -> rsp_mux_002:sink5_valid
	wire  [132:0] rsp_demux_005_src2_data;                                                              // rsp_demux_005:src2_data -> rsp_mux_002:sink5_data
	wire          rsp_demux_005_src2_ready;                                                             // rsp_mux_002:sink5_ready -> rsp_demux_005:src2_ready
	wire   [27:0] rsp_demux_005_src2_channel;                                                           // rsp_demux_005:src2_channel -> rsp_mux_002:sink5_channel
	wire          rsp_demux_005_src2_startofpacket;                                                     // rsp_demux_005:src2_startofpacket -> rsp_mux_002:sink5_startofpacket
	wire          rsp_demux_005_src2_endofpacket;                                                       // rsp_demux_005:src2_endofpacket -> rsp_mux_002:sink5_endofpacket
	wire          rsp_demux_005_src3_valid;                                                             // rsp_demux_005:src3_valid -> rsp_mux_003:sink5_valid
	wire  [132:0] rsp_demux_005_src3_data;                                                              // rsp_demux_005:src3_data -> rsp_mux_003:sink5_data
	wire          rsp_demux_005_src3_ready;                                                             // rsp_mux_003:sink5_ready -> rsp_demux_005:src3_ready
	wire   [27:0] rsp_demux_005_src3_channel;                                                           // rsp_demux_005:src3_channel -> rsp_mux_003:sink5_channel
	wire          rsp_demux_005_src3_startofpacket;                                                     // rsp_demux_005:src3_startofpacket -> rsp_mux_003:sink5_startofpacket
	wire          rsp_demux_005_src3_endofpacket;                                                       // rsp_demux_005:src3_endofpacket -> rsp_mux_003:sink5_endofpacket
	wire          rsp_demux_005_src4_valid;                                                             // rsp_demux_005:src4_valid -> rsp_mux_004:sink5_valid
	wire  [132:0] rsp_demux_005_src4_data;                                                              // rsp_demux_005:src4_data -> rsp_mux_004:sink5_data
	wire          rsp_demux_005_src4_ready;                                                             // rsp_mux_004:sink5_ready -> rsp_demux_005:src4_ready
	wire   [27:0] rsp_demux_005_src4_channel;                                                           // rsp_demux_005:src4_channel -> rsp_mux_004:sink5_channel
	wire          rsp_demux_005_src4_startofpacket;                                                     // rsp_demux_005:src4_startofpacket -> rsp_mux_004:sink5_startofpacket
	wire          rsp_demux_005_src4_endofpacket;                                                       // rsp_demux_005:src4_endofpacket -> rsp_mux_004:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                                             // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [132:0] rsp_demux_006_src0_data;                                                              // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire          rsp_demux_006_src0_ready;                                                             // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire   [27:0] rsp_demux_006_src0_channel;                                                           // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                                     // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                       // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_006_src1_valid;                                                             // rsp_demux_006:src1_valid -> rsp_mux_001:sink6_valid
	wire  [132:0] rsp_demux_006_src1_data;                                                              // rsp_demux_006:src1_data -> rsp_mux_001:sink6_data
	wire          rsp_demux_006_src1_ready;                                                             // rsp_mux_001:sink6_ready -> rsp_demux_006:src1_ready
	wire   [27:0] rsp_demux_006_src1_channel;                                                           // rsp_demux_006:src1_channel -> rsp_mux_001:sink6_channel
	wire          rsp_demux_006_src1_startofpacket;                                                     // rsp_demux_006:src1_startofpacket -> rsp_mux_001:sink6_startofpacket
	wire          rsp_demux_006_src1_endofpacket;                                                       // rsp_demux_006:src1_endofpacket -> rsp_mux_001:sink6_endofpacket
	wire          rsp_demux_006_src2_valid;                                                             // rsp_demux_006:src2_valid -> rsp_mux_002:sink6_valid
	wire  [132:0] rsp_demux_006_src2_data;                                                              // rsp_demux_006:src2_data -> rsp_mux_002:sink6_data
	wire          rsp_demux_006_src2_ready;                                                             // rsp_mux_002:sink6_ready -> rsp_demux_006:src2_ready
	wire   [27:0] rsp_demux_006_src2_channel;                                                           // rsp_demux_006:src2_channel -> rsp_mux_002:sink6_channel
	wire          rsp_demux_006_src2_startofpacket;                                                     // rsp_demux_006:src2_startofpacket -> rsp_mux_002:sink6_startofpacket
	wire          rsp_demux_006_src2_endofpacket;                                                       // rsp_demux_006:src2_endofpacket -> rsp_mux_002:sink6_endofpacket
	wire          rsp_demux_006_src3_valid;                                                             // rsp_demux_006:src3_valid -> rsp_mux_003:sink6_valid
	wire  [132:0] rsp_demux_006_src3_data;                                                              // rsp_demux_006:src3_data -> rsp_mux_003:sink6_data
	wire          rsp_demux_006_src3_ready;                                                             // rsp_mux_003:sink6_ready -> rsp_demux_006:src3_ready
	wire   [27:0] rsp_demux_006_src3_channel;                                                           // rsp_demux_006:src3_channel -> rsp_mux_003:sink6_channel
	wire          rsp_demux_006_src3_startofpacket;                                                     // rsp_demux_006:src3_startofpacket -> rsp_mux_003:sink6_startofpacket
	wire          rsp_demux_006_src3_endofpacket;                                                       // rsp_demux_006:src3_endofpacket -> rsp_mux_003:sink6_endofpacket
	wire          rsp_demux_006_src4_valid;                                                             // rsp_demux_006:src4_valid -> rsp_mux_004:sink6_valid
	wire  [132:0] rsp_demux_006_src4_data;                                                              // rsp_demux_006:src4_data -> rsp_mux_004:sink6_data
	wire          rsp_demux_006_src4_ready;                                                             // rsp_mux_004:sink6_ready -> rsp_demux_006:src4_ready
	wire   [27:0] rsp_demux_006_src4_channel;                                                           // rsp_demux_006:src4_channel -> rsp_mux_004:sink6_channel
	wire          rsp_demux_006_src4_startofpacket;                                                     // rsp_demux_006:src4_startofpacket -> rsp_mux_004:sink6_startofpacket
	wire          rsp_demux_006_src4_endofpacket;                                                       // rsp_demux_006:src4_endofpacket -> rsp_mux_004:sink6_endofpacket
	wire          rsp_demux_007_src0_valid;                                                             // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [132:0] rsp_demux_007_src0_data;                                                              // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire          rsp_demux_007_src0_ready;                                                             // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire   [27:0] rsp_demux_007_src0_channel;                                                           // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                                     // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                       // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_007_src1_valid;                                                             // rsp_demux_007:src1_valid -> rsp_mux_001:sink7_valid
	wire  [132:0] rsp_demux_007_src1_data;                                                              // rsp_demux_007:src1_data -> rsp_mux_001:sink7_data
	wire          rsp_demux_007_src1_ready;                                                             // rsp_mux_001:sink7_ready -> rsp_demux_007:src1_ready
	wire   [27:0] rsp_demux_007_src1_channel;                                                           // rsp_demux_007:src1_channel -> rsp_mux_001:sink7_channel
	wire          rsp_demux_007_src1_startofpacket;                                                     // rsp_demux_007:src1_startofpacket -> rsp_mux_001:sink7_startofpacket
	wire          rsp_demux_007_src1_endofpacket;                                                       // rsp_demux_007:src1_endofpacket -> rsp_mux_001:sink7_endofpacket
	wire          rsp_demux_007_src2_valid;                                                             // rsp_demux_007:src2_valid -> rsp_mux_002:sink7_valid
	wire  [132:0] rsp_demux_007_src2_data;                                                              // rsp_demux_007:src2_data -> rsp_mux_002:sink7_data
	wire          rsp_demux_007_src2_ready;                                                             // rsp_mux_002:sink7_ready -> rsp_demux_007:src2_ready
	wire   [27:0] rsp_demux_007_src2_channel;                                                           // rsp_demux_007:src2_channel -> rsp_mux_002:sink7_channel
	wire          rsp_demux_007_src2_startofpacket;                                                     // rsp_demux_007:src2_startofpacket -> rsp_mux_002:sink7_startofpacket
	wire          rsp_demux_007_src2_endofpacket;                                                       // rsp_demux_007:src2_endofpacket -> rsp_mux_002:sink7_endofpacket
	wire          rsp_demux_007_src3_valid;                                                             // rsp_demux_007:src3_valid -> rsp_mux_003:sink7_valid
	wire  [132:0] rsp_demux_007_src3_data;                                                              // rsp_demux_007:src3_data -> rsp_mux_003:sink7_data
	wire          rsp_demux_007_src3_ready;                                                             // rsp_mux_003:sink7_ready -> rsp_demux_007:src3_ready
	wire   [27:0] rsp_demux_007_src3_channel;                                                           // rsp_demux_007:src3_channel -> rsp_mux_003:sink7_channel
	wire          rsp_demux_007_src3_startofpacket;                                                     // rsp_demux_007:src3_startofpacket -> rsp_mux_003:sink7_startofpacket
	wire          rsp_demux_007_src3_endofpacket;                                                       // rsp_demux_007:src3_endofpacket -> rsp_mux_003:sink7_endofpacket
	wire          rsp_demux_007_src4_valid;                                                             // rsp_demux_007:src4_valid -> rsp_mux_004:sink7_valid
	wire  [132:0] rsp_demux_007_src4_data;                                                              // rsp_demux_007:src4_data -> rsp_mux_004:sink7_data
	wire          rsp_demux_007_src4_ready;                                                             // rsp_mux_004:sink7_ready -> rsp_demux_007:src4_ready
	wire   [27:0] rsp_demux_007_src4_channel;                                                           // rsp_demux_007:src4_channel -> rsp_mux_004:sink7_channel
	wire          rsp_demux_007_src4_startofpacket;                                                     // rsp_demux_007:src4_startofpacket -> rsp_mux_004:sink7_startofpacket
	wire          rsp_demux_007_src4_endofpacket;                                                       // rsp_demux_007:src4_endofpacket -> rsp_mux_004:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                                             // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [132:0] rsp_demux_008_src0_data;                                                              // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire          rsp_demux_008_src0_ready;                                                             // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire   [27:0] rsp_demux_008_src0_channel;                                                           // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                                                     // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                       // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_008_src1_valid;                                                             // rsp_demux_008:src1_valid -> rsp_mux_001:sink8_valid
	wire  [132:0] rsp_demux_008_src1_data;                                                              // rsp_demux_008:src1_data -> rsp_mux_001:sink8_data
	wire          rsp_demux_008_src1_ready;                                                             // rsp_mux_001:sink8_ready -> rsp_demux_008:src1_ready
	wire   [27:0] rsp_demux_008_src1_channel;                                                           // rsp_demux_008:src1_channel -> rsp_mux_001:sink8_channel
	wire          rsp_demux_008_src1_startofpacket;                                                     // rsp_demux_008:src1_startofpacket -> rsp_mux_001:sink8_startofpacket
	wire          rsp_demux_008_src1_endofpacket;                                                       // rsp_demux_008:src1_endofpacket -> rsp_mux_001:sink8_endofpacket
	wire          rsp_demux_008_src2_valid;                                                             // rsp_demux_008:src2_valid -> rsp_mux_002:sink8_valid
	wire  [132:0] rsp_demux_008_src2_data;                                                              // rsp_demux_008:src2_data -> rsp_mux_002:sink8_data
	wire          rsp_demux_008_src2_ready;                                                             // rsp_mux_002:sink8_ready -> rsp_demux_008:src2_ready
	wire   [27:0] rsp_demux_008_src2_channel;                                                           // rsp_demux_008:src2_channel -> rsp_mux_002:sink8_channel
	wire          rsp_demux_008_src2_startofpacket;                                                     // rsp_demux_008:src2_startofpacket -> rsp_mux_002:sink8_startofpacket
	wire          rsp_demux_008_src2_endofpacket;                                                       // rsp_demux_008:src2_endofpacket -> rsp_mux_002:sink8_endofpacket
	wire          rsp_demux_008_src3_valid;                                                             // rsp_demux_008:src3_valid -> rsp_mux_003:sink8_valid
	wire  [132:0] rsp_demux_008_src3_data;                                                              // rsp_demux_008:src3_data -> rsp_mux_003:sink8_data
	wire          rsp_demux_008_src3_ready;                                                             // rsp_mux_003:sink8_ready -> rsp_demux_008:src3_ready
	wire   [27:0] rsp_demux_008_src3_channel;                                                           // rsp_demux_008:src3_channel -> rsp_mux_003:sink8_channel
	wire          rsp_demux_008_src3_startofpacket;                                                     // rsp_demux_008:src3_startofpacket -> rsp_mux_003:sink8_startofpacket
	wire          rsp_demux_008_src3_endofpacket;                                                       // rsp_demux_008:src3_endofpacket -> rsp_mux_003:sink8_endofpacket
	wire          rsp_demux_008_src4_valid;                                                             // rsp_demux_008:src4_valid -> rsp_mux_004:sink8_valid
	wire  [132:0] rsp_demux_008_src4_data;                                                              // rsp_demux_008:src4_data -> rsp_mux_004:sink8_data
	wire          rsp_demux_008_src4_ready;                                                             // rsp_mux_004:sink8_ready -> rsp_demux_008:src4_ready
	wire   [27:0] rsp_demux_008_src4_channel;                                                           // rsp_demux_008:src4_channel -> rsp_mux_004:sink8_channel
	wire          rsp_demux_008_src4_startofpacket;                                                     // rsp_demux_008:src4_startofpacket -> rsp_mux_004:sink8_startofpacket
	wire          rsp_demux_008_src4_endofpacket;                                                       // rsp_demux_008:src4_endofpacket -> rsp_mux_004:sink8_endofpacket
	wire          rsp_demux_009_src0_valid;                                                             // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire  [132:0] rsp_demux_009_src0_data;                                                              // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire          rsp_demux_009_src0_ready;                                                             // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire   [27:0] rsp_demux_009_src0_channel;                                                           // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire          rsp_demux_009_src0_startofpacket;                                                     // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                       // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire          rsp_demux_009_src1_valid;                                                             // rsp_demux_009:src1_valid -> rsp_mux_001:sink9_valid
	wire  [132:0] rsp_demux_009_src1_data;                                                              // rsp_demux_009:src1_data -> rsp_mux_001:sink9_data
	wire          rsp_demux_009_src1_ready;                                                             // rsp_mux_001:sink9_ready -> rsp_demux_009:src1_ready
	wire   [27:0] rsp_demux_009_src1_channel;                                                           // rsp_demux_009:src1_channel -> rsp_mux_001:sink9_channel
	wire          rsp_demux_009_src1_startofpacket;                                                     // rsp_demux_009:src1_startofpacket -> rsp_mux_001:sink9_startofpacket
	wire          rsp_demux_009_src1_endofpacket;                                                       // rsp_demux_009:src1_endofpacket -> rsp_mux_001:sink9_endofpacket
	wire          rsp_demux_009_src2_valid;                                                             // rsp_demux_009:src2_valid -> rsp_mux_002:sink9_valid
	wire  [132:0] rsp_demux_009_src2_data;                                                              // rsp_demux_009:src2_data -> rsp_mux_002:sink9_data
	wire          rsp_demux_009_src2_ready;                                                             // rsp_mux_002:sink9_ready -> rsp_demux_009:src2_ready
	wire   [27:0] rsp_demux_009_src2_channel;                                                           // rsp_demux_009:src2_channel -> rsp_mux_002:sink9_channel
	wire          rsp_demux_009_src2_startofpacket;                                                     // rsp_demux_009:src2_startofpacket -> rsp_mux_002:sink9_startofpacket
	wire          rsp_demux_009_src2_endofpacket;                                                       // rsp_demux_009:src2_endofpacket -> rsp_mux_002:sink9_endofpacket
	wire          rsp_demux_009_src3_valid;                                                             // rsp_demux_009:src3_valid -> rsp_mux_004:sink9_valid
	wire  [132:0] rsp_demux_009_src3_data;                                                              // rsp_demux_009:src3_data -> rsp_mux_004:sink9_data
	wire          rsp_demux_009_src3_ready;                                                             // rsp_mux_004:sink9_ready -> rsp_demux_009:src3_ready
	wire   [27:0] rsp_demux_009_src3_channel;                                                           // rsp_demux_009:src3_channel -> rsp_mux_004:sink9_channel
	wire          rsp_demux_009_src3_startofpacket;                                                     // rsp_demux_009:src3_startofpacket -> rsp_mux_004:sink9_startofpacket
	wire          rsp_demux_009_src3_endofpacket;                                                       // rsp_demux_009:src3_endofpacket -> rsp_mux_004:sink9_endofpacket
	wire          rsp_demux_010_src0_valid;                                                             // rsp_demux_010:src0_valid -> rsp_mux:sink10_valid
	wire  [132:0] rsp_demux_010_src0_data;                                                              // rsp_demux_010:src0_data -> rsp_mux:sink10_data
	wire          rsp_demux_010_src0_ready;                                                             // rsp_mux:sink10_ready -> rsp_demux_010:src0_ready
	wire   [27:0] rsp_demux_010_src0_channel;                                                           // rsp_demux_010:src0_channel -> rsp_mux:sink10_channel
	wire          rsp_demux_010_src0_startofpacket;                                                     // rsp_demux_010:src0_startofpacket -> rsp_mux:sink10_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                                       // rsp_demux_010:src0_endofpacket -> rsp_mux:sink10_endofpacket
	wire          rsp_demux_010_src1_valid;                                                             // rsp_demux_010:src1_valid -> rsp_mux_001:sink10_valid
	wire  [132:0] rsp_demux_010_src1_data;                                                              // rsp_demux_010:src1_data -> rsp_mux_001:sink10_data
	wire          rsp_demux_010_src1_ready;                                                             // rsp_mux_001:sink10_ready -> rsp_demux_010:src1_ready
	wire   [27:0] rsp_demux_010_src1_channel;                                                           // rsp_demux_010:src1_channel -> rsp_mux_001:sink10_channel
	wire          rsp_demux_010_src1_startofpacket;                                                     // rsp_demux_010:src1_startofpacket -> rsp_mux_001:sink10_startofpacket
	wire          rsp_demux_010_src1_endofpacket;                                                       // rsp_demux_010:src1_endofpacket -> rsp_mux_001:sink10_endofpacket
	wire          rsp_demux_010_src2_valid;                                                             // rsp_demux_010:src2_valid -> rsp_mux_002:sink10_valid
	wire  [132:0] rsp_demux_010_src2_data;                                                              // rsp_demux_010:src2_data -> rsp_mux_002:sink10_data
	wire          rsp_demux_010_src2_ready;                                                             // rsp_mux_002:sink10_ready -> rsp_demux_010:src2_ready
	wire   [27:0] rsp_demux_010_src2_channel;                                                           // rsp_demux_010:src2_channel -> rsp_mux_002:sink10_channel
	wire          rsp_demux_010_src2_startofpacket;                                                     // rsp_demux_010:src2_startofpacket -> rsp_mux_002:sink10_startofpacket
	wire          rsp_demux_010_src2_endofpacket;                                                       // rsp_demux_010:src2_endofpacket -> rsp_mux_002:sink10_endofpacket
	wire          rsp_demux_010_src3_valid;                                                             // rsp_demux_010:src3_valid -> rsp_mux_004:sink10_valid
	wire  [132:0] rsp_demux_010_src3_data;                                                              // rsp_demux_010:src3_data -> rsp_mux_004:sink10_data
	wire          rsp_demux_010_src3_ready;                                                             // rsp_mux_004:sink10_ready -> rsp_demux_010:src3_ready
	wire   [27:0] rsp_demux_010_src3_channel;                                                           // rsp_demux_010:src3_channel -> rsp_mux_004:sink10_channel
	wire          rsp_demux_010_src3_startofpacket;                                                     // rsp_demux_010:src3_startofpacket -> rsp_mux_004:sink10_startofpacket
	wire          rsp_demux_010_src3_endofpacket;                                                       // rsp_demux_010:src3_endofpacket -> rsp_mux_004:sink10_endofpacket
	wire          rsp_demux_011_src0_valid;                                                             // rsp_demux_011:src0_valid -> rsp_mux:sink11_valid
	wire  [132:0] rsp_demux_011_src0_data;                                                              // rsp_demux_011:src0_data -> rsp_mux:sink11_data
	wire          rsp_demux_011_src0_ready;                                                             // rsp_mux:sink11_ready -> rsp_demux_011:src0_ready
	wire   [27:0] rsp_demux_011_src0_channel;                                                           // rsp_demux_011:src0_channel -> rsp_mux:sink11_channel
	wire          rsp_demux_011_src0_startofpacket;                                                     // rsp_demux_011:src0_startofpacket -> rsp_mux:sink11_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                                       // rsp_demux_011:src0_endofpacket -> rsp_mux:sink11_endofpacket
	wire          rsp_demux_011_src1_valid;                                                             // rsp_demux_011:src1_valid -> rsp_mux_001:sink11_valid
	wire  [132:0] rsp_demux_011_src1_data;                                                              // rsp_demux_011:src1_data -> rsp_mux_001:sink11_data
	wire          rsp_demux_011_src1_ready;                                                             // rsp_mux_001:sink11_ready -> rsp_demux_011:src1_ready
	wire   [27:0] rsp_demux_011_src1_channel;                                                           // rsp_demux_011:src1_channel -> rsp_mux_001:sink11_channel
	wire          rsp_demux_011_src1_startofpacket;                                                     // rsp_demux_011:src1_startofpacket -> rsp_mux_001:sink11_startofpacket
	wire          rsp_demux_011_src1_endofpacket;                                                       // rsp_demux_011:src1_endofpacket -> rsp_mux_001:sink11_endofpacket
	wire          rsp_demux_012_src0_valid;                                                             // rsp_demux_012:src0_valid -> rsp_mux:sink12_valid
	wire  [132:0] rsp_demux_012_src0_data;                                                              // rsp_demux_012:src0_data -> rsp_mux:sink12_data
	wire          rsp_demux_012_src0_ready;                                                             // rsp_mux:sink12_ready -> rsp_demux_012:src0_ready
	wire   [27:0] rsp_demux_012_src0_channel;                                                           // rsp_demux_012:src0_channel -> rsp_mux:sink12_channel
	wire          rsp_demux_012_src0_startofpacket;                                                     // rsp_demux_012:src0_startofpacket -> rsp_mux:sink12_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                                                       // rsp_demux_012:src0_endofpacket -> rsp_mux:sink12_endofpacket
	wire          rsp_demux_012_src1_valid;                                                             // rsp_demux_012:src1_valid -> rsp_mux_001:sink12_valid
	wire  [132:0] rsp_demux_012_src1_data;                                                              // rsp_demux_012:src1_data -> rsp_mux_001:sink12_data
	wire          rsp_demux_012_src1_ready;                                                             // rsp_mux_001:sink12_ready -> rsp_demux_012:src1_ready
	wire   [27:0] rsp_demux_012_src1_channel;                                                           // rsp_demux_012:src1_channel -> rsp_mux_001:sink12_channel
	wire          rsp_demux_012_src1_startofpacket;                                                     // rsp_demux_012:src1_startofpacket -> rsp_mux_001:sink12_startofpacket
	wire          rsp_demux_012_src1_endofpacket;                                                       // rsp_demux_012:src1_endofpacket -> rsp_mux_001:sink12_endofpacket
	wire          rsp_demux_013_src0_valid;                                                             // rsp_demux_013:src0_valid -> rsp_mux_002:sink11_valid
	wire  [132:0] rsp_demux_013_src0_data;                                                              // rsp_demux_013:src0_data -> rsp_mux_002:sink11_data
	wire          rsp_demux_013_src0_ready;                                                             // rsp_mux_002:sink11_ready -> rsp_demux_013:src0_ready
	wire   [27:0] rsp_demux_013_src0_channel;                                                           // rsp_demux_013:src0_channel -> rsp_mux_002:sink11_channel
	wire          rsp_demux_013_src0_startofpacket;                                                     // rsp_demux_013:src0_startofpacket -> rsp_mux_002:sink11_startofpacket
	wire          rsp_demux_013_src0_endofpacket;                                                       // rsp_demux_013:src0_endofpacket -> rsp_mux_002:sink11_endofpacket
	wire          rsp_demux_013_src1_valid;                                                             // rsp_demux_013:src1_valid -> rsp_mux_004:sink11_valid
	wire  [132:0] rsp_demux_013_src1_data;                                                              // rsp_demux_013:src1_data -> rsp_mux_004:sink11_data
	wire          rsp_demux_013_src1_ready;                                                             // rsp_mux_004:sink11_ready -> rsp_demux_013:src1_ready
	wire   [27:0] rsp_demux_013_src1_channel;                                                           // rsp_demux_013:src1_channel -> rsp_mux_004:sink11_channel
	wire          rsp_demux_013_src1_startofpacket;                                                     // rsp_demux_013:src1_startofpacket -> rsp_mux_004:sink11_startofpacket
	wire          rsp_demux_013_src1_endofpacket;                                                       // rsp_demux_013:src1_endofpacket -> rsp_mux_004:sink11_endofpacket
	wire          rsp_demux_014_src0_valid;                                                             // rsp_demux_014:src0_valid -> rsp_mux_002:sink12_valid
	wire  [132:0] rsp_demux_014_src0_data;                                                              // rsp_demux_014:src0_data -> rsp_mux_002:sink12_data
	wire          rsp_demux_014_src0_ready;                                                             // rsp_mux_002:sink12_ready -> rsp_demux_014:src0_ready
	wire   [27:0] rsp_demux_014_src0_channel;                                                           // rsp_demux_014:src0_channel -> rsp_mux_002:sink12_channel
	wire          rsp_demux_014_src0_startofpacket;                                                     // rsp_demux_014:src0_startofpacket -> rsp_mux_002:sink12_startofpacket
	wire          rsp_demux_014_src0_endofpacket;                                                       // rsp_demux_014:src0_endofpacket -> rsp_mux_002:sink12_endofpacket
	wire          rsp_demux_014_src1_valid;                                                             // rsp_demux_014:src1_valid -> rsp_mux_003:sink9_valid
	wire  [132:0] rsp_demux_014_src1_data;                                                              // rsp_demux_014:src1_data -> rsp_mux_003:sink9_data
	wire          rsp_demux_014_src1_ready;                                                             // rsp_mux_003:sink9_ready -> rsp_demux_014:src1_ready
	wire   [27:0] rsp_demux_014_src1_channel;                                                           // rsp_demux_014:src1_channel -> rsp_mux_003:sink9_channel
	wire          rsp_demux_014_src1_startofpacket;                                                     // rsp_demux_014:src1_startofpacket -> rsp_mux_003:sink9_startofpacket
	wire          rsp_demux_014_src1_endofpacket;                                                       // rsp_demux_014:src1_endofpacket -> rsp_mux_003:sink9_endofpacket
	wire          rsp_demux_014_src2_valid;                                                             // rsp_demux_014:src2_valid -> rsp_mux_004:sink12_valid
	wire  [132:0] rsp_demux_014_src2_data;                                                              // rsp_demux_014:src2_data -> rsp_mux_004:sink12_data
	wire          rsp_demux_014_src2_ready;                                                             // rsp_mux_004:sink12_ready -> rsp_demux_014:src2_ready
	wire   [27:0] rsp_demux_014_src2_channel;                                                           // rsp_demux_014:src2_channel -> rsp_mux_004:sink12_channel
	wire          rsp_demux_014_src2_startofpacket;                                                     // rsp_demux_014:src2_startofpacket -> rsp_mux_004:sink12_startofpacket
	wire          rsp_demux_014_src2_endofpacket;                                                       // rsp_demux_014:src2_endofpacket -> rsp_mux_004:sink12_endofpacket
	wire          rsp_demux_014_src3_valid;                                                             // rsp_demux_014:src3_valid -> rsp_mux_007:sink0_valid
	wire  [132:0] rsp_demux_014_src3_data;                                                              // rsp_demux_014:src3_data -> rsp_mux_007:sink0_data
	wire          rsp_demux_014_src3_ready;                                                             // rsp_mux_007:sink0_ready -> rsp_demux_014:src3_ready
	wire   [27:0] rsp_demux_014_src3_channel;                                                           // rsp_demux_014:src3_channel -> rsp_mux_007:sink0_channel
	wire          rsp_demux_014_src3_startofpacket;                                                     // rsp_demux_014:src3_startofpacket -> rsp_mux_007:sink0_startofpacket
	wire          rsp_demux_014_src3_endofpacket;                                                       // rsp_demux_014:src3_endofpacket -> rsp_mux_007:sink0_endofpacket
	wire          rsp_demux_014_src4_valid;                                                             // rsp_demux_014:src4_valid -> rsp_mux_008:sink0_valid
	wire  [132:0] rsp_demux_014_src4_data;                                                              // rsp_demux_014:src4_data -> rsp_mux_008:sink0_data
	wire          rsp_demux_014_src4_ready;                                                             // rsp_mux_008:sink0_ready -> rsp_demux_014:src4_ready
	wire   [27:0] rsp_demux_014_src4_channel;                                                           // rsp_demux_014:src4_channel -> rsp_mux_008:sink0_channel
	wire          rsp_demux_014_src4_startofpacket;                                                     // rsp_demux_014:src4_startofpacket -> rsp_mux_008:sink0_startofpacket
	wire          rsp_demux_014_src4_endofpacket;                                                       // rsp_demux_014:src4_endofpacket -> rsp_mux_008:sink0_endofpacket
	wire          rsp_demux_015_src0_valid;                                                             // rsp_demux_015:src0_valid -> rsp_mux_002:sink13_valid
	wire  [132:0] rsp_demux_015_src0_data;                                                              // rsp_demux_015:src0_data -> rsp_mux_002:sink13_data
	wire          rsp_demux_015_src0_ready;                                                             // rsp_mux_002:sink13_ready -> rsp_demux_015:src0_ready
	wire   [27:0] rsp_demux_015_src0_channel;                                                           // rsp_demux_015:src0_channel -> rsp_mux_002:sink13_channel
	wire          rsp_demux_015_src0_startofpacket;                                                     // rsp_demux_015:src0_startofpacket -> rsp_mux_002:sink13_startofpacket
	wire          rsp_demux_015_src0_endofpacket;                                                       // rsp_demux_015:src0_endofpacket -> rsp_mux_002:sink13_endofpacket
	wire          rsp_demux_015_src1_valid;                                                             // rsp_demux_015:src1_valid -> rsp_mux_003:sink10_valid
	wire  [132:0] rsp_demux_015_src1_data;                                                              // rsp_demux_015:src1_data -> rsp_mux_003:sink10_data
	wire          rsp_demux_015_src1_ready;                                                             // rsp_mux_003:sink10_ready -> rsp_demux_015:src1_ready
	wire   [27:0] rsp_demux_015_src1_channel;                                                           // rsp_demux_015:src1_channel -> rsp_mux_003:sink10_channel
	wire          rsp_demux_015_src1_startofpacket;                                                     // rsp_demux_015:src1_startofpacket -> rsp_mux_003:sink10_startofpacket
	wire          rsp_demux_015_src1_endofpacket;                                                       // rsp_demux_015:src1_endofpacket -> rsp_mux_003:sink10_endofpacket
	wire          rsp_demux_015_src2_valid;                                                             // rsp_demux_015:src2_valid -> rsp_mux_004:sink13_valid
	wire  [132:0] rsp_demux_015_src2_data;                                                              // rsp_demux_015:src2_data -> rsp_mux_004:sink13_data
	wire          rsp_demux_015_src2_ready;                                                             // rsp_mux_004:sink13_ready -> rsp_demux_015:src2_ready
	wire   [27:0] rsp_demux_015_src2_channel;                                                           // rsp_demux_015:src2_channel -> rsp_mux_004:sink13_channel
	wire          rsp_demux_015_src2_startofpacket;                                                     // rsp_demux_015:src2_startofpacket -> rsp_mux_004:sink13_startofpacket
	wire          rsp_demux_015_src2_endofpacket;                                                       // rsp_demux_015:src2_endofpacket -> rsp_mux_004:sink13_endofpacket
	wire          rsp_demux_015_src3_valid;                                                             // rsp_demux_015:src3_valid -> rsp_mux_007:sink1_valid
	wire  [132:0] rsp_demux_015_src3_data;                                                              // rsp_demux_015:src3_data -> rsp_mux_007:sink1_data
	wire          rsp_demux_015_src3_ready;                                                             // rsp_mux_007:sink1_ready -> rsp_demux_015:src3_ready
	wire   [27:0] rsp_demux_015_src3_channel;                                                           // rsp_demux_015:src3_channel -> rsp_mux_007:sink1_channel
	wire          rsp_demux_015_src3_startofpacket;                                                     // rsp_demux_015:src3_startofpacket -> rsp_mux_007:sink1_startofpacket
	wire          rsp_demux_015_src3_endofpacket;                                                       // rsp_demux_015:src3_endofpacket -> rsp_mux_007:sink1_endofpacket
	wire          rsp_demux_015_src4_valid;                                                             // rsp_demux_015:src4_valid -> rsp_mux_008:sink1_valid
	wire  [132:0] rsp_demux_015_src4_data;                                                              // rsp_demux_015:src4_data -> rsp_mux_008:sink1_data
	wire          rsp_demux_015_src4_ready;                                                             // rsp_mux_008:sink1_ready -> rsp_demux_015:src4_ready
	wire   [27:0] rsp_demux_015_src4_channel;                                                           // rsp_demux_015:src4_channel -> rsp_mux_008:sink1_channel
	wire          rsp_demux_015_src4_startofpacket;                                                     // rsp_demux_015:src4_startofpacket -> rsp_mux_008:sink1_startofpacket
	wire          rsp_demux_015_src4_endofpacket;                                                       // rsp_demux_015:src4_endofpacket -> rsp_mux_008:sink1_endofpacket
	wire          rsp_demux_016_src0_valid;                                                             // rsp_demux_016:src0_valid -> rsp_mux_002:sink14_valid
	wire  [132:0] rsp_demux_016_src0_data;                                                              // rsp_demux_016:src0_data -> rsp_mux_002:sink14_data
	wire          rsp_demux_016_src0_ready;                                                             // rsp_mux_002:sink14_ready -> rsp_demux_016:src0_ready
	wire   [27:0] rsp_demux_016_src0_channel;                                                           // rsp_demux_016:src0_channel -> rsp_mux_002:sink14_channel
	wire          rsp_demux_016_src0_startofpacket;                                                     // rsp_demux_016:src0_startofpacket -> rsp_mux_002:sink14_startofpacket
	wire          rsp_demux_016_src0_endofpacket;                                                       // rsp_demux_016:src0_endofpacket -> rsp_mux_002:sink14_endofpacket
	wire          rsp_demux_016_src1_valid;                                                             // rsp_demux_016:src1_valid -> rsp_mux_003:sink11_valid
	wire  [132:0] rsp_demux_016_src1_data;                                                              // rsp_demux_016:src1_data -> rsp_mux_003:sink11_data
	wire          rsp_demux_016_src1_ready;                                                             // rsp_mux_003:sink11_ready -> rsp_demux_016:src1_ready
	wire   [27:0] rsp_demux_016_src1_channel;                                                           // rsp_demux_016:src1_channel -> rsp_mux_003:sink11_channel
	wire          rsp_demux_016_src1_startofpacket;                                                     // rsp_demux_016:src1_startofpacket -> rsp_mux_003:sink11_startofpacket
	wire          rsp_demux_016_src1_endofpacket;                                                       // rsp_demux_016:src1_endofpacket -> rsp_mux_003:sink11_endofpacket
	wire          rsp_demux_016_src2_valid;                                                             // rsp_demux_016:src2_valid -> rsp_mux_004:sink14_valid
	wire  [132:0] rsp_demux_016_src2_data;                                                              // rsp_demux_016:src2_data -> rsp_mux_004:sink14_data
	wire          rsp_demux_016_src2_ready;                                                             // rsp_mux_004:sink14_ready -> rsp_demux_016:src2_ready
	wire   [27:0] rsp_demux_016_src2_channel;                                                           // rsp_demux_016:src2_channel -> rsp_mux_004:sink14_channel
	wire          rsp_demux_016_src2_startofpacket;                                                     // rsp_demux_016:src2_startofpacket -> rsp_mux_004:sink14_startofpacket
	wire          rsp_demux_016_src2_endofpacket;                                                       // rsp_demux_016:src2_endofpacket -> rsp_mux_004:sink14_endofpacket
	wire          rsp_demux_016_src3_valid;                                                             // rsp_demux_016:src3_valid -> rsp_mux_007:sink2_valid
	wire  [132:0] rsp_demux_016_src3_data;                                                              // rsp_demux_016:src3_data -> rsp_mux_007:sink2_data
	wire          rsp_demux_016_src3_ready;                                                             // rsp_mux_007:sink2_ready -> rsp_demux_016:src3_ready
	wire   [27:0] rsp_demux_016_src3_channel;                                                           // rsp_demux_016:src3_channel -> rsp_mux_007:sink2_channel
	wire          rsp_demux_016_src3_startofpacket;                                                     // rsp_demux_016:src3_startofpacket -> rsp_mux_007:sink2_startofpacket
	wire          rsp_demux_016_src3_endofpacket;                                                       // rsp_demux_016:src3_endofpacket -> rsp_mux_007:sink2_endofpacket
	wire          rsp_demux_016_src4_valid;                                                             // rsp_demux_016:src4_valid -> rsp_mux_008:sink2_valid
	wire  [132:0] rsp_demux_016_src4_data;                                                              // rsp_demux_016:src4_data -> rsp_mux_008:sink2_data
	wire          rsp_demux_016_src4_ready;                                                             // rsp_mux_008:sink2_ready -> rsp_demux_016:src4_ready
	wire   [27:0] rsp_demux_016_src4_channel;                                                           // rsp_demux_016:src4_channel -> rsp_mux_008:sink2_channel
	wire          rsp_demux_016_src4_startofpacket;                                                     // rsp_demux_016:src4_startofpacket -> rsp_mux_008:sink2_startofpacket
	wire          rsp_demux_016_src4_endofpacket;                                                       // rsp_demux_016:src4_endofpacket -> rsp_mux_008:sink2_endofpacket
	wire          rsp_demux_017_src0_valid;                                                             // rsp_demux_017:src0_valid -> rsp_mux_002:sink15_valid
	wire  [132:0] rsp_demux_017_src0_data;                                                              // rsp_demux_017:src0_data -> rsp_mux_002:sink15_data
	wire          rsp_demux_017_src0_ready;                                                             // rsp_mux_002:sink15_ready -> rsp_demux_017:src0_ready
	wire   [27:0] rsp_demux_017_src0_channel;                                                           // rsp_demux_017:src0_channel -> rsp_mux_002:sink15_channel
	wire          rsp_demux_017_src0_startofpacket;                                                     // rsp_demux_017:src0_startofpacket -> rsp_mux_002:sink15_startofpacket
	wire          rsp_demux_017_src0_endofpacket;                                                       // rsp_demux_017:src0_endofpacket -> rsp_mux_002:sink15_endofpacket
	wire          rsp_demux_017_src1_valid;                                                             // rsp_demux_017:src1_valid -> rsp_mux_003:sink12_valid
	wire  [132:0] rsp_demux_017_src1_data;                                                              // rsp_demux_017:src1_data -> rsp_mux_003:sink12_data
	wire          rsp_demux_017_src1_ready;                                                             // rsp_mux_003:sink12_ready -> rsp_demux_017:src1_ready
	wire   [27:0] rsp_demux_017_src1_channel;                                                           // rsp_demux_017:src1_channel -> rsp_mux_003:sink12_channel
	wire          rsp_demux_017_src1_startofpacket;                                                     // rsp_demux_017:src1_startofpacket -> rsp_mux_003:sink12_startofpacket
	wire          rsp_demux_017_src1_endofpacket;                                                       // rsp_demux_017:src1_endofpacket -> rsp_mux_003:sink12_endofpacket
	wire          rsp_demux_017_src2_valid;                                                             // rsp_demux_017:src2_valid -> rsp_mux_004:sink15_valid
	wire  [132:0] rsp_demux_017_src2_data;                                                              // rsp_demux_017:src2_data -> rsp_mux_004:sink15_data
	wire          rsp_demux_017_src2_ready;                                                             // rsp_mux_004:sink15_ready -> rsp_demux_017:src2_ready
	wire   [27:0] rsp_demux_017_src2_channel;                                                           // rsp_demux_017:src2_channel -> rsp_mux_004:sink15_channel
	wire          rsp_demux_017_src2_startofpacket;                                                     // rsp_demux_017:src2_startofpacket -> rsp_mux_004:sink15_startofpacket
	wire          rsp_demux_017_src2_endofpacket;                                                       // rsp_demux_017:src2_endofpacket -> rsp_mux_004:sink15_endofpacket
	wire          rsp_demux_018_src0_valid;                                                             // rsp_demux_018:src0_valid -> rsp_mux_002:sink16_valid
	wire  [132:0] rsp_demux_018_src0_data;                                                              // rsp_demux_018:src0_data -> rsp_mux_002:sink16_data
	wire          rsp_demux_018_src0_ready;                                                             // rsp_mux_002:sink16_ready -> rsp_demux_018:src0_ready
	wire   [27:0] rsp_demux_018_src0_channel;                                                           // rsp_demux_018:src0_channel -> rsp_mux_002:sink16_channel
	wire          rsp_demux_018_src0_startofpacket;                                                     // rsp_demux_018:src0_startofpacket -> rsp_mux_002:sink16_startofpacket
	wire          rsp_demux_018_src0_endofpacket;                                                       // rsp_demux_018:src0_endofpacket -> rsp_mux_002:sink16_endofpacket
	wire          rsp_demux_018_src1_valid;                                                             // rsp_demux_018:src1_valid -> rsp_mux_003:sink13_valid
	wire  [132:0] rsp_demux_018_src1_data;                                                              // rsp_demux_018:src1_data -> rsp_mux_003:sink13_data
	wire          rsp_demux_018_src1_ready;                                                             // rsp_mux_003:sink13_ready -> rsp_demux_018:src1_ready
	wire   [27:0] rsp_demux_018_src1_channel;                                                           // rsp_demux_018:src1_channel -> rsp_mux_003:sink13_channel
	wire          rsp_demux_018_src1_startofpacket;                                                     // rsp_demux_018:src1_startofpacket -> rsp_mux_003:sink13_startofpacket
	wire          rsp_demux_018_src1_endofpacket;                                                       // rsp_demux_018:src1_endofpacket -> rsp_mux_003:sink13_endofpacket
	wire          rsp_demux_018_src2_valid;                                                             // rsp_demux_018:src2_valid -> rsp_mux_004:sink16_valid
	wire  [132:0] rsp_demux_018_src2_data;                                                              // rsp_demux_018:src2_data -> rsp_mux_004:sink16_data
	wire          rsp_demux_018_src2_ready;                                                             // rsp_mux_004:sink16_ready -> rsp_demux_018:src2_ready
	wire   [27:0] rsp_demux_018_src2_channel;                                                           // rsp_demux_018:src2_channel -> rsp_mux_004:sink16_channel
	wire          rsp_demux_018_src2_startofpacket;                                                     // rsp_demux_018:src2_startofpacket -> rsp_mux_004:sink16_startofpacket
	wire          rsp_demux_018_src2_endofpacket;                                                       // rsp_demux_018:src2_endofpacket -> rsp_mux_004:sink16_endofpacket
	wire          rsp_demux_019_src0_valid;                                                             // rsp_demux_019:src0_valid -> rsp_mux_002:sink17_valid
	wire  [132:0] rsp_demux_019_src0_data;                                                              // rsp_demux_019:src0_data -> rsp_mux_002:sink17_data
	wire          rsp_demux_019_src0_ready;                                                             // rsp_mux_002:sink17_ready -> rsp_demux_019:src0_ready
	wire   [27:0] rsp_demux_019_src0_channel;                                                           // rsp_demux_019:src0_channel -> rsp_mux_002:sink17_channel
	wire          rsp_demux_019_src0_startofpacket;                                                     // rsp_demux_019:src0_startofpacket -> rsp_mux_002:sink17_startofpacket
	wire          rsp_demux_019_src0_endofpacket;                                                       // rsp_demux_019:src0_endofpacket -> rsp_mux_002:sink17_endofpacket
	wire          rsp_demux_019_src1_valid;                                                             // rsp_demux_019:src1_valid -> rsp_mux_003:sink14_valid
	wire  [132:0] rsp_demux_019_src1_data;                                                              // rsp_demux_019:src1_data -> rsp_mux_003:sink14_data
	wire          rsp_demux_019_src1_ready;                                                             // rsp_mux_003:sink14_ready -> rsp_demux_019:src1_ready
	wire   [27:0] rsp_demux_019_src1_channel;                                                           // rsp_demux_019:src1_channel -> rsp_mux_003:sink14_channel
	wire          rsp_demux_019_src1_startofpacket;                                                     // rsp_demux_019:src1_startofpacket -> rsp_mux_003:sink14_startofpacket
	wire          rsp_demux_019_src1_endofpacket;                                                       // rsp_demux_019:src1_endofpacket -> rsp_mux_003:sink14_endofpacket
	wire          rsp_demux_019_src2_valid;                                                             // rsp_demux_019:src2_valid -> rsp_mux_004:sink17_valid
	wire  [132:0] rsp_demux_019_src2_data;                                                              // rsp_demux_019:src2_data -> rsp_mux_004:sink17_data
	wire          rsp_demux_019_src2_ready;                                                             // rsp_mux_004:sink17_ready -> rsp_demux_019:src2_ready
	wire   [27:0] rsp_demux_019_src2_channel;                                                           // rsp_demux_019:src2_channel -> rsp_mux_004:sink17_channel
	wire          rsp_demux_019_src2_startofpacket;                                                     // rsp_demux_019:src2_startofpacket -> rsp_mux_004:sink17_startofpacket
	wire          rsp_demux_019_src2_endofpacket;                                                       // rsp_demux_019:src2_endofpacket -> rsp_mux_004:sink17_endofpacket
	wire          rsp_demux_020_src0_valid;                                                             // rsp_demux_020:src0_valid -> rsp_mux_003:sink15_valid
	wire  [132:0] rsp_demux_020_src0_data;                                                              // rsp_demux_020:src0_data -> rsp_mux_003:sink15_data
	wire          rsp_demux_020_src0_ready;                                                             // rsp_mux_003:sink15_ready -> rsp_demux_020:src0_ready
	wire   [27:0] rsp_demux_020_src0_channel;                                                           // rsp_demux_020:src0_channel -> rsp_mux_003:sink15_channel
	wire          rsp_demux_020_src0_startofpacket;                                                     // rsp_demux_020:src0_startofpacket -> rsp_mux_003:sink15_startofpacket
	wire          rsp_demux_020_src0_endofpacket;                                                       // rsp_demux_020:src0_endofpacket -> rsp_mux_003:sink15_endofpacket
	wire          rsp_demux_021_src0_valid;                                                             // rsp_demux_021:src0_valid -> rsp_mux_003:sink16_valid
	wire  [132:0] rsp_demux_021_src0_data;                                                              // rsp_demux_021:src0_data -> rsp_mux_003:sink16_data
	wire          rsp_demux_021_src0_ready;                                                             // rsp_mux_003:sink16_ready -> rsp_demux_021:src0_ready
	wire   [27:0] rsp_demux_021_src0_channel;                                                           // rsp_demux_021:src0_channel -> rsp_mux_003:sink16_channel
	wire          rsp_demux_021_src0_startofpacket;                                                     // rsp_demux_021:src0_startofpacket -> rsp_mux_003:sink16_startofpacket
	wire          rsp_demux_021_src0_endofpacket;                                                       // rsp_demux_021:src0_endofpacket -> rsp_mux_003:sink16_endofpacket
	wire          rsp_demux_021_src1_valid;                                                             // rsp_demux_021:src1_valid -> rsp_mux_005:sink0_valid
	wire  [132:0] rsp_demux_021_src1_data;                                                              // rsp_demux_021:src1_data -> rsp_mux_005:sink0_data
	wire          rsp_demux_021_src1_ready;                                                             // rsp_mux_005:sink0_ready -> rsp_demux_021:src1_ready
	wire   [27:0] rsp_demux_021_src1_channel;                                                           // rsp_demux_021:src1_channel -> rsp_mux_005:sink0_channel
	wire          rsp_demux_021_src1_startofpacket;                                                     // rsp_demux_021:src1_startofpacket -> rsp_mux_005:sink0_startofpacket
	wire          rsp_demux_021_src1_endofpacket;                                                       // rsp_demux_021:src1_endofpacket -> rsp_mux_005:sink0_endofpacket
	wire          rsp_demux_022_src0_valid;                                                             // rsp_demux_022:src0_valid -> rsp_mux_003:sink17_valid
	wire  [132:0] rsp_demux_022_src0_data;                                                              // rsp_demux_022:src0_data -> rsp_mux_003:sink17_data
	wire          rsp_demux_022_src0_ready;                                                             // rsp_mux_003:sink17_ready -> rsp_demux_022:src0_ready
	wire   [27:0] rsp_demux_022_src0_channel;                                                           // rsp_demux_022:src0_channel -> rsp_mux_003:sink17_channel
	wire          rsp_demux_022_src0_startofpacket;                                                     // rsp_demux_022:src0_startofpacket -> rsp_mux_003:sink17_startofpacket
	wire          rsp_demux_022_src0_endofpacket;                                                       // rsp_demux_022:src0_endofpacket -> rsp_mux_003:sink17_endofpacket
	wire          rsp_demux_023_src0_valid;                                                             // rsp_demux_023:src0_valid -> rsp_mux_003:sink18_valid
	wire  [132:0] rsp_demux_023_src0_data;                                                              // rsp_demux_023:src0_data -> rsp_mux_003:sink18_data
	wire          rsp_demux_023_src0_ready;                                                             // rsp_mux_003:sink18_ready -> rsp_demux_023:src0_ready
	wire   [27:0] rsp_demux_023_src0_channel;                                                           // rsp_demux_023:src0_channel -> rsp_mux_003:sink18_channel
	wire          rsp_demux_023_src0_startofpacket;                                                     // rsp_demux_023:src0_startofpacket -> rsp_mux_003:sink18_startofpacket
	wire          rsp_demux_023_src0_endofpacket;                                                       // rsp_demux_023:src0_endofpacket -> rsp_mux_003:sink18_endofpacket
	wire          rsp_demux_024_src0_valid;                                                             // rsp_demux_024:src0_valid -> rsp_mux_005:sink1_valid
	wire  [132:0] rsp_demux_024_src0_data;                                                              // rsp_demux_024:src0_data -> rsp_mux_005:sink1_data
	wire          rsp_demux_024_src0_ready;                                                             // rsp_mux_005:sink1_ready -> rsp_demux_024:src0_ready
	wire   [27:0] rsp_demux_024_src0_channel;                                                           // rsp_demux_024:src0_channel -> rsp_mux_005:sink1_channel
	wire          rsp_demux_024_src0_startofpacket;                                                     // rsp_demux_024:src0_startofpacket -> rsp_mux_005:sink1_startofpacket
	wire          rsp_demux_024_src0_endofpacket;                                                       // rsp_demux_024:src0_endofpacket -> rsp_mux_005:sink1_endofpacket
	wire          rsp_demux_024_src1_valid;                                                             // rsp_demux_024:src1_valid -> rsp_mux_006:sink0_valid
	wire  [132:0] rsp_demux_024_src1_data;                                                              // rsp_demux_024:src1_data -> rsp_mux_006:sink0_data
	wire          rsp_demux_024_src1_ready;                                                             // rsp_mux_006:sink0_ready -> rsp_demux_024:src1_ready
	wire   [27:0] rsp_demux_024_src1_channel;                                                           // rsp_demux_024:src1_channel -> rsp_mux_006:sink0_channel
	wire          rsp_demux_024_src1_startofpacket;                                                     // rsp_demux_024:src1_startofpacket -> rsp_mux_006:sink0_startofpacket
	wire          rsp_demux_024_src1_endofpacket;                                                       // rsp_demux_024:src1_endofpacket -> rsp_mux_006:sink0_endofpacket
	wire          rsp_demux_025_src0_valid;                                                             // rsp_demux_025:src0_valid -> rsp_mux_005:sink2_valid
	wire  [132:0] rsp_demux_025_src0_data;                                                              // rsp_demux_025:src0_data -> rsp_mux_005:sink2_data
	wire          rsp_demux_025_src0_ready;                                                             // rsp_mux_005:sink2_ready -> rsp_demux_025:src0_ready
	wire   [27:0] rsp_demux_025_src0_channel;                                                           // rsp_demux_025:src0_channel -> rsp_mux_005:sink2_channel
	wire          rsp_demux_025_src0_startofpacket;                                                     // rsp_demux_025:src0_startofpacket -> rsp_mux_005:sink2_startofpacket
	wire          rsp_demux_025_src0_endofpacket;                                                       // rsp_demux_025:src0_endofpacket -> rsp_mux_005:sink2_endofpacket
	wire          rsp_demux_025_src1_valid;                                                             // rsp_demux_025:src1_valid -> rsp_mux_006:sink1_valid
	wire  [132:0] rsp_demux_025_src1_data;                                                              // rsp_demux_025:src1_data -> rsp_mux_006:sink1_data
	wire          rsp_demux_025_src1_ready;                                                             // rsp_mux_006:sink1_ready -> rsp_demux_025:src1_ready
	wire   [27:0] rsp_demux_025_src1_channel;                                                           // rsp_demux_025:src1_channel -> rsp_mux_006:sink1_channel
	wire          rsp_demux_025_src1_startofpacket;                                                     // rsp_demux_025:src1_startofpacket -> rsp_mux_006:sink1_startofpacket
	wire          rsp_demux_025_src1_endofpacket;                                                       // rsp_demux_025:src1_endofpacket -> rsp_mux_006:sink1_endofpacket
	wire          rsp_demux_026_src0_valid;                                                             // rsp_demux_026:src0_valid -> rsp_mux_005:sink3_valid
	wire  [132:0] rsp_demux_026_src0_data;                                                              // rsp_demux_026:src0_data -> rsp_mux_005:sink3_data
	wire          rsp_demux_026_src0_ready;                                                             // rsp_mux_005:sink3_ready -> rsp_demux_026:src0_ready
	wire   [27:0] rsp_demux_026_src0_channel;                                                           // rsp_demux_026:src0_channel -> rsp_mux_005:sink3_channel
	wire          rsp_demux_026_src0_startofpacket;                                                     // rsp_demux_026:src0_startofpacket -> rsp_mux_005:sink3_startofpacket
	wire          rsp_demux_026_src0_endofpacket;                                                       // rsp_demux_026:src0_endofpacket -> rsp_mux_005:sink3_endofpacket
	wire          rsp_demux_026_src1_valid;                                                             // rsp_demux_026:src1_valid -> rsp_mux_006:sink2_valid
	wire  [132:0] rsp_demux_026_src1_data;                                                              // rsp_demux_026:src1_data -> rsp_mux_006:sink2_data
	wire          rsp_demux_026_src1_ready;                                                             // rsp_mux_006:sink2_ready -> rsp_demux_026:src1_ready
	wire   [27:0] rsp_demux_026_src1_channel;                                                           // rsp_demux_026:src1_channel -> rsp_mux_006:sink2_channel
	wire          rsp_demux_026_src1_startofpacket;                                                     // rsp_demux_026:src1_startofpacket -> rsp_mux_006:sink2_startofpacket
	wire          rsp_demux_026_src1_endofpacket;                                                       // rsp_demux_026:src1_endofpacket -> rsp_mux_006:sink2_endofpacket
	wire          rsp_demux_027_src0_valid;                                                             // rsp_demux_027:src0_valid -> rsp_mux_002:sink18_valid
	wire  [132:0] rsp_demux_027_src0_data;                                                              // rsp_demux_027:src0_data -> rsp_mux_002:sink18_data
	wire          rsp_demux_027_src0_ready;                                                             // rsp_mux_002:sink18_ready -> rsp_demux_027:src0_ready
	wire   [27:0] rsp_demux_027_src0_channel;                                                           // rsp_demux_027:src0_channel -> rsp_mux_002:sink18_channel
	wire          rsp_demux_027_src0_startofpacket;                                                     // rsp_demux_027:src0_startofpacket -> rsp_mux_002:sink18_startofpacket
	wire          rsp_demux_027_src0_endofpacket;                                                       // rsp_demux_027:src0_endofpacket -> rsp_mux_002:sink18_endofpacket
	wire          rsp_demux_027_src1_valid;                                                             // rsp_demux_027:src1_valid -> rsp_mux_006:sink3_valid
	wire  [132:0] rsp_demux_027_src1_data;                                                              // rsp_demux_027:src1_data -> rsp_mux_006:sink3_data
	wire          rsp_demux_027_src1_ready;                                                             // rsp_mux_006:sink3_ready -> rsp_demux_027:src1_ready
	wire   [27:0] rsp_demux_027_src1_channel;                                                           // rsp_demux_027:src1_channel -> rsp_mux_006:sink3_channel
	wire          rsp_demux_027_src1_startofpacket;                                                     // rsp_demux_027:src1_startofpacket -> rsp_mux_006:sink3_startofpacket
	wire          rsp_demux_027_src1_endofpacket;                                                       // rsp_demux_027:src1_endofpacket -> rsp_mux_006:sink3_endofpacket
	wire    [0:0] arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_valid;                                   // ARM_A9_HPS_h2f_axi_master_wr_limiter:cmd_src_valid -> ARM_A9_HPS_h2f_axi_master_wr_cmd_width_adapter:in_valid
	wire  [168:0] arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_data;                                    // ARM_A9_HPS_h2f_axi_master_wr_limiter:cmd_src_data -> ARM_A9_HPS_h2f_axi_master_wr_cmd_width_adapter:in_data
	wire          arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_ready;                                   // ARM_A9_HPS_h2f_axi_master_wr_cmd_width_adapter:in_ready -> ARM_A9_HPS_h2f_axi_master_wr_limiter:cmd_src_ready
	wire   [27:0] arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_channel;                                 // ARM_A9_HPS_h2f_axi_master_wr_limiter:cmd_src_channel -> ARM_A9_HPS_h2f_axi_master_wr_cmd_width_adapter:in_channel
	wire          arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_startofpacket;                           // ARM_A9_HPS_h2f_axi_master_wr_limiter:cmd_src_startofpacket -> ARM_A9_HPS_h2f_axi_master_wr_cmd_width_adapter:in_startofpacket
	wire          arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_endofpacket;                             // ARM_A9_HPS_h2f_axi_master_wr_limiter:cmd_src_endofpacket -> ARM_A9_HPS_h2f_axi_master_wr_cmd_width_adapter:in_endofpacket
	wire          arm_a9_hps_h2f_axi_master_wr_cmd_width_adapter_src_valid;                             // ARM_A9_HPS_h2f_axi_master_wr_cmd_width_adapter:out_valid -> cmd_demux_007:sink_valid
	wire  [132:0] arm_a9_hps_h2f_axi_master_wr_cmd_width_adapter_src_data;                              // ARM_A9_HPS_h2f_axi_master_wr_cmd_width_adapter:out_data -> cmd_demux_007:sink_data
	wire          arm_a9_hps_h2f_axi_master_wr_cmd_width_adapter_src_ready;                             // cmd_demux_007:sink_ready -> ARM_A9_HPS_h2f_axi_master_wr_cmd_width_adapter:out_ready
	wire   [27:0] arm_a9_hps_h2f_axi_master_wr_cmd_width_adapter_src_channel;                           // ARM_A9_HPS_h2f_axi_master_wr_cmd_width_adapter:out_channel -> cmd_demux_007:sink_channel
	wire          arm_a9_hps_h2f_axi_master_wr_cmd_width_adapter_src_startofpacket;                     // ARM_A9_HPS_h2f_axi_master_wr_cmd_width_adapter:out_startofpacket -> cmd_demux_007:sink_startofpacket
	wire          arm_a9_hps_h2f_axi_master_wr_cmd_width_adapter_src_endofpacket;                       // ARM_A9_HPS_h2f_axi_master_wr_cmd_width_adapter:out_endofpacket -> cmd_demux_007:sink_endofpacket
	wire          rsp_mux_007_src_valid;                                                                // rsp_mux_007:src_valid -> ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:in_valid
	wire  [132:0] rsp_mux_007_src_data;                                                                 // rsp_mux_007:src_data -> ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:in_data
	wire          rsp_mux_007_src_ready;                                                                // ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:in_ready -> rsp_mux_007:src_ready
	wire   [27:0] rsp_mux_007_src_channel;                                                              // rsp_mux_007:src_channel -> ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:in_channel
	wire          rsp_mux_007_src_startofpacket;                                                        // rsp_mux_007:src_startofpacket -> ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:in_startofpacket
	wire          rsp_mux_007_src_endofpacket;                                                          // rsp_mux_007:src_endofpacket -> ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:in_endofpacket
	wire          arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_valid;                             // ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:out_valid -> ARM_A9_HPS_h2f_axi_master_wr_limiter:rsp_sink_valid
	wire  [168:0] arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_data;                              // ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:out_data -> ARM_A9_HPS_h2f_axi_master_wr_limiter:rsp_sink_data
	wire          arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_ready;                             // ARM_A9_HPS_h2f_axi_master_wr_limiter:rsp_sink_ready -> ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:out_ready
	wire   [27:0] arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_channel;                           // ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:out_channel -> ARM_A9_HPS_h2f_axi_master_wr_limiter:rsp_sink_channel
	wire          arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket;                     // ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:out_startofpacket -> ARM_A9_HPS_h2f_axi_master_wr_limiter:rsp_sink_startofpacket
	wire          arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket;                       // ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:out_endofpacket -> ARM_A9_HPS_h2f_axi_master_wr_limiter:rsp_sink_endofpacket
	wire    [0:0] arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_valid;                                   // ARM_A9_HPS_h2f_axi_master_rd_limiter:cmd_src_valid -> ARM_A9_HPS_h2f_axi_master_rd_cmd_width_adapter:in_valid
	wire  [168:0] arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_data;                                    // ARM_A9_HPS_h2f_axi_master_rd_limiter:cmd_src_data -> ARM_A9_HPS_h2f_axi_master_rd_cmd_width_adapter:in_data
	wire          arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_ready;                                   // ARM_A9_HPS_h2f_axi_master_rd_cmd_width_adapter:in_ready -> ARM_A9_HPS_h2f_axi_master_rd_limiter:cmd_src_ready
	wire   [27:0] arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_channel;                                 // ARM_A9_HPS_h2f_axi_master_rd_limiter:cmd_src_channel -> ARM_A9_HPS_h2f_axi_master_rd_cmd_width_adapter:in_channel
	wire          arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_startofpacket;                           // ARM_A9_HPS_h2f_axi_master_rd_limiter:cmd_src_startofpacket -> ARM_A9_HPS_h2f_axi_master_rd_cmd_width_adapter:in_startofpacket
	wire          arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_endofpacket;                             // ARM_A9_HPS_h2f_axi_master_rd_limiter:cmd_src_endofpacket -> ARM_A9_HPS_h2f_axi_master_rd_cmd_width_adapter:in_endofpacket
	wire          arm_a9_hps_h2f_axi_master_rd_cmd_width_adapter_src_valid;                             // ARM_A9_HPS_h2f_axi_master_rd_cmd_width_adapter:out_valid -> cmd_demux_008:sink_valid
	wire  [132:0] arm_a9_hps_h2f_axi_master_rd_cmd_width_adapter_src_data;                              // ARM_A9_HPS_h2f_axi_master_rd_cmd_width_adapter:out_data -> cmd_demux_008:sink_data
	wire          arm_a9_hps_h2f_axi_master_rd_cmd_width_adapter_src_ready;                             // cmd_demux_008:sink_ready -> ARM_A9_HPS_h2f_axi_master_rd_cmd_width_adapter:out_ready
	wire   [27:0] arm_a9_hps_h2f_axi_master_rd_cmd_width_adapter_src_channel;                           // ARM_A9_HPS_h2f_axi_master_rd_cmd_width_adapter:out_channel -> cmd_demux_008:sink_channel
	wire          arm_a9_hps_h2f_axi_master_rd_cmd_width_adapter_src_startofpacket;                     // ARM_A9_HPS_h2f_axi_master_rd_cmd_width_adapter:out_startofpacket -> cmd_demux_008:sink_startofpacket
	wire          arm_a9_hps_h2f_axi_master_rd_cmd_width_adapter_src_endofpacket;                       // ARM_A9_HPS_h2f_axi_master_rd_cmd_width_adapter:out_endofpacket -> cmd_demux_008:sink_endofpacket
	wire          rsp_mux_008_src_valid;                                                                // rsp_mux_008:src_valid -> ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:in_valid
	wire  [132:0] rsp_mux_008_src_data;                                                                 // rsp_mux_008:src_data -> ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:in_data
	wire          rsp_mux_008_src_ready;                                                                // ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:in_ready -> rsp_mux_008:src_ready
	wire   [27:0] rsp_mux_008_src_channel;                                                              // rsp_mux_008:src_channel -> ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:in_channel
	wire          rsp_mux_008_src_startofpacket;                                                        // rsp_mux_008:src_startofpacket -> ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:in_startofpacket
	wire          rsp_mux_008_src_endofpacket;                                                          // rsp_mux_008:src_endofpacket -> ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:in_endofpacket
	wire          arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_valid;                             // ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:out_valid -> ARM_A9_HPS_h2f_axi_master_rd_limiter:rsp_sink_valid
	wire  [168:0] arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_data;                              // ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:out_data -> ARM_A9_HPS_h2f_axi_master_rd_limiter:rsp_sink_data
	wire          arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_ready;                             // ARM_A9_HPS_h2f_axi_master_rd_limiter:rsp_sink_ready -> ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:out_ready
	wire   [27:0] arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_channel;                           // ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:out_channel -> ARM_A9_HPS_h2f_axi_master_rd_limiter:rsp_sink_channel
	wire          arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket;                     // ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:out_startofpacket -> ARM_A9_HPS_h2f_axi_master_rd_limiter:rsp_sink_startofpacket
	wire          arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket;                       // ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:out_endofpacket -> ARM_A9_HPS_h2f_axi_master_rd_limiter:rsp_sink_endofpacket
	wire   [27:0] arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_valid_data;                               // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire   [27:0] arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_valid_data;                               // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire   [27:0] jtag_to_fpga_bridge_master_limiter_cmd_valid_data;                                    // JTAG_to_FPGA_Bridge_master_limiter:cmd_src_valid -> cmd_demux_004:sink_valid
	wire          adc_adc_slave_agent_rdata_fifo_out_valid;                                             // ADC_adc_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] adc_adc_slave_agent_rdata_fifo_out_data;                                              // ADC_adc_slave_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          adc_adc_slave_agent_rdata_fifo_out_ready;                                             // avalon_st_adapter:in_0_ready -> ADC_adc_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                                        // avalon_st_adapter:out_0_valid -> ADC_adc_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                                         // avalon_st_adapter:out_0_data -> ADC_adc_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                        // ADC_adc_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                        // avalon_st_adapter:out_0_error -> ADC_adc_slave_agent:rdata_fifo_sink_error
	wire          sysid_control_slave_agent_rdata_fifo_out_valid;                                       // SysID_control_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] sysid_control_slave_agent_rdata_fifo_out_data;                                        // SysID_control_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          sysid_control_slave_agent_rdata_fifo_out_ready;                                       // avalon_st_adapter_001:in_0_ready -> SysID_control_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                    // avalon_st_adapter_001:out_0_valid -> SysID_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                                     // avalon_st_adapter_001:out_0_data -> SysID_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                    // SysID_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                    // avalon_st_adapter_001:out_0_error -> SysID_control_slave_agent:rdata_fifo_sink_error
	wire          leds_s1_agent_rdata_fifo_out_valid;                                                   // LEDs_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] leds_s1_agent_rdata_fifo_out_data;                                                    // LEDs_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          leds_s1_agent_rdata_fifo_out_ready;                                                   // avalon_st_adapter_002:in_0_ready -> LEDs_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                    // avalon_st_adapter_002:out_0_valid -> LEDs_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                     // avalon_st_adapter_002:out_0_data -> LEDs_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                    // LEDs_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                    // avalon_st_adapter_002:out_0_error -> LEDs_s1_agent:rdata_fifo_sink_error
	wire          slider_switches_s1_agent_rdata_fifo_out_valid;                                        // Slider_Switches_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] slider_switches_s1_agent_rdata_fifo_out_data;                                         // Slider_Switches_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          slider_switches_s1_agent_rdata_fifo_out_ready;                                        // avalon_st_adapter_003:in_0_ready -> Slider_Switches_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                    // avalon_st_adapter_003:out_0_valid -> Slider_Switches_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                                     // avalon_st_adapter_003:out_0_data -> Slider_Switches_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                    // Slider_Switches_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                    // avalon_st_adapter_003:out_0_error -> Slider_Switches_s1_agent:rdata_fifo_sink_error
	wire          pushbuttons_s1_agent_rdata_fifo_out_valid;                                            // Pushbuttons_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] pushbuttons_s1_agent_rdata_fifo_out_data;                                             // Pushbuttons_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_004:in_0_data
	wire          pushbuttons_s1_agent_rdata_fifo_out_ready;                                            // avalon_st_adapter_004:in_0_ready -> Pushbuttons_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                    // avalon_st_adapter_004:out_0_valid -> Pushbuttons_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                                     // avalon_st_adapter_004:out_0_data -> Pushbuttons_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                    // Pushbuttons_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                    // avalon_st_adapter_004:out_0_error -> Pushbuttons_s1_agent:rdata_fifo_sink_error
	wire          expansion_jp1_s1_agent_rdata_fifo_out_valid;                                          // Expansion_JP1_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] expansion_jp1_s1_agent_rdata_fifo_out_data;                                           // Expansion_JP1_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_005:in_0_data
	wire          expansion_jp1_s1_agent_rdata_fifo_out_ready;                                          // avalon_st_adapter_005:in_0_ready -> Expansion_JP1_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_005_out_0_valid;                                                    // avalon_st_adapter_005:out_0_valid -> Expansion_JP1_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                                     // avalon_st_adapter_005:out_0_data -> Expansion_JP1_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                                    // Expansion_JP1_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                                    // avalon_st_adapter_005:out_0_error -> Expansion_JP1_s1_agent:rdata_fifo_sink_error
	wire          expansion_jp7_s1_agent_rdata_fifo_out_valid;                                          // Expansion_JP7_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] expansion_jp7_s1_agent_rdata_fifo_out_data;                                           // Expansion_JP7_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_006:in_0_data
	wire          expansion_jp7_s1_agent_rdata_fifo_out_ready;                                          // avalon_st_adapter_006:in_0_ready -> Expansion_JP7_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_006_out_0_valid;                                                    // avalon_st_adapter_006:out_0_valid -> Expansion_JP7_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                                     // avalon_st_adapter_006:out_0_data -> Expansion_JP7_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                                    // Expansion_JP7_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                                    // avalon_st_adapter_006:out_0_error -> Expansion_JP7_s1_agent:rdata_fifo_sink_error
	wire          arduino_gpio_s1_agent_rdata_fifo_out_valid;                                           // Arduino_GPIO_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] arduino_gpio_s1_agent_rdata_fifo_out_data;                                            // Arduino_GPIO_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_007:in_0_data
	wire          arduino_gpio_s1_agent_rdata_fifo_out_ready;                                           // avalon_st_adapter_007:in_0_ready -> Arduino_GPIO_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_007_out_0_valid;                                                    // avalon_st_adapter_007:out_0_valid -> Arduino_GPIO_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                                     // avalon_st_adapter_007:out_0_data -> Arduino_GPIO_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                                    // Arduino_GPIO_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                                    // avalon_st_adapter_007:out_0_error -> Arduino_GPIO_s1_agent:rdata_fifo_sink_error
	wire          arduino_reset_n_s1_agent_rdata_fifo_out_valid;                                        // Arduino_Reset_N_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] arduino_reset_n_s1_agent_rdata_fifo_out_data;                                         // Arduino_Reset_N_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_008:in_0_data
	wire          arduino_reset_n_s1_agent_rdata_fifo_out_ready;                                        // avalon_st_adapter_008:in_0_ready -> Arduino_Reset_N_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_008_out_0_valid;                                                    // avalon_st_adapter_008:out_0_valid -> Arduino_Reset_N_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                                     // avalon_st_adapter_008:out_0_data -> Arduino_Reset_N_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                                    // Arduino_Reset_N_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                                    // avalon_st_adapter_008:out_0_error -> Arduino_Reset_N_s1_agent:rdata_fifo_sink_error
	wire          interval_timer_s1_agent_rdata_fifo_out_valid;                                         // Interval_Timer_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] interval_timer_s1_agent_rdata_fifo_out_data;                                          // Interval_Timer_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_009:in_0_data
	wire          interval_timer_s1_agent_rdata_fifo_out_ready;                                         // avalon_st_adapter_009:in_0_ready -> Interval_Timer_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_009_out_0_valid;                                                    // avalon_st_adapter_009:out_0_valid -> Interval_Timer_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                                     // avalon_st_adapter_009:out_0_data -> Interval_Timer_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                                    // Interval_Timer_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                                    // avalon_st_adapter_009:out_0_error -> Interval_Timer_s1_agent:rdata_fifo_sink_error
	wire          interval_timer_2_s1_agent_rdata_fifo_out_valid;                                       // Interval_Timer_2_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] interval_timer_2_s1_agent_rdata_fifo_out_data;                                        // Interval_Timer_2_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_010:in_0_data
	wire          interval_timer_2_s1_agent_rdata_fifo_out_ready;                                       // avalon_st_adapter_010:in_0_ready -> Interval_Timer_2_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_010_out_0_valid;                                                    // avalon_st_adapter_010:out_0_valid -> Interval_Timer_2_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                                                     // avalon_st_adapter_010:out_0_data -> Interval_Timer_2_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                                    // Interval_Timer_2_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                                    // avalon_st_adapter_010:out_0_error -> Interval_Timer_2_s1_agent:rdata_fifo_sink_error
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_out_valid;                     // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_011:in_0_valid
	wire   [33:0] jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_out_data;                      // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_011:in_0_data
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_out_ready;                     // avalon_st_adapter_011:in_0_ready -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_011_out_0_valid;                                                    // avalon_st_adapter_011:out_0_valid -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_011_out_0_data;                                                     // avalon_st_adapter_011:out_0_data -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                                                    // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                                                    // avalon_st_adapter_011:out_0_error -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_out_valid;                     // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_012:in_0_valid
	wire   [33:0] jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_out_data;                      // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_012:in_0_data
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_out_ready;                     // avalon_st_adapter_012:in_0_ready -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_012_out_0_valid;                                                    // avalon_st_adapter_012:out_0_valid -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_012_out_0_data;                                                     // avalon_st_adapter_012:out_0_data -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_012_out_0_ready;                                                    // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire    [0:0] avalon_st_adapter_012_out_0_error;                                                    // avalon_st_adapter_012:out_0_error -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_valid;                               // JTAG_UART_avalon_jtag_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_013:in_0_valid
	wire   [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_data;                                // JTAG_UART_avalon_jtag_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_013:in_0_data
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_ready;                               // avalon_st_adapter_013:in_0_ready -> JTAG_UART_avalon_jtag_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_013_out_0_valid;                                                    // avalon_st_adapter_013:out_0_valid -> JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_013_out_0_data;                                                     // avalon_st_adapter_013:out_0_data -> JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_013_out_0_ready;                                                    // JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_013:out_0_ready
	wire    [0:0] avalon_st_adapter_013_out_0_error;                                                    // avalon_st_adapter_013:out_0_error -> JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          nios2_sram_s1_agent_rdata_fifo_out_valid;                                             // Nios2_SRAM_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_014:in_0_valid
	wire   [33:0] nios2_sram_s1_agent_rdata_fifo_out_data;                                              // Nios2_SRAM_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_014:in_0_data
	wire          nios2_sram_s1_agent_rdata_fifo_out_ready;                                             // avalon_st_adapter_014:in_0_ready -> Nios2_SRAM_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_014_out_0_valid;                                                    // avalon_st_adapter_014:out_0_valid -> Nios2_SRAM_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_014_out_0_data;                                                     // avalon_st_adapter_014:out_0_data -> Nios2_SRAM_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_014_out_0_ready;                                                    // Nios2_SRAM_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_014:out_0_ready
	wire    [0:0] avalon_st_adapter_014_out_0_error;                                                    // avalon_st_adapter_014:out_0_error -> Nios2_SRAM_s1_agent:rdata_fifo_sink_error
	wire          nios2_2nd_core_sram_s1_agent_rdata_fifo_out_valid;                                    // Nios2_2nd_Core_SRAM_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_015:in_0_valid
	wire   [33:0] nios2_2nd_core_sram_s1_agent_rdata_fifo_out_data;                                     // Nios2_2nd_Core_SRAM_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_015:in_0_data
	wire          nios2_2nd_core_sram_s1_agent_rdata_fifo_out_ready;                                    // avalon_st_adapter_015:in_0_ready -> Nios2_2nd_Core_SRAM_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_015_out_0_valid;                                                    // avalon_st_adapter_015:out_0_valid -> Nios2_2nd_Core_SRAM_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_015_out_0_data;                                                     // avalon_st_adapter_015:out_0_data -> Nios2_2nd_Core_SRAM_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_015_out_0_ready;                                                    // Nios2_2nd_Core_SRAM_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_015:out_0_ready
	wire    [0:0] avalon_st_adapter_015_out_0_error;                                                    // avalon_st_adapter_015:out_0_error -> Nios2_2nd_Core_SRAM_s1_agent:rdata_fifo_sink_error
	wire          onchip_sram_s1_agent_rdata_fifo_out_valid;                                            // Onchip_SRAM_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_016:in_0_valid
	wire   [33:0] onchip_sram_s1_agent_rdata_fifo_out_data;                                             // Onchip_SRAM_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_016:in_0_data
	wire          onchip_sram_s1_agent_rdata_fifo_out_ready;                                            // avalon_st_adapter_016:in_0_ready -> Onchip_SRAM_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_016_out_0_valid;                                                    // avalon_st_adapter_016:out_0_valid -> Onchip_SRAM_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_016_out_0_data;                                                     // avalon_st_adapter_016:out_0_data -> Onchip_SRAM_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_016_out_0_ready;                                                    // Onchip_SRAM_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_016:out_0_ready
	wire    [0:0] avalon_st_adapter_016_out_0_error;                                                    // avalon_st_adapter_016:out_0_error -> Onchip_SRAM_s1_agent:rdata_fifo_sink_error
	wire          f2h_mem_window_00000000_windowed_slave_agent_rdata_fifo_out_valid;                    // F2H_Mem_Window_00000000_windowed_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_017:in_0_valid
	wire   [33:0] f2h_mem_window_00000000_windowed_slave_agent_rdata_fifo_out_data;                     // F2H_Mem_Window_00000000_windowed_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_017:in_0_data
	wire          f2h_mem_window_00000000_windowed_slave_agent_rdata_fifo_out_ready;                    // avalon_st_adapter_017:in_0_ready -> F2H_Mem_Window_00000000_windowed_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_017_out_0_valid;                                                    // avalon_st_adapter_017:out_0_valid -> F2H_Mem_Window_00000000_windowed_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_017_out_0_data;                                                     // avalon_st_adapter_017:out_0_data -> F2H_Mem_Window_00000000_windowed_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_017_out_0_ready;                                                    // F2H_Mem_Window_00000000_windowed_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_017:out_0_ready
	wire    [0:0] avalon_st_adapter_017_out_0_error;                                                    // avalon_st_adapter_017:out_0_error -> F2H_Mem_Window_00000000_windowed_slave_agent:rdata_fifo_sink_error
	wire          f2h_mem_window_ff600000_windowed_slave_agent_rdata_fifo_out_valid;                    // F2H_Mem_Window_FF600000_windowed_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_018:in_0_valid
	wire   [33:0] f2h_mem_window_ff600000_windowed_slave_agent_rdata_fifo_out_data;                     // F2H_Mem_Window_FF600000_windowed_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_018:in_0_data
	wire          f2h_mem_window_ff600000_windowed_slave_agent_rdata_fifo_out_ready;                    // avalon_st_adapter_018:in_0_ready -> F2H_Mem_Window_FF600000_windowed_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_018_out_0_valid;                                                    // avalon_st_adapter_018:out_0_valid -> F2H_Mem_Window_FF600000_windowed_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_018_out_0_data;                                                     // avalon_st_adapter_018:out_0_data -> F2H_Mem_Window_FF600000_windowed_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_018_out_0_ready;                                                    // F2H_Mem_Window_FF600000_windowed_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_018:out_0_ready
	wire    [0:0] avalon_st_adapter_018_out_0_error;                                                    // avalon_st_adapter_018:out_0_error -> F2H_Mem_Window_FF600000_windowed_slave_agent:rdata_fifo_sink_error
	wire          f2h_mem_window_ff800000_windowed_slave_agent_rdata_fifo_out_valid;                    // F2H_Mem_Window_FF800000_windowed_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_019:in_0_valid
	wire   [33:0] f2h_mem_window_ff800000_windowed_slave_agent_rdata_fifo_out_data;                     // F2H_Mem_Window_FF800000_windowed_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_019:in_0_data
	wire          f2h_mem_window_ff800000_windowed_slave_agent_rdata_fifo_out_ready;                    // avalon_st_adapter_019:in_0_ready -> F2H_Mem_Window_FF800000_windowed_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_019_out_0_valid;                                                    // avalon_st_adapter_019:out_0_valid -> F2H_Mem_Window_FF800000_windowed_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_019_out_0_data;                                                     // avalon_st_adapter_019:out_0_data -> F2H_Mem_Window_FF800000_windowed_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_019_out_0_ready;                                                    // F2H_Mem_Window_FF800000_windowed_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_019:out_0_ready
	wire    [0:0] avalon_st_adapter_019_out_0_error;                                                    // avalon_st_adapter_019:out_0_error -> F2H_Mem_Window_FF800000_windowed_slave_agent:rdata_fifo_sink_error
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_rdata_fifo_out_valid;                      // JTAG_UART_2nd_Core_avalon_jtag_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_020:in_0_valid
	wire   [33:0] jtag_uart_2nd_core_avalon_jtag_slave_agent_rdata_fifo_out_data;                       // JTAG_UART_2nd_Core_avalon_jtag_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_020:in_0_data
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_rdata_fifo_out_ready;                      // avalon_st_adapter_020:in_0_ready -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_020_out_0_valid;                                                    // avalon_st_adapter_020:out_0_valid -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_020_out_0_data;                                                     // avalon_st_adapter_020:out_0_data -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_020_out_0_ready;                                                    // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_020:out_0_ready
	wire    [0:0] avalon_st_adapter_020_out_0_error;                                                    // avalon_st_adapter_020:out_0_error -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          nios2_2nd_core_debug_mem_slave_agent_rdata_fifo_out_valid;                            // Nios2_2nd_Core_debug_mem_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_021:in_0_valid
	wire   [33:0] nios2_2nd_core_debug_mem_slave_agent_rdata_fifo_out_data;                             // Nios2_2nd_Core_debug_mem_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_021:in_0_data
	wire          nios2_2nd_core_debug_mem_slave_agent_rdata_fifo_out_ready;                            // avalon_st_adapter_021:in_0_ready -> Nios2_2nd_Core_debug_mem_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_021_out_0_valid;                                                    // avalon_st_adapter_021:out_0_valid -> Nios2_2nd_Core_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_021_out_0_data;                                                     // avalon_st_adapter_021:out_0_data -> Nios2_2nd_Core_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_021_out_0_ready;                                                    // Nios2_2nd_Core_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_021:out_0_ready
	wire    [0:0] avalon_st_adapter_021_out_0_error;                                                    // avalon_st_adapter_021:out_0_error -> Nios2_2nd_Core_debug_mem_slave_agent:rdata_fifo_sink_error
	wire          interval_timer_2nd_core_s1_agent_rdata_fifo_out_valid;                                // Interval_Timer_2nd_Core_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_022:in_0_valid
	wire   [33:0] interval_timer_2nd_core_s1_agent_rdata_fifo_out_data;                                 // Interval_Timer_2nd_Core_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_022:in_0_data
	wire          interval_timer_2nd_core_s1_agent_rdata_fifo_out_ready;                                // avalon_st_adapter_022:in_0_ready -> Interval_Timer_2nd_Core_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_022_out_0_valid;                                                    // avalon_st_adapter_022:out_0_valid -> Interval_Timer_2nd_Core_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_022_out_0_data;                                                     // avalon_st_adapter_022:out_0_data -> Interval_Timer_2nd_Core_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_022_out_0_ready;                                                    // Interval_Timer_2nd_Core_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_022:out_0_ready
	wire    [0:0] avalon_st_adapter_022_out_0_error;                                                    // avalon_st_adapter_022:out_0_error -> Interval_Timer_2nd_Core_s1_agent:rdata_fifo_sink_error
	wire          interval_timer_2nd_core_2_s1_agent_rdata_fifo_out_valid;                              // Interval_Timer_2nd_Core_2_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_023:in_0_valid
	wire   [33:0] interval_timer_2nd_core_2_s1_agent_rdata_fifo_out_data;                               // Interval_Timer_2nd_Core_2_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_023:in_0_data
	wire          interval_timer_2nd_core_2_s1_agent_rdata_fifo_out_ready;                              // avalon_st_adapter_023:in_0_ready -> Interval_Timer_2nd_Core_2_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_023_out_0_valid;                                                    // avalon_st_adapter_023:out_0_valid -> Interval_Timer_2nd_Core_2_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_023_out_0_data;                                                     // avalon_st_adapter_023:out_0_data -> Interval_Timer_2nd_Core_2_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_023_out_0_ready;                                                    // Interval_Timer_2nd_Core_2_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_023:out_0_ready
	wire    [0:0] avalon_st_adapter_023_out_0_error;                                                    // avalon_st_adapter_023:out_0_error -> Interval_Timer_2nd_Core_2_s1_agent:rdata_fifo_sink_error
	wire          nios2_sram_s2_agent_rdata_fifo_out_valid;                                             // Nios2_SRAM_s2_agent_rdata_fifo:out_valid -> avalon_st_adapter_024:in_0_valid
	wire   [33:0] nios2_sram_s2_agent_rdata_fifo_out_data;                                              // Nios2_SRAM_s2_agent_rdata_fifo:out_data -> avalon_st_adapter_024:in_0_data
	wire          nios2_sram_s2_agent_rdata_fifo_out_ready;                                             // avalon_st_adapter_024:in_0_ready -> Nios2_SRAM_s2_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_024_out_0_valid;                                                    // avalon_st_adapter_024:out_0_valid -> Nios2_SRAM_s2_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_024_out_0_data;                                                     // avalon_st_adapter_024:out_0_data -> Nios2_SRAM_s2_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_024_out_0_ready;                                                    // Nios2_SRAM_s2_agent:rdata_fifo_sink_ready -> avalon_st_adapter_024:out_0_ready
	wire    [0:0] avalon_st_adapter_024_out_0_error;                                                    // avalon_st_adapter_024:out_0_error -> Nios2_SRAM_s2_agent:rdata_fifo_sink_error
	wire          nios2_2nd_core_sram_s2_agent_rdata_fifo_out_valid;                                    // Nios2_2nd_Core_SRAM_s2_agent_rdata_fifo:out_valid -> avalon_st_adapter_025:in_0_valid
	wire   [33:0] nios2_2nd_core_sram_s2_agent_rdata_fifo_out_data;                                     // Nios2_2nd_Core_SRAM_s2_agent_rdata_fifo:out_data -> avalon_st_adapter_025:in_0_data
	wire          nios2_2nd_core_sram_s2_agent_rdata_fifo_out_ready;                                    // avalon_st_adapter_025:in_0_ready -> Nios2_2nd_Core_SRAM_s2_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_025_out_0_valid;                                                    // avalon_st_adapter_025:out_0_valid -> Nios2_2nd_Core_SRAM_s2_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_025_out_0_data;                                                     // avalon_st_adapter_025:out_0_data -> Nios2_2nd_Core_SRAM_s2_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_025_out_0_ready;                                                    // Nios2_2nd_Core_SRAM_s2_agent:rdata_fifo_sink_ready -> avalon_st_adapter_025:out_0_ready
	wire    [0:0] avalon_st_adapter_025_out_0_error;                                                    // avalon_st_adapter_025:out_0_error -> Nios2_2nd_Core_SRAM_s2_agent:rdata_fifo_sink_error
	wire          onchip_sram_s2_agent_rdata_fifo_out_valid;                                            // Onchip_SRAM_s2_agent_rdata_fifo:out_valid -> avalon_st_adapter_026:in_0_valid
	wire   [33:0] onchip_sram_s2_agent_rdata_fifo_out_data;                                             // Onchip_SRAM_s2_agent_rdata_fifo:out_data -> avalon_st_adapter_026:in_0_data
	wire          onchip_sram_s2_agent_rdata_fifo_out_ready;                                            // avalon_st_adapter_026:in_0_ready -> Onchip_SRAM_s2_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_026_out_0_valid;                                                    // avalon_st_adapter_026:out_0_valid -> Onchip_SRAM_s2_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_026_out_0_data;                                                     // avalon_st_adapter_026:out_0_data -> Onchip_SRAM_s2_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_026_out_0_ready;                                                    // Onchip_SRAM_s2_agent:rdata_fifo_sink_ready -> avalon_st_adapter_026:out_0_ready
	wire    [0:0] avalon_st_adapter_026_out_0_error;                                                    // avalon_st_adapter_026:out_0_error -> Onchip_SRAM_s2_agent:rdata_fifo_sink_error
	wire          nios2_debug_mem_slave_agent_rdata_fifo_out_valid;                                     // Nios2_debug_mem_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_027:in_0_valid
	wire   [33:0] nios2_debug_mem_slave_agent_rdata_fifo_out_data;                                      // Nios2_debug_mem_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_027:in_0_data
	wire          nios2_debug_mem_slave_agent_rdata_fifo_out_ready;                                     // avalon_st_adapter_027:in_0_ready -> Nios2_debug_mem_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_027_out_0_valid;                                                    // avalon_st_adapter_027:out_0_valid -> Nios2_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_027_out_0_data;                                                     // avalon_st_adapter_027:out_0_data -> Nios2_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_027_out_0_ready;                                                    // Nios2_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_027:out_0_ready
	wire    [0:0] avalon_st_adapter_027_out_0_error;                                                    // avalon_st_adapter_027:out_0_error -> Nios2_debug_mem_slave_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (1)
	) nios2_data_master_translator (
		.clk                    (System_PLL_sys_clk_clk),                                               //                       clk.clk
		.reset                  (Nios2_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (nios2_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (Nios2_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (Nios2_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (Nios2_data_master_byteenable),                                         //                          .byteenable
		.av_read                (Nios2_data_master_read),                                               //                          .read
		.av_readdata            (Nios2_data_master_readdata),                                           //                          .readdata
		.av_write               (Nios2_data_master_write),                                              //                          .write
		.av_writedata           (Nios2_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (Nios2_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                 //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                 //               (terminated)
		.av_begintransfer       (1'b0),                                                                 //               (terminated)
		.av_chipselect          (1'b0),                                                                 //               (terminated)
		.av_readdatavalid       (),                                                                     //               (terminated)
		.av_lock                (1'b0),                                                                 //               (terminated)
		.uav_clken              (),                                                                     //               (terminated)
		.av_clken               (1'b1),                                                                 //               (terminated)
		.uav_response           (2'b00),                                                                //               (terminated)
		.av_response            (),                                                                     //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                 //               (terminated)
		.av_writeresponsevalid  ()                                                                      //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (1)
	) nios2_2nd_core_data_master_translator (
		.clk                    (System_PLL_sys_clk_clk),                                                        //                       clk.clk
		.reset                  (Nios2_2nd_Core_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (nios2_2nd_core_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_2nd_core_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_2nd_core_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_2nd_core_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_2nd_core_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_2nd_core_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_2nd_core_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_2nd_core_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_2nd_core_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_2nd_core_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_2nd_core_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (Nios2_2nd_Core_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (Nios2_2nd_Core_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (Nios2_2nd_Core_data_master_byteenable),                                         //                          .byteenable
		.av_read                (Nios2_2nd_Core_data_master_read),                                               //                          .read
		.av_readdata            (Nios2_2nd_Core_data_master_readdata),                                           //                          .readdata
		.av_write               (Nios2_2nd_Core_data_master_write),                                              //                          .write
		.av_writedata           (Nios2_2nd_Core_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (Nios2_2nd_Core_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                          //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                          //               (terminated)
		.av_begintransfer       (1'b0),                                                                          //               (terminated)
		.av_chipselect          (1'b0),                                                                          //               (terminated)
		.av_readdatavalid       (),                                                                              //               (terminated)
		.av_lock                (1'b0),                                                                          //               (terminated)
		.uav_clken              (),                                                                              //               (terminated)
		.av_clken               (1'b1),                                                                          //               (terminated)
		.uav_response           (2'b00),                                                                         //               (terminated)
		.av_response            (),                                                                              //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                          //               (terminated)
		.av_writeresponsevalid  ()                                                                               //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) jtag_to_fpga_bridge_master_translator (
		.clk                    (System_PLL_sys_clk_clk),                                                        //                       clk.clk
		.reset                  (ADC_reset_reset_bridge_in_reset_reset),                                         //                     reset.reset
		.uav_address            (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (JTAG_to_FPGA_Bridge_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (JTAG_to_FPGA_Bridge_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (JTAG_to_FPGA_Bridge_master_byteenable),                                         //                          .byteenable
		.av_read                (JTAG_to_FPGA_Bridge_master_read),                                               //                          .read
		.av_readdata            (JTAG_to_FPGA_Bridge_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (JTAG_to_FPGA_Bridge_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (JTAG_to_FPGA_Bridge_master_write),                                              //                          .write
		.av_writedata           (JTAG_to_FPGA_Bridge_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                          //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                          //               (terminated)
		.av_begintransfer       (1'b0),                                                                          //               (terminated)
		.av_chipselect          (1'b0),                                                                          //               (terminated)
		.av_lock                (1'b0),                                                                          //               (terminated)
		.av_debugaccess         (1'b0),                                                                          //               (terminated)
		.uav_clken              (),                                                                              //               (terminated)
		.av_clken               (1'b1),                                                                          //               (terminated)
		.uav_response           (2'b00),                                                                         //               (terminated)
		.av_response            (),                                                                              //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                          //               (terminated)
		.av_writeresponsevalid  ()                                                                               //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (28),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_2nd_core_instruction_master_translator (
		.clk                    (System_PLL_sys_clk_clk),                                                               //                       clk.clk
		.reset                  (Nios2_2nd_Core_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (Nios2_2nd_Core_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (Nios2_2nd_Core_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (Nios2_2nd_Core_instruction_master_read),                                               //                          .read
		.av_readdata            (Nios2_2nd_Core_instruction_master_readdata),                                           //                          .readdata
		.av_burstcount          (1'b1),                                                                                 //               (terminated)
		.av_byteenable          (4'b1111),                                                                              //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                 //               (terminated)
		.av_begintransfer       (1'b0),                                                                                 //               (terminated)
		.av_chipselect          (1'b0),                                                                                 //               (terminated)
		.av_readdatavalid       (),                                                                                     //               (terminated)
		.av_write               (1'b0),                                                                                 //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                                 //               (terminated)
		.av_lock                (1'b0),                                                                                 //               (terminated)
		.av_debugaccess         (1'b0),                                                                                 //               (terminated)
		.uav_clken              (),                                                                                     //               (terminated)
		.av_clken               (1'b1),                                                                                 //               (terminated)
		.uav_response           (2'b00),                                                                                //               (terminated)
		.av_response            (),                                                                                     //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                 //               (terminated)
		.av_writeresponsevalid  ()                                                                                      //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (28),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_instruction_master_translator (
		.clk                    (System_PLL_sys_clk_clk),                                                      //                       clk.clk
		.reset                  (Nios2_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (nios2_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (Nios2_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (Nios2_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (Nios2_instruction_master_read),                                               //                          .read
		.av_readdata            (Nios2_instruction_master_readdata),                                           //                          .readdata
		.av_burstcount          (1'b1),                                                                        //               (terminated)
		.av_byteenable          (4'b1111),                                                                     //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                        //               (terminated)
		.av_begintransfer       (1'b0),                                                                        //               (terminated)
		.av_chipselect          (1'b0),                                                                        //               (terminated)
		.av_readdatavalid       (),                                                                            //               (terminated)
		.av_write               (1'b0),                                                                        //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                        //               (terminated)
		.av_lock                (1'b0),                                                                        //               (terminated)
		.av_debugaccess         (1'b0),                                                                        //               (terminated)
		.uav_clken              (),                                                                            //               (terminated)
		.av_clken               (1'b1),                                                                        //               (terminated)
		.uav_response           (2'b00),                                                                       //               (terminated)
		.av_response            (),                                                                            //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                        //               (terminated)
		.av_writeresponsevalid  ()                                                                             //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) adc_adc_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                //                      clk.clk
		.reset                  (ADC_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (adc_adc_slave_agent_m0_address),        // avalon_universal_slave_0.address
		.uav_burstcount         (adc_adc_slave_agent_m0_burstcount),     //                         .burstcount
		.uav_read               (adc_adc_slave_agent_m0_read),           //                         .read
		.uav_write              (adc_adc_slave_agent_m0_write),          //                         .write
		.uav_waitrequest        (adc_adc_slave_agent_m0_waitrequest),    //                         .waitrequest
		.uav_readdatavalid      (adc_adc_slave_agent_m0_readdatavalid),  //                         .readdatavalid
		.uav_byteenable         (adc_adc_slave_agent_m0_byteenable),     //                         .byteenable
		.uav_readdata           (adc_adc_slave_agent_m0_readdata),       //                         .readdata
		.uav_writedata          (adc_adc_slave_agent_m0_writedata),      //                         .writedata
		.uav_lock               (adc_adc_slave_agent_m0_lock),           //                         .lock
		.uav_debugaccess        (adc_adc_slave_agent_m0_debugaccess),    //                         .debugaccess
		.av_address             (ADC_adc_slave_address),                 //      avalon_anti_slave_0.address
		.av_write               (ADC_adc_slave_write),                   //                         .write
		.av_read                (ADC_adc_slave_read),                    //                         .read
		.av_readdata            (ADC_adc_slave_readdata),                //                         .readdata
		.av_writedata           (ADC_adc_slave_writedata),               //                         .writedata
		.av_waitrequest         (ADC_adc_slave_waitrequest),             //                         .waitrequest
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_byteenable          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_chipselect          (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_avalon_jtag_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                             //                      clk.clk
		.reset                  (ADC_reset_reset_bridge_in_reset_reset),              //                    reset.reset
		.uav_address            (jtag_uart_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_uart_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_uart_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_uart_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_uart_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_uart_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (JTAG_UART_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (JTAG_UART_avalon_jtag_slave_write),                  //                         .write
		.av_read                (JTAG_UART_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (JTAG_UART_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (JTAG_UART_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (JTAG_UART_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (JTAG_UART_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_control_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                     //                      clk.clk
		.reset                  (ADC_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (sysid_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (sysid_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (sysid_control_slave_agent_m0_read),          //                         .read
		.uav_write              (sysid_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (sysid_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (sysid_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (sysid_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (sysid_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (sysid_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (sysid_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (sysid_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (SysID_control_slave_address),                //      avalon_anti_slave_0.address
		.av_readdata            (SysID_control_slave_readdata),               //                         .readdata
		.av_write               (),                                           //              (terminated)
		.av_read                (),                                           //              (terminated)
		.av_writedata           (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_chipselect          (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios2_debug_mem_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                       //                      clk.clk
		.reset                  (Nios2_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (nios2_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (nios2_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (nios2_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (nios2_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (nios2_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (nios2_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (nios2_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (nios2_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (nios2_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (nios2_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (nios2_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Nios2_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (Nios2_debug_mem_slave_write),                  //                         .write
		.av_read                (Nios2_debug_mem_slave_read),                   //                         .read
		.av_readdata            (Nios2_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (Nios2_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (Nios2_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (Nios2_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (Nios2_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_chipselect          (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (13),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios2_sram_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                //                      clk.clk
		.reset                  (ADC_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (nios2_sram_s1_agent_m0_address),        // avalon_universal_slave_0.address
		.uav_burstcount         (nios2_sram_s1_agent_m0_burstcount),     //                         .burstcount
		.uav_read               (nios2_sram_s1_agent_m0_read),           //                         .read
		.uav_write              (nios2_sram_s1_agent_m0_write),          //                         .write
		.uav_waitrequest        (nios2_sram_s1_agent_m0_waitrequest),    //                         .waitrequest
		.uav_readdatavalid      (nios2_sram_s1_agent_m0_readdatavalid),  //                         .readdatavalid
		.uav_byteenable         (nios2_sram_s1_agent_m0_byteenable),     //                         .byteenable
		.uav_readdata           (nios2_sram_s1_agent_m0_readdata),       //                         .readdata
		.uav_writedata          (nios2_sram_s1_agent_m0_writedata),      //                         .writedata
		.uav_lock               (nios2_sram_s1_agent_m0_lock),           //                         .lock
		.uav_debugaccess        (nios2_sram_s1_agent_m0_debugaccess),    //                         .debugaccess
		.av_address             (Nios2_SRAM_s1_address),                 //      avalon_anti_slave_0.address
		.av_write               (Nios2_SRAM_s1_write),                   //                         .write
		.av_readdata            (Nios2_SRAM_s1_readdata),                //                         .readdata
		.av_writedata           (Nios2_SRAM_s1_writedata),               //                         .writedata
		.av_byteenable          (Nios2_SRAM_s1_byteenable),              //                         .byteenable
		.av_chipselect          (Nios2_SRAM_s1_chipselect),              //                         .chipselect
		.av_clken               (Nios2_SRAM_s1_clken),                   //                         .clken
		.av_read                (),                                      //              (terminated)
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (13),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios2_2nd_core_sram_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                        //                      clk.clk
		.reset                  (ADC_reset_reset_bridge_in_reset_reset),         //                    reset.reset
		.uav_address            (nios2_2nd_core_sram_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (nios2_2nd_core_sram_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (nios2_2nd_core_sram_s1_agent_m0_read),          //                         .read
		.uav_write              (nios2_2nd_core_sram_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (nios2_2nd_core_sram_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (nios2_2nd_core_sram_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (nios2_2nd_core_sram_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (nios2_2nd_core_sram_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (nios2_2nd_core_sram_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (nios2_2nd_core_sram_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (nios2_2nd_core_sram_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Nios2_2nd_Core_SRAM_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (Nios2_2nd_Core_SRAM_s1_write),                  //                         .write
		.av_readdata            (Nios2_2nd_Core_SRAM_s1_readdata),               //                         .readdata
		.av_writedata           (Nios2_2nd_Core_SRAM_s1_writedata),              //                         .writedata
		.av_byteenable          (Nios2_2nd_Core_SRAM_s1_byteenable),             //                         .byteenable
		.av_chipselect          (Nios2_2nd_Core_SRAM_s1_chipselect),             //                         .chipselect
		.av_clken               (Nios2_2nd_Core_SRAM_s1_clken),                  //                         .clken
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (16),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_sram_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                //                      clk.clk
		.reset                  (ADC_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (onchip_sram_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (onchip_sram_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (onchip_sram_s1_agent_m0_read),          //                         .read
		.uav_write              (onchip_sram_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (onchip_sram_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (onchip_sram_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (onchip_sram_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (onchip_sram_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (onchip_sram_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (onchip_sram_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (onchip_sram_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Onchip_SRAM_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (Onchip_SRAM_s1_write),                  //                         .write
		.av_readdata            (Onchip_SRAM_s1_readdata),               //                         .readdata
		.av_writedata           (Onchip_SRAM_s1_writedata),              //                         .writedata
		.av_byteenable          (Onchip_SRAM_s1_byteenable),             //                         .byteenable
		.av_chipselect          (Onchip_SRAM_s1_chipselect),             //                         .chipselect
		.av_clken               (Onchip_SRAM_s1_clken),                  //                         .clken
		.av_read                (),                                      //              (terminated)
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) leds_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                //                      clk.clk
		.reset                  (ADC_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (leds_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (leds_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (leds_s1_agent_m0_read),                 //                         .read
		.uav_write              (leds_s1_agent_m0_write),                //                         .write
		.uav_waitrequest        (leds_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (leds_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (leds_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (leds_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (leds_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock               (leds_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (leds_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (LEDs_s1_address),                       //      avalon_anti_slave_0.address
		.av_write               (LEDs_s1_write),                         //                         .write
		.av_readdata            (LEDs_s1_readdata),                      //                         .readdata
		.av_writedata           (LEDs_s1_writedata),                     //                         .writedata
		.av_chipselect          (LEDs_s1_chipselect),                    //                         .chipselect
		.av_read                (),                                      //              (terminated)
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_byteenable          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) slider_switches_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                    //                      clk.clk
		.reset                  (ADC_reset_reset_bridge_in_reset_reset),     //                    reset.reset
		.uav_address            (slider_switches_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (slider_switches_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (slider_switches_s1_agent_m0_read),          //                         .read
		.uav_write              (slider_switches_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (slider_switches_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (slider_switches_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (slider_switches_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (slider_switches_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (slider_switches_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (slider_switches_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (slider_switches_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Slider_Switches_s1_address),                //      avalon_anti_slave_0.address
		.av_readdata            (Slider_Switches_s1_readdata),               //                         .readdata
		.av_write               (),                                          //              (terminated)
		.av_read                (),                                          //              (terminated)
		.av_writedata           (),                                          //              (terminated)
		.av_begintransfer       (),                                          //              (terminated)
		.av_beginbursttransfer  (),                                          //              (terminated)
		.av_burstcount          (),                                          //              (terminated)
		.av_byteenable          (),                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                      //              (terminated)
		.av_waitrequest         (1'b0),                                      //              (terminated)
		.av_writebyteenable     (),                                          //              (terminated)
		.av_lock                (),                                          //              (terminated)
		.av_chipselect          (),                                          //              (terminated)
		.av_clken               (),                                          //              (terminated)
		.uav_clken              (1'b0),                                      //              (terminated)
		.av_debugaccess         (),                                          //              (terminated)
		.av_outputenable        (),                                          //              (terminated)
		.uav_response           (),                                          //              (terminated)
		.av_response            (2'b00),                                     //              (terminated)
		.uav_writeresponsevalid (),                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pushbuttons_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                //                      clk.clk
		.reset                  (ADC_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pushbuttons_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (pushbuttons_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (pushbuttons_s1_agent_m0_read),          //                         .read
		.uav_write              (pushbuttons_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (pushbuttons_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (pushbuttons_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (pushbuttons_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (pushbuttons_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (pushbuttons_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (pushbuttons_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (pushbuttons_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Pushbuttons_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (Pushbuttons_s1_write),                  //                         .write
		.av_readdata            (Pushbuttons_s1_readdata),               //                         .readdata
		.av_writedata           (Pushbuttons_s1_writedata),              //                         .writedata
		.av_chipselect          (Pushbuttons_s1_chipselect),             //                         .chipselect
		.av_read                (),                                      //              (terminated)
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_byteenable          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) expansion_jp1_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                  //                      clk.clk
		.reset                  (ADC_reset_reset_bridge_in_reset_reset),   //                    reset.reset
		.uav_address            (expansion_jp1_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (expansion_jp1_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (expansion_jp1_s1_agent_m0_read),          //                         .read
		.uav_write              (expansion_jp1_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (expansion_jp1_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (expansion_jp1_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (expansion_jp1_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (expansion_jp1_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (expansion_jp1_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (expansion_jp1_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (expansion_jp1_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Expansion_JP1_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (Expansion_JP1_s1_write),                  //                         .write
		.av_readdata            (Expansion_JP1_s1_readdata),               //                         .readdata
		.av_writedata           (Expansion_JP1_s1_writedata),              //                         .writedata
		.av_chipselect          (Expansion_JP1_s1_chipselect),             //                         .chipselect
		.av_read                (),                                        //              (terminated)
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_byteenable          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) expansion_jp7_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                  //                      clk.clk
		.reset                  (ADC_reset_reset_bridge_in_reset_reset),   //                    reset.reset
		.uav_address            (expansion_jp7_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (expansion_jp7_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (expansion_jp7_s1_agent_m0_read),          //                         .read
		.uav_write              (expansion_jp7_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (expansion_jp7_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (expansion_jp7_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (expansion_jp7_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (expansion_jp7_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (expansion_jp7_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (expansion_jp7_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (expansion_jp7_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Expansion_JP7_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (Expansion_JP7_s1_write),                  //                         .write
		.av_readdata            (Expansion_JP7_s1_readdata),               //                         .readdata
		.av_writedata           (Expansion_JP7_s1_writedata),              //                         .writedata
		.av_chipselect          (Expansion_JP7_s1_chipselect),             //                         .chipselect
		.av_read                (),                                        //              (terminated)
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_byteenable          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) arduino_gpio_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                 //                      clk.clk
		.reset                  (ADC_reset_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address            (arduino_gpio_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (arduino_gpio_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (arduino_gpio_s1_agent_m0_read),          //                         .read
		.uav_write              (arduino_gpio_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (arduino_gpio_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (arduino_gpio_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (arduino_gpio_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (arduino_gpio_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (arduino_gpio_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (arduino_gpio_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (arduino_gpio_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Arduino_GPIO_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (Arduino_GPIO_s1_write),                  //                         .write
		.av_readdata            (Arduino_GPIO_s1_readdata),               //                         .readdata
		.av_writedata           (Arduino_GPIO_s1_writedata),              //                         .writedata
		.av_chipselect          (Arduino_GPIO_s1_chipselect),             //                         .chipselect
		.av_read                (),                                       //              (terminated)
		.av_begintransfer       (),                                       //              (terminated)
		.av_beginbursttransfer  (),                                       //              (terminated)
		.av_burstcount          (),                                       //              (terminated)
		.av_byteenable          (),                                       //              (terminated)
		.av_readdatavalid       (1'b0),                                   //              (terminated)
		.av_waitrequest         (1'b0),                                   //              (terminated)
		.av_writebyteenable     (),                                       //              (terminated)
		.av_lock                (),                                       //              (terminated)
		.av_clken               (),                                       //              (terminated)
		.uav_clken              (1'b0),                                   //              (terminated)
		.av_debugaccess         (),                                       //              (terminated)
		.av_outputenable        (),                                       //              (terminated)
		.uav_response           (),                                       //              (terminated)
		.av_response            (2'b00),                                  //              (terminated)
		.uav_writeresponsevalid (),                                       //              (terminated)
		.av_writeresponsevalid  (1'b0)                                    //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) arduino_reset_n_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                    //                      clk.clk
		.reset                  (ADC_reset_reset_bridge_in_reset_reset),     //                    reset.reset
		.uav_address            (arduino_reset_n_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (arduino_reset_n_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (arduino_reset_n_s1_agent_m0_read),          //                         .read
		.uav_write              (arduino_reset_n_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (arduino_reset_n_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (arduino_reset_n_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (arduino_reset_n_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (arduino_reset_n_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (arduino_reset_n_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (arduino_reset_n_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (arduino_reset_n_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Arduino_Reset_N_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (Arduino_Reset_N_s1_write),                  //                         .write
		.av_readdata            (Arduino_Reset_N_s1_readdata),               //                         .readdata
		.av_writedata           (Arduino_Reset_N_s1_writedata),              //                         .writedata
		.av_chipselect          (Arduino_Reset_N_s1_chipselect),             //                         .chipselect
		.av_read                (),                                          //              (terminated)
		.av_begintransfer       (),                                          //              (terminated)
		.av_beginbursttransfer  (),                                          //              (terminated)
		.av_burstcount          (),                                          //              (terminated)
		.av_byteenable          (),                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                      //              (terminated)
		.av_waitrequest         (1'b0),                                      //              (terminated)
		.av_writebyteenable     (),                                          //              (terminated)
		.av_lock                (),                                          //              (terminated)
		.av_clken               (),                                          //              (terminated)
		.uav_clken              (1'b0),                                      //              (terminated)
		.av_debugaccess         (),                                          //              (terminated)
		.av_outputenable        (),                                          //              (terminated)
		.uav_response           (),                                          //              (terminated)
		.av_response            (2'b00),                                     //              (terminated)
		.uav_writeresponsevalid (),                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) interval_timer_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                   //                      clk.clk
		.reset                  (ADC_reset_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address            (interval_timer_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (interval_timer_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (interval_timer_s1_agent_m0_read),          //                         .read
		.uav_write              (interval_timer_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (interval_timer_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (interval_timer_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (interval_timer_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (interval_timer_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (interval_timer_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (interval_timer_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (interval_timer_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Interval_Timer_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (Interval_Timer_s1_write),                  //                         .write
		.av_readdata            (Interval_Timer_s1_readdata),               //                         .readdata
		.av_writedata           (Interval_Timer_s1_writedata),              //                         .writedata
		.av_chipselect          (Interval_Timer_s1_chipselect),             //                         .chipselect
		.av_read                (),                                         //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_waitrequest         (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) interval_timer_2_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                     //                      clk.clk
		.reset                  (ADC_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (interval_timer_2_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (interval_timer_2_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (interval_timer_2_s1_agent_m0_read),          //                         .read
		.uav_write              (interval_timer_2_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (interval_timer_2_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (interval_timer_2_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (interval_timer_2_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (interval_timer_2_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (interval_timer_2_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (interval_timer_2_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (interval_timer_2_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Interval_Timer_2_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (Interval_Timer_2_s1_write),                  //                         .write
		.av_readdata            (Interval_Timer_2_s1_readdata),               //                         .readdata
		.av_writedata           (Interval_Timer_2_s1_writedata),              //                         .writedata
		.av_chipselect          (Interval_Timer_2_s1_chipselect),             //                         .chipselect
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (28),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) f2h_mem_window_00000000_windowed_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                                        //                      clk.clk
		.reset                  (ADC_reset_reset_bridge_in_reset_reset),                         //                    reset.reset
		.uav_address            (f2h_mem_window_00000000_windowed_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (f2h_mem_window_00000000_windowed_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (f2h_mem_window_00000000_windowed_slave_agent_m0_read),          //                         .read
		.uav_write              (f2h_mem_window_00000000_windowed_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (f2h_mem_window_00000000_windowed_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (f2h_mem_window_00000000_windowed_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (f2h_mem_window_00000000_windowed_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (f2h_mem_window_00000000_windowed_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (f2h_mem_window_00000000_windowed_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (f2h_mem_window_00000000_windowed_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (f2h_mem_window_00000000_windowed_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (F2H_Mem_Window_00000000_windowed_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (F2H_Mem_Window_00000000_windowed_slave_write),                  //                         .write
		.av_read                (F2H_Mem_Window_00000000_windowed_slave_read),                   //                         .read
		.av_readdata            (F2H_Mem_Window_00000000_windowed_slave_readdata),               //                         .readdata
		.av_writedata           (F2H_Mem_Window_00000000_windowed_slave_writedata),              //                         .writedata
		.av_burstcount          (F2H_Mem_Window_00000000_windowed_slave_burstcount),             //                         .burstcount
		.av_byteenable          (F2H_Mem_Window_00000000_windowed_slave_byteenable),             //                         .byteenable
		.av_readdatavalid       (F2H_Mem_Window_00000000_windowed_slave_readdatavalid),          //                         .readdatavalid
		.av_waitrequest         (F2H_Mem_Window_00000000_windowed_slave_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                              //              (terminated)
		.av_beginbursttransfer  (),                                                              //              (terminated)
		.av_writebyteenable     (),                                                              //              (terminated)
		.av_lock                (),                                                              //              (terminated)
		.av_chipselect          (),                                                              //              (terminated)
		.av_clken               (),                                                              //              (terminated)
		.uav_clken              (1'b0),                                                          //              (terminated)
		.av_debugaccess         (),                                                              //              (terminated)
		.av_outputenable        (),                                                              //              (terminated)
		.uav_response           (),                                                              //              (terminated)
		.av_response            (2'b00),                                                         //              (terminated)
		.uav_writeresponsevalid (),                                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (19),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) f2h_mem_window_ff600000_windowed_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                                        //                      clk.clk
		.reset                  (ADC_reset_reset_bridge_in_reset_reset),                         //                    reset.reset
		.uav_address            (f2h_mem_window_ff600000_windowed_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (f2h_mem_window_ff600000_windowed_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (f2h_mem_window_ff600000_windowed_slave_agent_m0_read),          //                         .read
		.uav_write              (f2h_mem_window_ff600000_windowed_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (f2h_mem_window_ff600000_windowed_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (f2h_mem_window_ff600000_windowed_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (f2h_mem_window_ff600000_windowed_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (f2h_mem_window_ff600000_windowed_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (f2h_mem_window_ff600000_windowed_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (f2h_mem_window_ff600000_windowed_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (f2h_mem_window_ff600000_windowed_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (F2H_Mem_Window_FF600000_windowed_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (F2H_Mem_Window_FF600000_windowed_slave_write),                  //                         .write
		.av_read                (F2H_Mem_Window_FF600000_windowed_slave_read),                   //                         .read
		.av_readdata            (F2H_Mem_Window_FF600000_windowed_slave_readdata),               //                         .readdata
		.av_writedata           (F2H_Mem_Window_FF600000_windowed_slave_writedata),              //                         .writedata
		.av_burstcount          (F2H_Mem_Window_FF600000_windowed_slave_burstcount),             //                         .burstcount
		.av_byteenable          (F2H_Mem_Window_FF600000_windowed_slave_byteenable),             //                         .byteenable
		.av_readdatavalid       (F2H_Mem_Window_FF600000_windowed_slave_readdatavalid),          //                         .readdatavalid
		.av_waitrequest         (F2H_Mem_Window_FF600000_windowed_slave_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                              //              (terminated)
		.av_beginbursttransfer  (),                                                              //              (terminated)
		.av_writebyteenable     (),                                                              //              (terminated)
		.av_lock                (),                                                              //              (terminated)
		.av_chipselect          (),                                                              //              (terminated)
		.av_clken               (),                                                              //              (terminated)
		.uav_clken              (1'b0),                                                          //              (terminated)
		.av_debugaccess         (),                                                              //              (terminated)
		.av_outputenable        (),                                                              //              (terminated)
		.uav_response           (),                                                              //              (terminated)
		.av_response            (2'b00),                                                         //              (terminated)
		.uav_writeresponsevalid (),                                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (21),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) f2h_mem_window_ff800000_windowed_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                                        //                      clk.clk
		.reset                  (ADC_reset_reset_bridge_in_reset_reset),                         //                    reset.reset
		.uav_address            (f2h_mem_window_ff800000_windowed_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (f2h_mem_window_ff800000_windowed_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (f2h_mem_window_ff800000_windowed_slave_agent_m0_read),          //                         .read
		.uav_write              (f2h_mem_window_ff800000_windowed_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (f2h_mem_window_ff800000_windowed_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (f2h_mem_window_ff800000_windowed_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (f2h_mem_window_ff800000_windowed_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (f2h_mem_window_ff800000_windowed_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (f2h_mem_window_ff800000_windowed_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (f2h_mem_window_ff800000_windowed_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (f2h_mem_window_ff800000_windowed_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (F2H_Mem_Window_FF800000_windowed_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (F2H_Mem_Window_FF800000_windowed_slave_write),                  //                         .write
		.av_read                (F2H_Mem_Window_FF800000_windowed_slave_read),                   //                         .read
		.av_readdata            (F2H_Mem_Window_FF800000_windowed_slave_readdata),               //                         .readdata
		.av_writedata           (F2H_Mem_Window_FF800000_windowed_slave_writedata),              //                         .writedata
		.av_burstcount          (F2H_Mem_Window_FF800000_windowed_slave_burstcount),             //                         .burstcount
		.av_byteenable          (F2H_Mem_Window_FF800000_windowed_slave_byteenable),             //                         .byteenable
		.av_readdatavalid       (F2H_Mem_Window_FF800000_windowed_slave_readdatavalid),          //                         .readdatavalid
		.av_waitrequest         (F2H_Mem_Window_FF800000_windowed_slave_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                              //              (terminated)
		.av_beginbursttransfer  (),                                                              //              (terminated)
		.av_writebyteenable     (),                                                              //              (terminated)
		.av_lock                (),                                                              //              (terminated)
		.av_chipselect          (),                                                              //              (terminated)
		.av_clken               (),                                                              //              (terminated)
		.uav_clken              (1'b0),                                                          //              (terminated)
		.av_debugaccess         (),                                                              //              (terminated)
		.av_outputenable        (),                                                              //              (terminated)
		.uav_response           (),                                                              //              (terminated)
		.av_response            (2'b00),                                                         //              (terminated)
		.uav_writeresponsevalid (),                                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_2nd_core_avalon_jtag_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                                      //                      clk.clk
		.reset                  (ADC_reset_reset_bridge_in_reset_reset),                       //                    reset.reset
		.uav_address            (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (JTAG_UART_2nd_Core_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (JTAG_UART_2nd_Core_avalon_jtag_slave_write),                  //                         .write
		.av_read                (JTAG_UART_2nd_Core_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (JTAG_UART_2nd_Core_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (JTAG_UART_2nd_Core_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (JTAG_UART_2nd_Core_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (JTAG_UART_2nd_Core_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                            //              (terminated)
		.av_beginbursttransfer  (),                                                            //              (terminated)
		.av_burstcount          (),                                                            //              (terminated)
		.av_byteenable          (),                                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                                        //              (terminated)
		.av_writebyteenable     (),                                                            //              (terminated)
		.av_lock                (),                                                            //              (terminated)
		.av_clken               (),                                                            //              (terminated)
		.uav_clken              (1'b0),                                                        //              (terminated)
		.av_debugaccess         (),                                                            //              (terminated)
		.av_outputenable        (),                                                            //              (terminated)
		.uav_response           (),                                                            //              (terminated)
		.av_response            (2'b00),                                                       //              (terminated)
		.uav_writeresponsevalid (),                                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios2_2nd_core_debug_mem_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                                //                      clk.clk
		.reset                  (Nios2_2nd_Core_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (nios2_2nd_core_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (nios2_2nd_core_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (nios2_2nd_core_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (nios2_2nd_core_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (nios2_2nd_core_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (nios2_2nd_core_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (nios2_2nd_core_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (nios2_2nd_core_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (nios2_2nd_core_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (nios2_2nd_core_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (nios2_2nd_core_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Nios2_2nd_Core_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (Nios2_2nd_Core_debug_mem_slave_write),                  //                         .write
		.av_read                (Nios2_2nd_Core_debug_mem_slave_read),                   //                         .read
		.av_readdata            (Nios2_2nd_Core_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (Nios2_2nd_Core_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (Nios2_2nd_Core_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (Nios2_2nd_Core_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (Nios2_2nd_Core_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_chipselect          (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) interval_timer_2nd_core_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                            //                      clk.clk
		.reset                  (ADC_reset_reset_bridge_in_reset_reset),             //                    reset.reset
		.uav_address            (interval_timer_2nd_core_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (interval_timer_2nd_core_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (interval_timer_2nd_core_s1_agent_m0_read),          //                         .read
		.uav_write              (interval_timer_2nd_core_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (interval_timer_2nd_core_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (interval_timer_2nd_core_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (interval_timer_2nd_core_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (interval_timer_2nd_core_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (interval_timer_2nd_core_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (interval_timer_2nd_core_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (interval_timer_2nd_core_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Interval_Timer_2nd_Core_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (Interval_Timer_2nd_Core_s1_write),                  //                         .write
		.av_readdata            (Interval_Timer_2nd_Core_s1_readdata),               //                         .readdata
		.av_writedata           (Interval_Timer_2nd_Core_s1_writedata),              //                         .writedata
		.av_chipselect          (Interval_Timer_2nd_Core_s1_chipselect),             //                         .chipselect
		.av_read                (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) interval_timer_2nd_core_2_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                              //                      clk.clk
		.reset                  (ADC_reset_reset_bridge_in_reset_reset),               //                    reset.reset
		.uav_address            (interval_timer_2nd_core_2_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (interval_timer_2nd_core_2_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (interval_timer_2nd_core_2_s1_agent_m0_read),          //                         .read
		.uav_write              (interval_timer_2nd_core_2_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (interval_timer_2nd_core_2_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (interval_timer_2nd_core_2_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (interval_timer_2nd_core_2_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (interval_timer_2nd_core_2_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (interval_timer_2nd_core_2_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (interval_timer_2nd_core_2_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (interval_timer_2nd_core_2_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Interval_Timer_2nd_Core_2_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (Interval_Timer_2nd_Core_2_s1_write),                  //                         .write
		.av_readdata            (Interval_Timer_2nd_Core_2_s1_readdata),               //                         .readdata
		.av_writedata           (Interval_Timer_2nd_Core_2_s1_writedata),              //                         .writedata
		.av_chipselect          (Interval_Timer_2nd_Core_2_s1_chipselect),             //                         .chipselect
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_for_arm_0_avalon_jtag_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                                       //                      clk.clk
		.reset                  (ADC_reset_reset_bridge_in_reset_reset),                        //                    reset.reset
		.uav_address            (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (JTAG_UART_for_ARM_0_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (JTAG_UART_for_ARM_0_avalon_jtag_slave_write),                  //                         .write
		.av_read                (JTAG_UART_for_ARM_0_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (JTAG_UART_for_ARM_0_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (JTAG_UART_for_ARM_0_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (JTAG_UART_for_ARM_0_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (JTAG_UART_for_ARM_0_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_burstcount          (),                                                             //              (terminated)
		.av_byteenable          (),                                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                                         //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_lock                (),                                                             //              (terminated)
		.av_clken               (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_debugaccess         (),                                                             //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_for_arm_1_avalon_jtag_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                                       //                      clk.clk
		.reset                  (ADC_reset_reset_bridge_in_reset_reset),                        //                    reset.reset
		.uav_address            (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (JTAG_UART_for_ARM_1_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (JTAG_UART_for_ARM_1_avalon_jtag_slave_write),                  //                         .write
		.av_read                (JTAG_UART_for_ARM_1_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (JTAG_UART_for_ARM_1_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (JTAG_UART_for_ARM_1_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (JTAG_UART_for_ARM_1_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (JTAG_UART_for_ARM_1_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_burstcount          (),                                                             //              (terminated)
		.av_byteenable          (),                                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                                         //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_lock                (),                                                             //              (terminated)
		.av_clken               (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_debugaccess         (),                                                             //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (13),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios2_sram_s2_translator (
		.clk                    (System_PLL_sys_clk_clk),                //                      clk.clk
		.reset                  (ADC_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (nios2_sram_s2_agent_m0_address),        // avalon_universal_slave_0.address
		.uav_burstcount         (nios2_sram_s2_agent_m0_burstcount),     //                         .burstcount
		.uav_read               (nios2_sram_s2_agent_m0_read),           //                         .read
		.uav_write              (nios2_sram_s2_agent_m0_write),          //                         .write
		.uav_waitrequest        (nios2_sram_s2_agent_m0_waitrequest),    //                         .waitrequest
		.uav_readdatavalid      (nios2_sram_s2_agent_m0_readdatavalid),  //                         .readdatavalid
		.uav_byteenable         (nios2_sram_s2_agent_m0_byteenable),     //                         .byteenable
		.uav_readdata           (nios2_sram_s2_agent_m0_readdata),       //                         .readdata
		.uav_writedata          (nios2_sram_s2_agent_m0_writedata),      //                         .writedata
		.uav_lock               (nios2_sram_s2_agent_m0_lock),           //                         .lock
		.uav_debugaccess        (nios2_sram_s2_agent_m0_debugaccess),    //                         .debugaccess
		.av_address             (Nios2_SRAM_s2_address),                 //      avalon_anti_slave_0.address
		.av_write               (Nios2_SRAM_s2_write),                   //                         .write
		.av_readdata            (Nios2_SRAM_s2_readdata),                //                         .readdata
		.av_writedata           (Nios2_SRAM_s2_writedata),               //                         .writedata
		.av_byteenable          (Nios2_SRAM_s2_byteenable),              //                         .byteenable
		.av_chipselect          (Nios2_SRAM_s2_chipselect),              //                         .chipselect
		.av_clken               (Nios2_SRAM_s2_clken),                   //                         .clken
		.av_read                (),                                      //              (terminated)
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (13),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios2_2nd_core_sram_s2_translator (
		.clk                    (System_PLL_sys_clk_clk),                        //                      clk.clk
		.reset                  (ADC_reset_reset_bridge_in_reset_reset),         //                    reset.reset
		.uav_address            (nios2_2nd_core_sram_s2_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (nios2_2nd_core_sram_s2_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (nios2_2nd_core_sram_s2_agent_m0_read),          //                         .read
		.uav_write              (nios2_2nd_core_sram_s2_agent_m0_write),         //                         .write
		.uav_waitrequest        (nios2_2nd_core_sram_s2_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (nios2_2nd_core_sram_s2_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (nios2_2nd_core_sram_s2_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (nios2_2nd_core_sram_s2_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (nios2_2nd_core_sram_s2_agent_m0_writedata),     //                         .writedata
		.uav_lock               (nios2_2nd_core_sram_s2_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (nios2_2nd_core_sram_s2_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Nios2_2nd_Core_SRAM_s2_address),                //      avalon_anti_slave_0.address
		.av_write               (Nios2_2nd_Core_SRAM_s2_write),                  //                         .write
		.av_readdata            (Nios2_2nd_Core_SRAM_s2_readdata),               //                         .readdata
		.av_writedata           (Nios2_2nd_Core_SRAM_s2_writedata),              //                         .writedata
		.av_byteenable          (Nios2_2nd_Core_SRAM_s2_byteenable),             //                         .byteenable
		.av_chipselect          (Nios2_2nd_Core_SRAM_s2_chipselect),             //                         .chipselect
		.av_clken               (Nios2_2nd_Core_SRAM_s2_clken),                  //                         .clken
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (16),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_sram_s2_translator (
		.clk                    (System_PLL_sys_clk_clk),                //                      clk.clk
		.reset                  (ADC_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (onchip_sram_s2_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (onchip_sram_s2_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (onchip_sram_s2_agent_m0_read),          //                         .read
		.uav_write              (onchip_sram_s2_agent_m0_write),         //                         .write
		.uav_waitrequest        (onchip_sram_s2_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (onchip_sram_s2_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (onchip_sram_s2_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (onchip_sram_s2_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (onchip_sram_s2_agent_m0_writedata),     //                         .writedata
		.uav_lock               (onchip_sram_s2_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (onchip_sram_s2_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Onchip_SRAM_s2_address),                //      avalon_anti_slave_0.address
		.av_write               (Onchip_SRAM_s2_write),                  //                         .write
		.av_readdata            (Onchip_SRAM_s2_readdata),               //                         .readdata
		.av_writedata           (Onchip_SRAM_s2_writedata),              //                         .writedata
		.av_byteenable          (Onchip_SRAM_s2_byteenable),             //                         .byteenable
		.av_chipselect          (Onchip_SRAM_s2_chipselect),             //                         .chipselect
		.av_clken               (Onchip_SRAM_s2_clken),                  //                         .clken
		.av_read                (),                                      //              (terminated)
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (21),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (97),
		.PKT_CACHE_H               (127),
		.PKT_CACHE_L               (124),
		.PKT_ADDR_SIDEBAND_H       (95),
		.PKT_ADDR_SIDEBAND_L       (95),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (104),
		.PKT_THREAD_ID_H           (120),
		.PKT_THREAD_ID_L           (109),
		.PKT_QOS_L                 (98),
		.PKT_QOS_H                 (98),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_DATA_SIDEBAND_H       (96),
		.PKT_DATA_SIDEBAND_L       (96),
		.ST_DATA_W                 (133),
		.ST_CHANNEL_W              (28),
		.ID                        (1)
	) arm_a9_hps_h2f_lw_axi_master_agent (
		.aclk                   (System_PLL_sys_clk_clk),                                                    //              clk.clk
		.aresetn                (~ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_valid),                         //         write_cp.valid
		.write_cp_data          (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_data),                          //                 .data
		.write_cp_startofpacket (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_startofpacket),                 //                 .startofpacket
		.write_cp_endofpacket   (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_endofpacket),                   //                 .endofpacket
		.write_cp_ready         (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_ready),                         //                 .ready
		.write_rp_valid         (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                     //         write_rp.valid
		.write_rp_data          (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_data),                      //                 .data
		.write_rp_channel       (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_channel),                   //                 .channel
		.write_rp_startofpacket (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.write_rp_endofpacket   (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.write_rp_ready         (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                     //                 .ready
		.read_cp_valid          (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_valid),                          //          read_cp.valid
		.read_cp_data           (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_data),                           //                 .data
		.read_cp_startofpacket  (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_startofpacket),                  //                 .startofpacket
		.read_cp_endofpacket    (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_endofpacket),                    //                 .endofpacket
		.read_cp_ready          (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_ready),                          //                 .ready
		.read_rp_valid          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                     //          read_rp.valid
		.read_rp_data           (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_data),                      //                 .data
		.read_rp_channel        (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_channel),                   //                 .channel
		.read_rp_startofpacket  (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.read_rp_endofpacket    (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.read_rp_ready          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                     //                 .ready
		.awid                   (ARM_A9_HPS_h2f_lw_axi_master_awid),                                         // altera_axi_slave.awid
		.awaddr                 (ARM_A9_HPS_h2f_lw_axi_master_awaddr),                                       //                 .awaddr
		.awlen                  (ARM_A9_HPS_h2f_lw_axi_master_awlen),                                        //                 .awlen
		.awsize                 (ARM_A9_HPS_h2f_lw_axi_master_awsize),                                       //                 .awsize
		.awburst                (ARM_A9_HPS_h2f_lw_axi_master_awburst),                                      //                 .awburst
		.awlock                 (ARM_A9_HPS_h2f_lw_axi_master_awlock),                                       //                 .awlock
		.awcache                (ARM_A9_HPS_h2f_lw_axi_master_awcache),                                      //                 .awcache
		.awprot                 (ARM_A9_HPS_h2f_lw_axi_master_awprot),                                       //                 .awprot
		.awvalid                (ARM_A9_HPS_h2f_lw_axi_master_awvalid),                                      //                 .awvalid
		.awready                (ARM_A9_HPS_h2f_lw_axi_master_awready),                                      //                 .awready
		.wid                    (ARM_A9_HPS_h2f_lw_axi_master_wid),                                          //                 .wid
		.wdata                  (ARM_A9_HPS_h2f_lw_axi_master_wdata),                                        //                 .wdata
		.wstrb                  (ARM_A9_HPS_h2f_lw_axi_master_wstrb),                                        //                 .wstrb
		.wlast                  (ARM_A9_HPS_h2f_lw_axi_master_wlast),                                        //                 .wlast
		.wvalid                 (ARM_A9_HPS_h2f_lw_axi_master_wvalid),                                       //                 .wvalid
		.wready                 (ARM_A9_HPS_h2f_lw_axi_master_wready),                                       //                 .wready
		.bid                    (ARM_A9_HPS_h2f_lw_axi_master_bid),                                          //                 .bid
		.bresp                  (ARM_A9_HPS_h2f_lw_axi_master_bresp),                                        //                 .bresp
		.bvalid                 (ARM_A9_HPS_h2f_lw_axi_master_bvalid),                                       //                 .bvalid
		.bready                 (ARM_A9_HPS_h2f_lw_axi_master_bready),                                       //                 .bready
		.arid                   (ARM_A9_HPS_h2f_lw_axi_master_arid),                                         //                 .arid
		.araddr                 (ARM_A9_HPS_h2f_lw_axi_master_araddr),                                       //                 .araddr
		.arlen                  (ARM_A9_HPS_h2f_lw_axi_master_arlen),                                        //                 .arlen
		.arsize                 (ARM_A9_HPS_h2f_lw_axi_master_arsize),                                       //                 .arsize
		.arburst                (ARM_A9_HPS_h2f_lw_axi_master_arburst),                                      //                 .arburst
		.arlock                 (ARM_A9_HPS_h2f_lw_axi_master_arlock),                                       //                 .arlock
		.arcache                (ARM_A9_HPS_h2f_lw_axi_master_arcache),                                      //                 .arcache
		.arprot                 (ARM_A9_HPS_h2f_lw_axi_master_arprot),                                       //                 .arprot
		.arvalid                (ARM_A9_HPS_h2f_lw_axi_master_arvalid),                                      //                 .arvalid
		.arready                (ARM_A9_HPS_h2f_lw_axi_master_arready),                                      //                 .arready
		.rid                    (ARM_A9_HPS_h2f_lw_axi_master_rid),                                          //                 .rid
		.rdata                  (ARM_A9_HPS_h2f_lw_axi_master_rdata),                                        //                 .rdata
		.rresp                  (ARM_A9_HPS_h2f_lw_axi_master_rresp),                                        //                 .rresp
		.rlast                  (ARM_A9_HPS_h2f_lw_axi_master_rlast),                                        //                 .rlast
		.rvalid                 (ARM_A9_HPS_h2f_lw_axi_master_rvalid),                                       //                 .rvalid
		.rready                 (ARM_A9_HPS_h2f_lw_axi_master_rready),                                       //                 .rready
		.awuser                 (1'b0),                                                                      //      (terminated)
		.aruser                 (1'b0),                                                                      //      (terminated)
		.awqos                  (4'b0000),                                                                   //      (terminated)
		.arqos                  (4'b0000),                                                                   //      (terminated)
		.awregion               (4'b0000),                                                                   //      (terminated)
		.arregion               (4'b0000),                                                                   //      (terminated)
		.wuser                  (1'b0),                                                                      //      (terminated)
		.ruser                  (),                                                                          //      (terminated)
		.buser                  ()                                                                           //      (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_QOS_H                 (98),
		.PKT_QOS_L                 (98),
		.PKT_DATA_SIDEBAND_H       (96),
		.PKT_DATA_SIDEBAND_L       (96),
		.PKT_ADDR_SIDEBAND_H       (95),
		.PKT_ADDR_SIDEBAND_L       (95),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_CACHE_H               (127),
		.PKT_CACHE_L               (124),
		.PKT_THREAD_ID_H           (120),
		.PKT_THREAD_ID_L           (109),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (104),
		.ST_DATA_W                 (133),
		.ST_CHANNEL_W              (28),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (5),
		.BURSTWRAP_VALUE           (255),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_data_master_agent (
		.clk                   (System_PLL_sys_clk_clk),                                               //       clk.clk
		.reset                 (Nios2_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (nios2_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_002_src_valid),                                                //        rp.valid
		.rp_data               (rsp_mux_002_src_data),                                                 //          .data
		.rp_channel            (rsp_mux_002_src_channel),                                              //          .channel
		.rp_startofpacket      (rsp_mux_002_src_startofpacket),                                        //          .startofpacket
		.rp_endofpacket        (rsp_mux_002_src_endofpacket),                                          //          .endofpacket
		.rp_ready              (rsp_mux_002_src_ready),                                                //          .ready
		.av_response           (),                                                                     // (terminated)
		.av_writeresponsevalid ()                                                                      // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_QOS_H                 (98),
		.PKT_QOS_L                 (98),
		.PKT_DATA_SIDEBAND_H       (96),
		.PKT_DATA_SIDEBAND_L       (96),
		.PKT_ADDR_SIDEBAND_H       (95),
		.PKT_ADDR_SIDEBAND_L       (95),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_CACHE_H               (127),
		.PKT_CACHE_L               (124),
		.PKT_THREAD_ID_H           (120),
		.PKT_THREAD_ID_L           (109),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (104),
		.ST_DATA_W                 (133),
		.ST_CHANNEL_W              (28),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (3),
		.BURSTWRAP_VALUE           (255),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_2nd_core_data_master_agent (
		.clk                   (System_PLL_sys_clk_clk),                                                        //       clk.clk
		.reset                 (Nios2_2nd_Core_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (nios2_2nd_core_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_2nd_core_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_2nd_core_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_2nd_core_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_2nd_core_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_2nd_core_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_2nd_core_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_2nd_core_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_2nd_core_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_2nd_core_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_2nd_core_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_2nd_core_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_2nd_core_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_2nd_core_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_2nd_core_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_2nd_core_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_003_src_valid),                                                         //        rp.valid
		.rp_data               (rsp_mux_003_src_data),                                                          //          .data
		.rp_channel            (rsp_mux_003_src_channel),                                                       //          .channel
		.rp_startofpacket      (rsp_mux_003_src_startofpacket),                                                 //          .startofpacket
		.rp_endofpacket        (rsp_mux_003_src_endofpacket),                                                   //          .endofpacket
		.rp_ready              (rsp_mux_003_src_ready),                                                         //          .ready
		.av_response           (),                                                                              // (terminated)
		.av_writeresponsevalid ()                                                                               // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_QOS_H                 (98),
		.PKT_QOS_L                 (98),
		.PKT_DATA_SIDEBAND_H       (96),
		.PKT_DATA_SIDEBAND_L       (96),
		.PKT_ADDR_SIDEBAND_H       (95),
		.PKT_ADDR_SIDEBAND_L       (95),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_CACHE_H               (127),
		.PKT_CACHE_L               (124),
		.PKT_THREAD_ID_H           (120),
		.PKT_THREAD_ID_L           (109),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (104),
		.ST_DATA_W                 (133),
		.ST_CHANNEL_W              (28),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (2),
		.BURSTWRAP_VALUE           (255),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) jtag_to_fpga_bridge_master_agent (
		.clk                   (System_PLL_sys_clk_clk),                                                        //       clk.clk
		.reset                 (ADC_reset_reset_bridge_in_reset_reset),                                         // clk_reset.reset
		.av_address            (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (jtag_to_fpga_bridge_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (jtag_to_fpga_bridge_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (jtag_to_fpga_bridge_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (jtag_to_fpga_bridge_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (jtag_to_fpga_bridge_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (jtag_to_fpga_bridge_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (jtag_to_fpga_bridge_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (jtag_to_fpga_bridge_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (jtag_to_fpga_bridge_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (jtag_to_fpga_bridge_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (jtag_to_fpga_bridge_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                              // (terminated)
		.av_writeresponsevalid ()                                                                               // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_QOS_H                 (98),
		.PKT_QOS_L                 (98),
		.PKT_DATA_SIDEBAND_H       (96),
		.PKT_DATA_SIDEBAND_L       (96),
		.PKT_ADDR_SIDEBAND_H       (95),
		.PKT_ADDR_SIDEBAND_L       (95),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_CACHE_H               (127),
		.PKT_CACHE_L               (124),
		.PKT_THREAD_ID_H           (120),
		.PKT_THREAD_ID_L           (109),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (104),
		.ST_DATA_W                 (133),
		.ST_CHANNEL_W              (28),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (4),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_2nd_core_instruction_master_agent (
		.clk                   (System_PLL_sys_clk_clk),                                                               //       clk.clk
		.reset                 (Nios2_2nd_Core_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_2nd_core_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_2nd_core_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_2nd_core_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_2nd_core_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_2nd_core_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_005_src_valid),                                                                //        rp.valid
		.rp_data               (rsp_mux_005_src_data),                                                                 //          .data
		.rp_channel            (rsp_mux_005_src_channel),                                                              //          .channel
		.rp_startofpacket      (rsp_mux_005_src_startofpacket),                                                        //          .startofpacket
		.rp_endofpacket        (rsp_mux_005_src_endofpacket),                                                          //          .endofpacket
		.rp_ready              (rsp_mux_005_src_ready),                                                                //          .ready
		.av_response           (),                                                                                     // (terminated)
		.av_writeresponsevalid ()                                                                                      // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_QOS_H                 (98),
		.PKT_QOS_L                 (98),
		.PKT_DATA_SIDEBAND_H       (96),
		.PKT_DATA_SIDEBAND_L       (96),
		.PKT_ADDR_SIDEBAND_H       (95),
		.PKT_ADDR_SIDEBAND_L       (95),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_CACHE_H               (127),
		.PKT_CACHE_L               (124),
		.PKT_THREAD_ID_H           (120),
		.PKT_THREAD_ID_L           (109),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (104),
		.ST_DATA_W                 (133),
		.ST_CHANNEL_W              (28),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (6),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_instruction_master_agent (
		.clk                   (System_PLL_sys_clk_clk),                                                      //       clk.clk
		.reset                 (Nios2_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (nios2_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_006_src_valid),                                                       //        rp.valid
		.rp_data               (rsp_mux_006_src_data),                                                        //          .data
		.rp_channel            (rsp_mux_006_src_channel),                                                     //          .channel
		.rp_startofpacket      (rsp_mux_006_src_startofpacket),                                               //          .startofpacket
		.rp_endofpacket        (rsp_mux_006_src_endofpacket),                                                 //          .endofpacket
		.rp_ready              (rsp_mux_006_src_ready),                                                       //          .ready
		.av_response           (),                                                                            // (terminated)
		.av_writeresponsevalid ()                                                                             // (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (30),
		.RDATA_WIDTH               (64),
		.WDATA_WIDTH               (64),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (133),
		.PKT_CACHE_H               (163),
		.PKT_CACHE_L               (160),
		.PKT_ADDR_SIDEBAND_H       (131),
		.PKT_ADDR_SIDEBAND_L       (131),
		.PKT_PROTECTION_H          (159),
		.PKT_PROTECTION_L          (157),
		.PKT_BURST_SIZE_H          (128),
		.PKT_BURST_SIZE_L          (126),
		.PKT_BURST_TYPE_H          (130),
		.PKT_BURST_TYPE_L          (129),
		.PKT_RESPONSE_STATUS_L     (164),
		.PKT_RESPONSE_STATUS_H     (165),
		.PKT_BURSTWRAP_H           (125),
		.PKT_BURSTWRAP_L           (118),
		.PKT_BYTE_CNT_H            (117),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_EXCLUSIVE       (109),
		.PKT_TRANS_LOCK            (108),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (139),
		.PKT_SRC_ID_L              (135),
		.PKT_DEST_ID_H             (144),
		.PKT_DEST_ID_L             (140),
		.PKT_THREAD_ID_H           (156),
		.PKT_THREAD_ID_L           (145),
		.PKT_QOS_L                 (134),
		.PKT_QOS_H                 (134),
		.PKT_ORI_BURST_SIZE_L      (166),
		.PKT_ORI_BURST_SIZE_H      (168),
		.PKT_DATA_SIDEBAND_H       (132),
		.PKT_DATA_SIDEBAND_L       (132),
		.ST_DATA_W                 (169),
		.ST_CHANNEL_W              (28),
		.ID                        (0)
	) arm_a9_hps_h2f_axi_master_agent (
		.aclk                   (System_PLL_sys_clk_clk),                                                    //              clk.clk
		.aresetn                (~ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (arm_a9_hps_h2f_axi_master_agent_write_cp_valid),                            //         write_cp.valid
		.write_cp_data          (arm_a9_hps_h2f_axi_master_agent_write_cp_data),                             //                 .data
		.write_cp_startofpacket (arm_a9_hps_h2f_axi_master_agent_write_cp_startofpacket),                    //                 .startofpacket
		.write_cp_endofpacket   (arm_a9_hps_h2f_axi_master_agent_write_cp_endofpacket),                      //                 .endofpacket
		.write_cp_ready         (arm_a9_hps_h2f_axi_master_agent_write_cp_ready),                            //                 .ready
		.write_rp_valid         (arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_valid),                        //         write_rp.valid
		.write_rp_data          (arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_data),                         //                 .data
		.write_rp_channel       (arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_channel),                      //                 .channel
		.write_rp_startofpacket (arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_startofpacket),                //                 .startofpacket
		.write_rp_endofpacket   (arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_endofpacket),                  //                 .endofpacket
		.write_rp_ready         (arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_ready),                        //                 .ready
		.read_cp_valid          (arm_a9_hps_h2f_axi_master_agent_read_cp_valid),                             //          read_cp.valid
		.read_cp_data           (arm_a9_hps_h2f_axi_master_agent_read_cp_data),                              //                 .data
		.read_cp_startofpacket  (arm_a9_hps_h2f_axi_master_agent_read_cp_startofpacket),                     //                 .startofpacket
		.read_cp_endofpacket    (arm_a9_hps_h2f_axi_master_agent_read_cp_endofpacket),                       //                 .endofpacket
		.read_cp_ready          (arm_a9_hps_h2f_axi_master_agent_read_cp_ready),                             //                 .ready
		.read_rp_valid          (arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_valid),                        //          read_rp.valid
		.read_rp_data           (arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_data),                         //                 .data
		.read_rp_channel        (arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_channel),                      //                 .channel
		.read_rp_startofpacket  (arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_startofpacket),                //                 .startofpacket
		.read_rp_endofpacket    (arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_endofpacket),                  //                 .endofpacket
		.read_rp_ready          (arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_ready),                        //                 .ready
		.awid                   (ARM_A9_HPS_h2f_axi_master_awid),                                            // altera_axi_slave.awid
		.awaddr                 (ARM_A9_HPS_h2f_axi_master_awaddr),                                          //                 .awaddr
		.awlen                  (ARM_A9_HPS_h2f_axi_master_awlen),                                           //                 .awlen
		.awsize                 (ARM_A9_HPS_h2f_axi_master_awsize),                                          //                 .awsize
		.awburst                (ARM_A9_HPS_h2f_axi_master_awburst),                                         //                 .awburst
		.awlock                 (ARM_A9_HPS_h2f_axi_master_awlock),                                          //                 .awlock
		.awcache                (ARM_A9_HPS_h2f_axi_master_awcache),                                         //                 .awcache
		.awprot                 (ARM_A9_HPS_h2f_axi_master_awprot),                                          //                 .awprot
		.awvalid                (ARM_A9_HPS_h2f_axi_master_awvalid),                                         //                 .awvalid
		.awready                (ARM_A9_HPS_h2f_axi_master_awready),                                         //                 .awready
		.wid                    (ARM_A9_HPS_h2f_axi_master_wid),                                             //                 .wid
		.wdata                  (ARM_A9_HPS_h2f_axi_master_wdata),                                           //                 .wdata
		.wstrb                  (ARM_A9_HPS_h2f_axi_master_wstrb),                                           //                 .wstrb
		.wlast                  (ARM_A9_HPS_h2f_axi_master_wlast),                                           //                 .wlast
		.wvalid                 (ARM_A9_HPS_h2f_axi_master_wvalid),                                          //                 .wvalid
		.wready                 (ARM_A9_HPS_h2f_axi_master_wready),                                          //                 .wready
		.bid                    (ARM_A9_HPS_h2f_axi_master_bid),                                             //                 .bid
		.bresp                  (ARM_A9_HPS_h2f_axi_master_bresp),                                           //                 .bresp
		.bvalid                 (ARM_A9_HPS_h2f_axi_master_bvalid),                                          //                 .bvalid
		.bready                 (ARM_A9_HPS_h2f_axi_master_bready),                                          //                 .bready
		.arid                   (ARM_A9_HPS_h2f_axi_master_arid),                                            //                 .arid
		.araddr                 (ARM_A9_HPS_h2f_axi_master_araddr),                                          //                 .araddr
		.arlen                  (ARM_A9_HPS_h2f_axi_master_arlen),                                           //                 .arlen
		.arsize                 (ARM_A9_HPS_h2f_axi_master_arsize),                                          //                 .arsize
		.arburst                (ARM_A9_HPS_h2f_axi_master_arburst),                                         //                 .arburst
		.arlock                 (ARM_A9_HPS_h2f_axi_master_arlock),                                          //                 .arlock
		.arcache                (ARM_A9_HPS_h2f_axi_master_arcache),                                         //                 .arcache
		.arprot                 (ARM_A9_HPS_h2f_axi_master_arprot),                                          //                 .arprot
		.arvalid                (ARM_A9_HPS_h2f_axi_master_arvalid),                                         //                 .arvalid
		.arready                (ARM_A9_HPS_h2f_axi_master_arready),                                         //                 .arready
		.rid                    (ARM_A9_HPS_h2f_axi_master_rid),                                             //                 .rid
		.rdata                  (ARM_A9_HPS_h2f_axi_master_rdata),                                           //                 .rdata
		.rresp                  (ARM_A9_HPS_h2f_axi_master_rresp),                                           //                 .rresp
		.rlast                  (ARM_A9_HPS_h2f_axi_master_rlast),                                           //                 .rlast
		.rvalid                 (ARM_A9_HPS_h2f_axi_master_rvalid),                                          //                 .rvalid
		.rready                 (ARM_A9_HPS_h2f_axi_master_rready),                                          //                 .rready
		.awuser                 (1'b0),                                                                      //      (terminated)
		.aruser                 (1'b0),                                                                      //      (terminated)
		.awqos                  (4'b0000),                                                                   //      (terminated)
		.arqos                  (4'b0000),                                                                   //      (terminated)
		.awregion               (4'b0000),                                                                   //      (terminated)
		.arregion               (4'b0000),                                                                   //      (terminated)
		.wuser                  (1'b0),                                                                      //      (terminated)
		.ruser                  (),                                                                          //      (terminated)
		.buser                  ()                                                                           //      (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (104),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (133),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) adc_adc_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                            //             clk.clk
		.reset                   (ADC_reset_reset_bridge_in_reset_reset),             //       clk_reset.reset
		.m0_address              (adc_adc_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (adc_adc_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (adc_adc_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (adc_adc_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (adc_adc_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (adc_adc_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (adc_adc_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (adc_adc_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (adc_adc_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (adc_adc_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (adc_adc_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (adc_adc_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (adc_adc_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (adc_adc_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (adc_adc_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (adc_adc_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (adc_adc_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (adc_adc_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (adc_adc_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (adc_adc_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (adc_adc_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (adc_adc_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (adc_adc_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (adc_adc_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (adc_adc_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (adc_adc_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (adc_adc_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (adc_adc_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (adc_adc_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (adc_adc_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (adc_adc_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (adc_adc_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (adc_adc_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (adc_adc_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (adc_adc_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (134),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) adc_adc_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset             (ADC_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (adc_adc_slave_agent_rf_source_data),             //        in.data
		.in_valid          (adc_adc_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (adc_adc_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (adc_adc_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (adc_adc_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (adc_adc_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (adc_adc_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (adc_adc_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (adc_adc_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (adc_adc_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) adc_adc_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                   //       clk.clk
		.reset             (ADC_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (adc_adc_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (adc_adc_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (adc_adc_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (adc_adc_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (adc_adc_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (adc_adc_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                    // (terminated)
		.csr_read          (1'b0),                                     // (terminated)
		.csr_write         (1'b0),                                     // (terminated)
		.csr_readdata      (),                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),     // (terminated)
		.almost_full_data  (),                                         // (terminated)
		.almost_empty_data (),                                         // (terminated)
		.in_startofpacket  (1'b0),                                     // (terminated)
		.in_endofpacket    (1'b0),                                     // (terminated)
		.out_startofpacket (),                                         // (terminated)
		.out_endofpacket   (),                                         // (terminated)
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_error         (),                                         // (terminated)
		.in_channel        (1'b0),                                     // (terminated)
		.out_channel       ()                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (104),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (133),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysid_control_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                  //             clk.clk
		.reset                   (ADC_reset_reset_bridge_in_reset_reset),                   //       clk_reset.reset
		.m0_address              (sysid_control_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sysid_control_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sysid_control_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sysid_control_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sysid_control_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (sysid_control_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sysid_control_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sysid_control_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (sysid_control_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sysid_control_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (sysid_control_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (sysid_control_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sysid_control_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (sysid_control_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (sysid_control_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (sysid_control_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sysid_control_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sysid_control_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sysid_control_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sysid_control_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sysid_control_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sysid_control_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sysid_control_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sysid_control_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sysid_control_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sysid_control_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sysid_control_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sysid_control_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sysid_control_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sysid_control_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sysid_control_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sysid_control_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (sysid_control_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_control_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sysid_control_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (134),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_control_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset             (ADC_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (sysid_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sysid_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sysid_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysid_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysid_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysid_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysid_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysid_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysid_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysid_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_control_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset             (ADC_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (sysid_control_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (sysid_control_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (sysid_control_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (sysid_control_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (sysid_control_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (sysid_control_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_startofpacket  (1'b0),                                           // (terminated)
		.in_endofpacket    (1'b0),                                           // (terminated)
		.out_startofpacket (),                                               // (terminated)
		.out_endofpacket   (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (104),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (133),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) leds_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                      //             clk.clk
		.reset                   (ADC_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (leds_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (leds_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (leds_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (leds_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (leds_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (leds_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (leds_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (leds_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (leds_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (leds_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (leds_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (leds_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (leds_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (leds_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (leds_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (leds_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (leds_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (leds_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (leds_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (leds_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (leds_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (leds_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (leds_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (leds_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (leds_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (leds_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (leds_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (leds_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (leds_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (leds_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (leds_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (leds_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),           //                .error
		.rdata_fifo_src_ready    (leds_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (leds_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (leds_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (134),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) leds_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                   //       clk.clk
		.reset             (ADC_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (leds_s1_agent_rf_source_data),             //        in.data
		.in_valid          (leds_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (leds_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (leds_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (leds_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (leds_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (leds_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (leds_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (leds_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (leds_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                    // (terminated)
		.csr_read          (1'b0),                                     // (terminated)
		.csr_write         (1'b0),                                     // (terminated)
		.csr_readdata      (),                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),     // (terminated)
		.almost_full_data  (),                                         // (terminated)
		.almost_empty_data (),                                         // (terminated)
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_error         (),                                         // (terminated)
		.in_channel        (1'b0),                                     // (terminated)
		.out_channel       ()                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) leds_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                //       clk.clk
		.reset             (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (leds_s1_agent_rdata_fifo_src_data),     //        in.data
		.in_valid          (leds_s1_agent_rdata_fifo_src_valid),    //          .valid
		.in_ready          (leds_s1_agent_rdata_fifo_src_ready),    //          .ready
		.out_data          (leds_s1_agent_rdata_fifo_out_data),     //       out.data
		.out_valid         (leds_s1_agent_rdata_fifo_out_valid),    //          .valid
		.out_ready         (leds_s1_agent_rdata_fifo_out_ready),    //          .ready
		.csr_address       (2'b00),                                 // (terminated)
		.csr_read          (1'b0),                                  // (terminated)
		.csr_write         (1'b0),                                  // (terminated)
		.csr_readdata      (),                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),  // (terminated)
		.almost_full_data  (),                                      // (terminated)
		.almost_empty_data (),                                      // (terminated)
		.in_startofpacket  (1'b0),                                  // (terminated)
		.in_endofpacket    (1'b0),                                  // (terminated)
		.out_startofpacket (),                                      // (terminated)
		.out_endofpacket   (),                                      // (terminated)
		.in_empty          (1'b0),                                  // (terminated)
		.out_empty         (),                                      // (terminated)
		.in_error          (1'b0),                                  // (terminated)
		.out_error         (),                                      // (terminated)
		.in_channel        (1'b0),                                  // (terminated)
		.out_channel       ()                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (104),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (133),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) slider_switches_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                                 //             clk.clk
		.reset                   (ADC_reset_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (slider_switches_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (slider_switches_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (slider_switches_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (slider_switches_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (slider_switches_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (slider_switches_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (slider_switches_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (slider_switches_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (slider_switches_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (slider_switches_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (slider_switches_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (slider_switches_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (slider_switches_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (slider_switches_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (slider_switches_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (slider_switches_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (slider_switches_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (slider_switches_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (slider_switches_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (slider_switches_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (slider_switches_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (slider_switches_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (slider_switches_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (slider_switches_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (slider_switches_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (slider_switches_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (slider_switches_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (slider_switches_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (slider_switches_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (slider_switches_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (slider_switches_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (slider_switches_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (slider_switches_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (slider_switches_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (slider_switches_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (134),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) slider_switches_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                              //       clk.clk
		.reset             (ADC_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (slider_switches_s1_agent_rf_source_data),             //        in.data
		.in_valid          (slider_switches_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (slider_switches_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (slider_switches_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (slider_switches_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (slider_switches_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (slider_switches_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (slider_switches_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (slider_switches_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (slider_switches_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) slider_switches_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset             (ADC_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (slider_switches_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (slider_switches_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (slider_switches_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (slider_switches_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (slider_switches_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (slider_switches_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (104),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (133),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pushbuttons_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                             //             clk.clk
		.reset                   (ADC_reset_reset_bridge_in_reset_reset),              //       clk_reset.reset
		.m0_address              (pushbuttons_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (pushbuttons_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (pushbuttons_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (pushbuttons_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (pushbuttons_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (pushbuttons_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (pushbuttons_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (pushbuttons_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (pushbuttons_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (pushbuttons_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (pushbuttons_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (pushbuttons_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (pushbuttons_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (pushbuttons_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (pushbuttons_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (pushbuttons_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (pushbuttons_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (pushbuttons_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (pushbuttons_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (pushbuttons_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (pushbuttons_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (pushbuttons_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (pushbuttons_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (pushbuttons_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (pushbuttons_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (pushbuttons_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (pushbuttons_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (pushbuttons_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (pushbuttons_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (pushbuttons_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (pushbuttons_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (pushbuttons_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (pushbuttons_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pushbuttons_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (pushbuttons_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (134),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pushbuttons_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                          //       clk.clk
		.reset             (ADC_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (pushbuttons_s1_agent_rf_source_data),             //        in.data
		.in_valid          (pushbuttons_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (pushbuttons_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pushbuttons_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pushbuttons_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pushbuttons_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pushbuttons_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pushbuttons_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pushbuttons_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pushbuttons_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pushbuttons_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                    //       clk.clk
		.reset             (ADC_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (pushbuttons_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (pushbuttons_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (pushbuttons_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (pushbuttons_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (pushbuttons_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (pushbuttons_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_startofpacket  (1'b0),                                      // (terminated)
		.in_endofpacket    (1'b0),                                      // (terminated)
		.out_startofpacket (),                                          // (terminated)
		.out_endofpacket   (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (104),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (133),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) expansion_jp1_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                               //             clk.clk
		.reset                   (ADC_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (expansion_jp1_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (expansion_jp1_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (expansion_jp1_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (expansion_jp1_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (expansion_jp1_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (expansion_jp1_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (expansion_jp1_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (expansion_jp1_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (expansion_jp1_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (expansion_jp1_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (expansion_jp1_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (expansion_jp1_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (expansion_jp1_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (expansion_jp1_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (expansion_jp1_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (expansion_jp1_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (expansion_jp1_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (expansion_jp1_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (expansion_jp1_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (expansion_jp1_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (expansion_jp1_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (expansion_jp1_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (expansion_jp1_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (expansion_jp1_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (expansion_jp1_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (expansion_jp1_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (expansion_jp1_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (expansion_jp1_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (expansion_jp1_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (expansion_jp1_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (expansion_jp1_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (expansion_jp1_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (expansion_jp1_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (expansion_jp1_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (expansion_jp1_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (134),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) expansion_jp1_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                            //       clk.clk
		.reset             (ADC_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (expansion_jp1_s1_agent_rf_source_data),             //        in.data
		.in_valid          (expansion_jp1_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (expansion_jp1_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (expansion_jp1_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (expansion_jp1_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (expansion_jp1_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (expansion_jp1_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (expansion_jp1_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (expansion_jp1_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (expansion_jp1_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) expansion_jp1_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                      //       clk.clk
		.reset             (ADC_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (expansion_jp1_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (expansion_jp1_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (expansion_jp1_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (expansion_jp1_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (expansion_jp1_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (expansion_jp1_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_startofpacket  (1'b0),                                        // (terminated)
		.in_endofpacket    (1'b0),                                        // (terminated)
		.out_startofpacket (),                                            // (terminated)
		.out_endofpacket   (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (104),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (133),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) expansion_jp7_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                               //             clk.clk
		.reset                   (ADC_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (expansion_jp7_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (expansion_jp7_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (expansion_jp7_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (expansion_jp7_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (expansion_jp7_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (expansion_jp7_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (expansion_jp7_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (expansion_jp7_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (expansion_jp7_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (expansion_jp7_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (expansion_jp7_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (expansion_jp7_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (expansion_jp7_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (expansion_jp7_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (expansion_jp7_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (expansion_jp7_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (expansion_jp7_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (expansion_jp7_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (expansion_jp7_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (expansion_jp7_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (expansion_jp7_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (expansion_jp7_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (expansion_jp7_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (expansion_jp7_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (expansion_jp7_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (expansion_jp7_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (expansion_jp7_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (expansion_jp7_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (expansion_jp7_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (expansion_jp7_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (expansion_jp7_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (expansion_jp7_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (expansion_jp7_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (expansion_jp7_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (expansion_jp7_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (134),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) expansion_jp7_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                            //       clk.clk
		.reset             (ADC_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (expansion_jp7_s1_agent_rf_source_data),             //        in.data
		.in_valid          (expansion_jp7_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (expansion_jp7_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (expansion_jp7_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (expansion_jp7_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (expansion_jp7_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (expansion_jp7_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (expansion_jp7_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (expansion_jp7_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (expansion_jp7_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) expansion_jp7_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                      //       clk.clk
		.reset             (ADC_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (expansion_jp7_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (expansion_jp7_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (expansion_jp7_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (expansion_jp7_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (expansion_jp7_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (expansion_jp7_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_startofpacket  (1'b0),                                        // (terminated)
		.in_endofpacket    (1'b0),                                        // (terminated)
		.out_startofpacket (),                                            // (terminated)
		.out_endofpacket   (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (104),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (133),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) arduino_gpio_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                              //             clk.clk
		.reset                   (ADC_reset_reset_bridge_in_reset_reset),               //       clk_reset.reset
		.m0_address              (arduino_gpio_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (arduino_gpio_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (arduino_gpio_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (arduino_gpio_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (arduino_gpio_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (arduino_gpio_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (arduino_gpio_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (arduino_gpio_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (arduino_gpio_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (arduino_gpio_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (arduino_gpio_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (arduino_gpio_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (arduino_gpio_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (arduino_gpio_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (arduino_gpio_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (arduino_gpio_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (arduino_gpio_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (arduino_gpio_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (arduino_gpio_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (arduino_gpio_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (arduino_gpio_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (arduino_gpio_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (arduino_gpio_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (arduino_gpio_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (arduino_gpio_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (arduino_gpio_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (arduino_gpio_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (arduino_gpio_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (arduino_gpio_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (arduino_gpio_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (arduino_gpio_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (arduino_gpio_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (arduino_gpio_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (arduino_gpio_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (arduino_gpio_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (134),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) arduino_gpio_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                           //       clk.clk
		.reset             (ADC_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (arduino_gpio_s1_agent_rf_source_data),             //        in.data
		.in_valid          (arduino_gpio_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (arduino_gpio_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (arduino_gpio_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (arduino_gpio_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (arduino_gpio_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (arduino_gpio_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (arduino_gpio_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (arduino_gpio_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (arduino_gpio_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) arduino_gpio_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                     //       clk.clk
		.reset             (ADC_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (arduino_gpio_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (arduino_gpio_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (arduino_gpio_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (arduino_gpio_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (arduino_gpio_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (arduino_gpio_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_startofpacket  (1'b0),                                       // (terminated)
		.in_endofpacket    (1'b0),                                       // (terminated)
		.out_startofpacket (),                                           // (terminated)
		.out_endofpacket   (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (104),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (133),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) arduino_reset_n_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                                 //             clk.clk
		.reset                   (ADC_reset_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (arduino_reset_n_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (arduino_reset_n_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (arduino_reset_n_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (arduino_reset_n_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (arduino_reset_n_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (arduino_reset_n_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (arduino_reset_n_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (arduino_reset_n_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (arduino_reset_n_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (arduino_reset_n_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (arduino_reset_n_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (arduino_reset_n_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (arduino_reset_n_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (arduino_reset_n_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (arduino_reset_n_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (arduino_reset_n_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (arduino_reset_n_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (arduino_reset_n_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (arduino_reset_n_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (arduino_reset_n_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (arduino_reset_n_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (arduino_reset_n_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (arduino_reset_n_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (arduino_reset_n_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (arduino_reset_n_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (arduino_reset_n_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (arduino_reset_n_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (arduino_reset_n_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (arduino_reset_n_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (arduino_reset_n_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (arduino_reset_n_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (arduino_reset_n_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (arduino_reset_n_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (arduino_reset_n_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (arduino_reset_n_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (134),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) arduino_reset_n_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                              //       clk.clk
		.reset             (ADC_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (arduino_reset_n_s1_agent_rf_source_data),             //        in.data
		.in_valid          (arduino_reset_n_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (arduino_reset_n_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (arduino_reset_n_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (arduino_reset_n_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (arduino_reset_n_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (arduino_reset_n_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (arduino_reset_n_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (arduino_reset_n_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (arduino_reset_n_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) arduino_reset_n_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset             (ADC_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (arduino_reset_n_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (arduino_reset_n_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (arduino_reset_n_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (arduino_reset_n_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (arduino_reset_n_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (arduino_reset_n_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (104),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (133),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) interval_timer_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                                //             clk.clk
		.reset                   (ADC_reset_reset_bridge_in_reset_reset),                 //       clk_reset.reset
		.m0_address              (interval_timer_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (interval_timer_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (interval_timer_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (interval_timer_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (interval_timer_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (interval_timer_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (interval_timer_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (interval_timer_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (interval_timer_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (interval_timer_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (interval_timer_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (interval_timer_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (interval_timer_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (interval_timer_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (interval_timer_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (interval_timer_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (interval_timer_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (interval_timer_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (interval_timer_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (interval_timer_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (interval_timer_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (interval_timer_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (interval_timer_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (interval_timer_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (interval_timer_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (interval_timer_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (interval_timer_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (interval_timer_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (interval_timer_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (interval_timer_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (interval_timer_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (interval_timer_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (interval_timer_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (interval_timer_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (interval_timer_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (134),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) interval_timer_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset             (ADC_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (interval_timer_s1_agent_rf_source_data),             //        in.data
		.in_valid          (interval_timer_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (interval_timer_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (interval_timer_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (interval_timer_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (interval_timer_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (interval_timer_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (interval_timer_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (interval_timer_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (interval_timer_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) interval_timer_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset             (ADC_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (interval_timer_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (interval_timer_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (interval_timer_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (interval_timer_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (interval_timer_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (interval_timer_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (104),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (133),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) interval_timer_2_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                                  //             clk.clk
		.reset                   (ADC_reset_reset_bridge_in_reset_reset),                   //       clk_reset.reset
		.m0_address              (interval_timer_2_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (interval_timer_2_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (interval_timer_2_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (interval_timer_2_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (interval_timer_2_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (interval_timer_2_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (interval_timer_2_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (interval_timer_2_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (interval_timer_2_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (interval_timer_2_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (interval_timer_2_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (interval_timer_2_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (interval_timer_2_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (interval_timer_2_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (interval_timer_2_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (interval_timer_2_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (interval_timer_2_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (interval_timer_2_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (interval_timer_2_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (interval_timer_2_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (interval_timer_2_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (interval_timer_2_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (interval_timer_2_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (interval_timer_2_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (interval_timer_2_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (interval_timer_2_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (interval_timer_2_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (interval_timer_2_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (interval_timer_2_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (interval_timer_2_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (interval_timer_2_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (interval_timer_2_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (interval_timer_2_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (interval_timer_2_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (interval_timer_2_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (134),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) interval_timer_2_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset             (ADC_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (interval_timer_2_s1_agent_rf_source_data),             //        in.data
		.in_valid          (interval_timer_2_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (interval_timer_2_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (interval_timer_2_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (interval_timer_2_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (interval_timer_2_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (interval_timer_2_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (interval_timer_2_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (interval_timer_2_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (interval_timer_2_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) interval_timer_2_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset             (ADC_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (interval_timer_2_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (interval_timer_2_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (interval_timer_2_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (interval_timer_2_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (interval_timer_2_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (interval_timer_2_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_startofpacket  (1'b0),                                           // (terminated)
		.in_endofpacket    (1'b0),                                           // (terminated)
		.out_startofpacket (),                                               // (terminated)
		.out_endofpacket   (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (104),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (133),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_for_arm_0_avalon_jtag_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                                    //             clk.clk
		.reset                   (ADC_reset_reset_bridge_in_reset_reset),                                     //       clk_reset.reset
		.m0_address              (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),                                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),                                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),                                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),                                         //                .error
		.rdata_fifo_src_ready    (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (134),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_for_arm_0_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                                 //       clk.clk
		.reset             (ADC_reset_reset_bridge_in_reset_reset),                                  // clk_reset.reset
		.in_data           (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                  // (terminated)
		.csr_read          (1'b0),                                                                   // (terminated)
		.csr_write         (1'b0),                                                                   // (terminated)
		.csr_readdata      (),                                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                   // (terminated)
		.almost_full_data  (),                                                                       // (terminated)
		.almost_empty_data (),                                                                       // (terminated)
		.in_empty          (1'b0),                                                                   // (terminated)
		.out_empty         (),                                                                       // (terminated)
		.in_error          (1'b0),                                                                   // (terminated)
		.out_error         (),                                                                       // (terminated)
		.in_channel        (1'b0),                                                                   // (terminated)
		.out_channel       ()                                                                        // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                           //       clk.clk
		.reset             (ADC_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.in_data           (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                            // (terminated)
		.csr_read          (1'b0),                                                             // (terminated)
		.csr_write         (1'b0),                                                             // (terminated)
		.csr_readdata      (),                                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated)
		.almost_full_data  (),                                                                 // (terminated)
		.almost_empty_data (),                                                                 // (terminated)
		.in_startofpacket  (1'b0),                                                             // (terminated)
		.in_endofpacket    (1'b0),                                                             // (terminated)
		.out_startofpacket (),                                                                 // (terminated)
		.out_endofpacket   (),                                                                 // (terminated)
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.in_error          (1'b0),                                                             // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_channel        (1'b0),                                                             // (terminated)
		.out_channel       ()                                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (104),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (133),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_for_arm_1_avalon_jtag_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                                    //             clk.clk
		.reset                   (ADC_reset_reset_bridge_in_reset_reset),                                     //       clk_reset.reset
		.m0_address              (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),                                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),                                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),                                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),                                         //                .error
		.rdata_fifo_src_ready    (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (134),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_for_arm_1_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                                 //       clk.clk
		.reset             (ADC_reset_reset_bridge_in_reset_reset),                                  // clk_reset.reset
		.in_data           (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                  // (terminated)
		.csr_read          (1'b0),                                                                   // (terminated)
		.csr_write         (1'b0),                                                                   // (terminated)
		.csr_readdata      (),                                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                   // (terminated)
		.almost_full_data  (),                                                                       // (terminated)
		.almost_empty_data (),                                                                       // (terminated)
		.in_empty          (1'b0),                                                                   // (terminated)
		.out_empty         (),                                                                       // (terminated)
		.in_error          (1'b0),                                                                   // (terminated)
		.out_error         (),                                                                       // (terminated)
		.in_channel        (1'b0),                                                                   // (terminated)
		.out_channel       ()                                                                        // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                           //       clk.clk
		.reset             (ADC_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.in_data           (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                            // (terminated)
		.csr_read          (1'b0),                                                             // (terminated)
		.csr_write         (1'b0),                                                             // (terminated)
		.csr_readdata      (),                                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated)
		.almost_full_data  (),                                                                 // (terminated)
		.almost_empty_data (),                                                                 // (terminated)
		.in_startofpacket  (1'b0),                                                             // (terminated)
		.in_endofpacket    (1'b0),                                                             // (terminated)
		.out_startofpacket (),                                                                 // (terminated)
		.out_endofpacket   (),                                                                 // (terminated)
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.in_error          (1'b0),                                                             // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_channel        (1'b0),                                                             // (terminated)
		.out_channel       ()                                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (104),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (133),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_avalon_jtag_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                       //             clk.clk
		.reset                   (ADC_reset_reset_bridge_in_reset_reset),                        //       clk_reset.reset
		.m0_address              (jtag_uart_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_013_src_ready),                                        //              cp.ready
		.cp_valid                (cmd_mux_013_src_valid),                                        //                .valid
		.cp_data                 (cmd_mux_013_src_data),                                         //                .data
		.cp_startofpacket        (cmd_mux_013_src_startofpacket),                                //                .startofpacket
		.cp_endofpacket          (cmd_mux_013_src_endofpacket),                                  //                .endofpacket
		.cp_channel              (cmd_mux_013_src_channel),                                      //                .channel
		.rf_sink_ready           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_013_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_013_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_013_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_013_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (134),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                       //       clk.clk
		.reset             (ADC_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                 //       clk.clk
		.reset             (ADC_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_startofpacket  (1'b0),                                                   // (terminated)
		.in_endofpacket    (1'b0),                                                   // (terminated)
		.out_startofpacket (),                                                       // (terminated)
		.out_endofpacket   (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (104),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (133),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios2_sram_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                            //             clk.clk
		.reset                   (ADC_reset_reset_bridge_in_reset_reset),             //       clk_reset.reset
		.m0_address              (nios2_sram_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (nios2_sram_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (nios2_sram_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (nios2_sram_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (nios2_sram_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (nios2_sram_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (nios2_sram_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (nios2_sram_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (nios2_sram_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (nios2_sram_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (nios2_sram_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (nios2_sram_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (nios2_sram_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (nios2_sram_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (nios2_sram_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (nios2_sram_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (nios2_sram_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (nios2_sram_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (nios2_sram_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (nios2_sram_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (nios2_sram_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (nios2_sram_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (nios2_sram_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (nios2_sram_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (nios2_sram_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (nios2_sram_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (nios2_sram_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (nios2_sram_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (nios2_sram_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (nios2_sram_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (nios2_sram_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (nios2_sram_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_014_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_014_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_014_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_014_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (nios2_sram_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios2_sram_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (nios2_sram_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (134),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_sram_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset             (ADC_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (nios2_sram_s1_agent_rf_source_data),             //        in.data
		.in_valid          (nios2_sram_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (nios2_sram_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios2_sram_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios2_sram_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios2_sram_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios2_sram_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios2_sram_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios2_sram_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios2_sram_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_sram_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                   //       clk.clk
		.reset             (ADC_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (nios2_sram_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (nios2_sram_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (nios2_sram_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (nios2_sram_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (nios2_sram_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (nios2_sram_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                    // (terminated)
		.csr_read          (1'b0),                                     // (terminated)
		.csr_write         (1'b0),                                     // (terminated)
		.csr_readdata      (),                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),     // (terminated)
		.almost_full_data  (),                                         // (terminated)
		.almost_empty_data (),                                         // (terminated)
		.in_startofpacket  (1'b0),                                     // (terminated)
		.in_endofpacket    (1'b0),                                     // (terminated)
		.out_startofpacket (),                                         // (terminated)
		.out_endofpacket   (),                                         // (terminated)
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_error         (),                                         // (terminated)
		.in_channel        (1'b0),                                     // (terminated)
		.out_channel       ()                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (104),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (133),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios2_2nd_core_sram_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                                     //             clk.clk
		.reset                   (ADC_reset_reset_bridge_in_reset_reset),                      //       clk_reset.reset
		.m0_address              (nios2_2nd_core_sram_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (nios2_2nd_core_sram_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (nios2_2nd_core_sram_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (nios2_2nd_core_sram_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (nios2_2nd_core_sram_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (nios2_2nd_core_sram_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (nios2_2nd_core_sram_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (nios2_2nd_core_sram_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (nios2_2nd_core_sram_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (nios2_2nd_core_sram_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (nios2_2nd_core_sram_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (nios2_2nd_core_sram_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (nios2_2nd_core_sram_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (nios2_2nd_core_sram_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (nios2_2nd_core_sram_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (nios2_2nd_core_sram_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (nios2_2nd_core_sram_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (nios2_2nd_core_sram_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (nios2_2nd_core_sram_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (nios2_2nd_core_sram_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (nios2_2nd_core_sram_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (nios2_2nd_core_sram_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (nios2_2nd_core_sram_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (nios2_2nd_core_sram_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (nios2_2nd_core_sram_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (nios2_2nd_core_sram_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (nios2_2nd_core_sram_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (nios2_2nd_core_sram_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (nios2_2nd_core_sram_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (nios2_2nd_core_sram_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (nios2_2nd_core_sram_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (nios2_2nd_core_sram_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_015_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_015_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_015_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_015_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (nios2_2nd_core_sram_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios2_2nd_core_sram_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (nios2_2nd_core_sram_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (134),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_2nd_core_sram_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                  //       clk.clk
		.reset             (ADC_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (nios2_2nd_core_sram_s1_agent_rf_source_data),             //        in.data
		.in_valid          (nios2_2nd_core_sram_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (nios2_2nd_core_sram_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios2_2nd_core_sram_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios2_2nd_core_sram_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios2_2nd_core_sram_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios2_2nd_core_sram_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios2_2nd_core_sram_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios2_2nd_core_sram_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios2_2nd_core_sram_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_2nd_core_sram_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                            //       clk.clk
		.reset             (ADC_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (nios2_2nd_core_sram_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (nios2_2nd_core_sram_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (nios2_2nd_core_sram_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (nios2_2nd_core_sram_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (nios2_2nd_core_sram_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (nios2_2nd_core_sram_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_startofpacket  (1'b0),                                              // (terminated)
		.in_endofpacket    (1'b0),                                              // (terminated)
		.out_startofpacket (),                                                  // (terminated)
		.out_endofpacket   (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (104),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (133),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) onchip_sram_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                             //             clk.clk
		.reset                   (ADC_reset_reset_bridge_in_reset_reset),              //       clk_reset.reset
		.m0_address              (onchip_sram_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (onchip_sram_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (onchip_sram_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (onchip_sram_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (onchip_sram_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (onchip_sram_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (onchip_sram_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (onchip_sram_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (onchip_sram_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (onchip_sram_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (onchip_sram_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (onchip_sram_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (onchip_sram_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (onchip_sram_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (onchip_sram_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (onchip_sram_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (onchip_sram_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (onchip_sram_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (onchip_sram_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (onchip_sram_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (onchip_sram_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (onchip_sram_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (onchip_sram_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (onchip_sram_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (onchip_sram_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (onchip_sram_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (onchip_sram_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (onchip_sram_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (onchip_sram_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (onchip_sram_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (onchip_sram_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (onchip_sram_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_016_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_016_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_016_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_016_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (onchip_sram_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_sram_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (onchip_sram_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (134),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_sram_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                          //       clk.clk
		.reset             (ADC_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (onchip_sram_s1_agent_rf_source_data),             //        in.data
		.in_valid          (onchip_sram_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (onchip_sram_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (onchip_sram_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_sram_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (onchip_sram_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (onchip_sram_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (onchip_sram_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (onchip_sram_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (onchip_sram_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_sram_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                    //       clk.clk
		.reset             (ADC_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (onchip_sram_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (onchip_sram_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (onchip_sram_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (onchip_sram_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (onchip_sram_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (onchip_sram_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_startofpacket  (1'b0),                                      // (terminated)
		.in_endofpacket    (1'b0),                                      // (terminated)
		.out_startofpacket (),                                          // (terminated)
		.out_endofpacket   (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (104),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (133),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) f2h_mem_window_00000000_windowed_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                                  //             clk.clk
		.reset                   (ADC_reset_reset_bridge_in_reset_reset),                                   //       clk_reset.reset
		.m0_address              (f2h_mem_window_00000000_windowed_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (f2h_mem_window_00000000_windowed_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (f2h_mem_window_00000000_windowed_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (f2h_mem_window_00000000_windowed_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (f2h_mem_window_00000000_windowed_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (f2h_mem_window_00000000_windowed_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (f2h_mem_window_00000000_windowed_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (f2h_mem_window_00000000_windowed_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (f2h_mem_window_00000000_windowed_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (f2h_mem_window_00000000_windowed_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (f2h_mem_window_00000000_windowed_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (f2h_mem_window_00000000_windowed_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (f2h_mem_window_00000000_windowed_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (f2h_mem_window_00000000_windowed_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (f2h_mem_window_00000000_windowed_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (f2h_mem_window_00000000_windowed_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_017_src_ready),                                                   //              cp.ready
		.cp_valid                (cmd_mux_017_src_valid),                                                   //                .valid
		.cp_data                 (cmd_mux_017_src_data),                                                    //                .data
		.cp_startofpacket        (cmd_mux_017_src_startofpacket),                                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_017_src_endofpacket),                                             //                .endofpacket
		.cp_channel              (cmd_mux_017_src_channel),                                                 //                .channel
		.rf_sink_ready           (f2h_mem_window_00000000_windowed_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (f2h_mem_window_00000000_windowed_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (f2h_mem_window_00000000_windowed_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (f2h_mem_window_00000000_windowed_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (f2h_mem_window_00000000_windowed_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (f2h_mem_window_00000000_windowed_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (f2h_mem_window_00000000_windowed_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (f2h_mem_window_00000000_windowed_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (f2h_mem_window_00000000_windowed_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (f2h_mem_window_00000000_windowed_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_017_out_0_ready),                                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_017_out_0_valid),                                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_017_out_0_data),                                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_017_out_0_error),                                       //                .error
		.rdata_fifo_src_ready    (f2h_mem_window_00000000_windowed_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (f2h_mem_window_00000000_windowed_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (f2h_mem_window_00000000_windowed_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (134),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) f2h_mem_window_00000000_windowed_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                                  //       clk.clk
		.reset             (ADC_reset_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.in_data           (f2h_mem_window_00000000_windowed_slave_agent_rf_source_data),             //        in.data
		.in_valid          (f2h_mem_window_00000000_windowed_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (f2h_mem_window_00000000_windowed_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (f2h_mem_window_00000000_windowed_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (f2h_mem_window_00000000_windowed_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (f2h_mem_window_00000000_windowed_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (f2h_mem_window_00000000_windowed_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (f2h_mem_window_00000000_windowed_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (f2h_mem_window_00000000_windowed_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (f2h_mem_window_00000000_windowed_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                   // (terminated)
		.csr_read          (1'b0),                                                                    // (terminated)
		.csr_write         (1'b0),                                                                    // (terminated)
		.csr_readdata      (),                                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated)
		.almost_full_data  (),                                                                        // (terminated)
		.almost_empty_data (),                                                                        // (terminated)
		.in_empty          (1'b0),                                                                    // (terminated)
		.out_empty         (),                                                                        // (terminated)
		.in_error          (1'b0),                                                                    // (terminated)
		.out_error         (),                                                                        // (terminated)
		.in_channel        (1'b0),                                                                    // (terminated)
		.out_channel       ()                                                                         // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) f2h_mem_window_00000000_windowed_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                            //       clk.clk
		.reset             (ADC_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.in_data           (f2h_mem_window_00000000_windowed_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (f2h_mem_window_00000000_windowed_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (f2h_mem_window_00000000_windowed_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (f2h_mem_window_00000000_windowed_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (f2h_mem_window_00000000_windowed_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (f2h_mem_window_00000000_windowed_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                             // (terminated)
		.csr_read          (1'b0),                                                              // (terminated)
		.csr_write         (1'b0),                                                              // (terminated)
		.csr_readdata      (),                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated)
		.almost_full_data  (),                                                                  // (terminated)
		.almost_empty_data (),                                                                  // (terminated)
		.in_startofpacket  (1'b0),                                                              // (terminated)
		.in_endofpacket    (1'b0),                                                              // (terminated)
		.out_startofpacket (),                                                                  // (terminated)
		.out_endofpacket   (),                                                                  // (terminated)
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.in_error          (1'b0),                                                              // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_channel        (1'b0),                                                              // (terminated)
		.out_channel       ()                                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (104),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (133),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) f2h_mem_window_ff600000_windowed_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                                  //             clk.clk
		.reset                   (ADC_reset_reset_bridge_in_reset_reset),                                   //       clk_reset.reset
		.m0_address              (f2h_mem_window_ff600000_windowed_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (f2h_mem_window_ff600000_windowed_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (f2h_mem_window_ff600000_windowed_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (f2h_mem_window_ff600000_windowed_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (f2h_mem_window_ff600000_windowed_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (f2h_mem_window_ff600000_windowed_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (f2h_mem_window_ff600000_windowed_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (f2h_mem_window_ff600000_windowed_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (f2h_mem_window_ff600000_windowed_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (f2h_mem_window_ff600000_windowed_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (f2h_mem_window_ff600000_windowed_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (f2h_mem_window_ff600000_windowed_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (f2h_mem_window_ff600000_windowed_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (f2h_mem_window_ff600000_windowed_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (f2h_mem_window_ff600000_windowed_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (f2h_mem_window_ff600000_windowed_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_018_src_ready),                                                   //              cp.ready
		.cp_valid                (cmd_mux_018_src_valid),                                                   //                .valid
		.cp_data                 (cmd_mux_018_src_data),                                                    //                .data
		.cp_startofpacket        (cmd_mux_018_src_startofpacket),                                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_018_src_endofpacket),                                             //                .endofpacket
		.cp_channel              (cmd_mux_018_src_channel),                                                 //                .channel
		.rf_sink_ready           (f2h_mem_window_ff600000_windowed_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (f2h_mem_window_ff600000_windowed_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (f2h_mem_window_ff600000_windowed_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (f2h_mem_window_ff600000_windowed_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (f2h_mem_window_ff600000_windowed_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (f2h_mem_window_ff600000_windowed_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (f2h_mem_window_ff600000_windowed_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (f2h_mem_window_ff600000_windowed_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (f2h_mem_window_ff600000_windowed_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (f2h_mem_window_ff600000_windowed_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_018_out_0_ready),                                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_018_out_0_valid),                                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_018_out_0_data),                                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_018_out_0_error),                                       //                .error
		.rdata_fifo_src_ready    (f2h_mem_window_ff600000_windowed_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (f2h_mem_window_ff600000_windowed_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (f2h_mem_window_ff600000_windowed_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (134),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) f2h_mem_window_ff600000_windowed_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                                  //       clk.clk
		.reset             (ADC_reset_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.in_data           (f2h_mem_window_ff600000_windowed_slave_agent_rf_source_data),             //        in.data
		.in_valid          (f2h_mem_window_ff600000_windowed_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (f2h_mem_window_ff600000_windowed_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (f2h_mem_window_ff600000_windowed_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (f2h_mem_window_ff600000_windowed_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (f2h_mem_window_ff600000_windowed_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (f2h_mem_window_ff600000_windowed_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (f2h_mem_window_ff600000_windowed_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (f2h_mem_window_ff600000_windowed_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (f2h_mem_window_ff600000_windowed_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                   // (terminated)
		.csr_read          (1'b0),                                                                    // (terminated)
		.csr_write         (1'b0),                                                                    // (terminated)
		.csr_readdata      (),                                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated)
		.almost_full_data  (),                                                                        // (terminated)
		.almost_empty_data (),                                                                        // (terminated)
		.in_empty          (1'b0),                                                                    // (terminated)
		.out_empty         (),                                                                        // (terminated)
		.in_error          (1'b0),                                                                    // (terminated)
		.out_error         (),                                                                        // (terminated)
		.in_channel        (1'b0),                                                                    // (terminated)
		.out_channel       ()                                                                         // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) f2h_mem_window_ff600000_windowed_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                            //       clk.clk
		.reset             (ADC_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.in_data           (f2h_mem_window_ff600000_windowed_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (f2h_mem_window_ff600000_windowed_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (f2h_mem_window_ff600000_windowed_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (f2h_mem_window_ff600000_windowed_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (f2h_mem_window_ff600000_windowed_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (f2h_mem_window_ff600000_windowed_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                             // (terminated)
		.csr_read          (1'b0),                                                              // (terminated)
		.csr_write         (1'b0),                                                              // (terminated)
		.csr_readdata      (),                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated)
		.almost_full_data  (),                                                                  // (terminated)
		.almost_empty_data (),                                                                  // (terminated)
		.in_startofpacket  (1'b0),                                                              // (terminated)
		.in_endofpacket    (1'b0),                                                              // (terminated)
		.out_startofpacket (),                                                                  // (terminated)
		.out_endofpacket   (),                                                                  // (terminated)
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.in_error          (1'b0),                                                              // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_channel        (1'b0),                                                              // (terminated)
		.out_channel       ()                                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (104),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (133),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) f2h_mem_window_ff800000_windowed_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                                  //             clk.clk
		.reset                   (ADC_reset_reset_bridge_in_reset_reset),                                   //       clk_reset.reset
		.m0_address              (f2h_mem_window_ff800000_windowed_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (f2h_mem_window_ff800000_windowed_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (f2h_mem_window_ff800000_windowed_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (f2h_mem_window_ff800000_windowed_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (f2h_mem_window_ff800000_windowed_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (f2h_mem_window_ff800000_windowed_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (f2h_mem_window_ff800000_windowed_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (f2h_mem_window_ff800000_windowed_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (f2h_mem_window_ff800000_windowed_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (f2h_mem_window_ff800000_windowed_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (f2h_mem_window_ff800000_windowed_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (f2h_mem_window_ff800000_windowed_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (f2h_mem_window_ff800000_windowed_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (f2h_mem_window_ff800000_windowed_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (f2h_mem_window_ff800000_windowed_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (f2h_mem_window_ff800000_windowed_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_019_src_ready),                                                   //              cp.ready
		.cp_valid                (cmd_mux_019_src_valid),                                                   //                .valid
		.cp_data                 (cmd_mux_019_src_data),                                                    //                .data
		.cp_startofpacket        (cmd_mux_019_src_startofpacket),                                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_019_src_endofpacket),                                             //                .endofpacket
		.cp_channel              (cmd_mux_019_src_channel),                                                 //                .channel
		.rf_sink_ready           (f2h_mem_window_ff800000_windowed_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (f2h_mem_window_ff800000_windowed_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (f2h_mem_window_ff800000_windowed_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (f2h_mem_window_ff800000_windowed_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (f2h_mem_window_ff800000_windowed_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (f2h_mem_window_ff800000_windowed_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (f2h_mem_window_ff800000_windowed_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (f2h_mem_window_ff800000_windowed_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (f2h_mem_window_ff800000_windowed_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (f2h_mem_window_ff800000_windowed_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_019_out_0_ready),                                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_019_out_0_valid),                                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_019_out_0_data),                                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_019_out_0_error),                                       //                .error
		.rdata_fifo_src_ready    (f2h_mem_window_ff800000_windowed_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (f2h_mem_window_ff800000_windowed_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (f2h_mem_window_ff800000_windowed_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (134),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) f2h_mem_window_ff800000_windowed_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                                  //       clk.clk
		.reset             (ADC_reset_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.in_data           (f2h_mem_window_ff800000_windowed_slave_agent_rf_source_data),             //        in.data
		.in_valid          (f2h_mem_window_ff800000_windowed_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (f2h_mem_window_ff800000_windowed_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (f2h_mem_window_ff800000_windowed_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (f2h_mem_window_ff800000_windowed_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (f2h_mem_window_ff800000_windowed_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (f2h_mem_window_ff800000_windowed_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (f2h_mem_window_ff800000_windowed_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (f2h_mem_window_ff800000_windowed_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (f2h_mem_window_ff800000_windowed_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                   // (terminated)
		.csr_read          (1'b0),                                                                    // (terminated)
		.csr_write         (1'b0),                                                                    // (terminated)
		.csr_readdata      (),                                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated)
		.almost_full_data  (),                                                                        // (terminated)
		.almost_empty_data (),                                                                        // (terminated)
		.in_empty          (1'b0),                                                                    // (terminated)
		.out_empty         (),                                                                        // (terminated)
		.in_error          (1'b0),                                                                    // (terminated)
		.out_error         (),                                                                        // (terminated)
		.in_channel        (1'b0),                                                                    // (terminated)
		.out_channel       ()                                                                         // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) f2h_mem_window_ff800000_windowed_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                            //       clk.clk
		.reset             (ADC_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.in_data           (f2h_mem_window_ff800000_windowed_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (f2h_mem_window_ff800000_windowed_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (f2h_mem_window_ff800000_windowed_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (f2h_mem_window_ff800000_windowed_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (f2h_mem_window_ff800000_windowed_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (f2h_mem_window_ff800000_windowed_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                             // (terminated)
		.csr_read          (1'b0),                                                              // (terminated)
		.csr_write         (1'b0),                                                              // (terminated)
		.csr_readdata      (),                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated)
		.almost_full_data  (),                                                                  // (terminated)
		.almost_empty_data (),                                                                  // (terminated)
		.in_startofpacket  (1'b0),                                                              // (terminated)
		.in_endofpacket    (1'b0),                                                              // (terminated)
		.out_startofpacket (),                                                                  // (terminated)
		.out_endofpacket   (),                                                                  // (terminated)
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.in_error          (1'b0),                                                              // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_channel        (1'b0),                                                              // (terminated)
		.out_channel       ()                                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (104),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (133),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_2nd_core_avalon_jtag_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                                //             clk.clk
		.reset                   (ADC_reset_reset_bridge_in_reset_reset),                                 //       clk_reset.reset
		.m0_address              (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_2nd_core_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_2nd_core_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_2nd_core_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_2nd_core_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_2nd_core_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_020_src_ready),                                                 //              cp.ready
		.cp_valid                (cmd_mux_020_src_valid),                                                 //                .valid
		.cp_data                 (cmd_mux_020_src_data),                                                  //                .data
		.cp_startofpacket        (cmd_mux_020_src_startofpacket),                                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_020_src_endofpacket),                                           //                .endofpacket
		.cp_channel              (cmd_mux_020_src_channel),                                               //                .channel
		.rf_sink_ready           (jtag_uart_2nd_core_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_2nd_core_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_2nd_core_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_2nd_core_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_2nd_core_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_2nd_core_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_2nd_core_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_2nd_core_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_2nd_core_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_2nd_core_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_020_out_0_ready),                                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_020_out_0_valid),                                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_020_out_0_data),                                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_020_out_0_error),                                     //                .error
		.rdata_fifo_src_ready    (jtag_uart_2nd_core_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_2nd_core_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_2nd_core_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (134),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_2nd_core_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                                //       clk.clk
		.reset             (ADC_reset_reset_bridge_in_reset_reset),                                 // clk_reset.reset
		.in_data           (jtag_uart_2nd_core_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_2nd_core_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_2nd_core_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_2nd_core_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_2nd_core_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_2nd_core_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_2nd_core_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_2nd_core_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_2nd_core_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_2nd_core_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated)
		.csr_read          (1'b0),                                                                  // (terminated)
		.csr_write         (1'b0),                                                                  // (terminated)
		.csr_readdata      (),                                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated)
		.almost_full_data  (),                                                                      // (terminated)
		.almost_empty_data (),                                                                      // (terminated)
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.in_error          (1'b0),                                                                  // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_channel        (1'b0),                                                                  // (terminated)
		.out_channel       ()                                                                       // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_2nd_core_avalon_jtag_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset             (ADC_reset_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.in_data           (jtag_uart_2nd_core_avalon_jtag_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (jtag_uart_2nd_core_avalon_jtag_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (jtag_uart_2nd_core_avalon_jtag_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (jtag_uart_2nd_core_avalon_jtag_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (jtag_uart_2nd_core_avalon_jtag_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (jtag_uart_2nd_core_avalon_jtag_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_startofpacket  (1'b0),                                                            // (terminated)
		.in_endofpacket    (1'b0),                                                            // (terminated)
		.out_startofpacket (),                                                                // (terminated)
		.out_endofpacket   (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (104),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (133),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios2_2nd_core_debug_mem_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                          //             clk.clk
		.reset                   (Nios2_2nd_Core_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (nios2_2nd_core_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios2_2nd_core_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios2_2nd_core_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios2_2nd_core_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios2_2nd_core_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios2_2nd_core_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios2_2nd_core_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios2_2nd_core_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios2_2nd_core_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios2_2nd_core_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (nios2_2nd_core_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios2_2nd_core_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios2_2nd_core_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (nios2_2nd_core_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (nios2_2nd_core_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios2_2nd_core_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_021_src_ready),                                           //              cp.ready
		.cp_valid                (cmd_mux_021_src_valid),                                           //                .valid
		.cp_data                 (cmd_mux_021_src_data),                                            //                .data
		.cp_startofpacket        (cmd_mux_021_src_startofpacket),                                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_021_src_endofpacket),                                     //                .endofpacket
		.cp_channel              (cmd_mux_021_src_channel),                                         //                .channel
		.rf_sink_ready           (nios2_2nd_core_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios2_2nd_core_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios2_2nd_core_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios2_2nd_core_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios2_2nd_core_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios2_2nd_core_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios2_2nd_core_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios2_2nd_core_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios2_2nd_core_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios2_2nd_core_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_021_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_021_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_021_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_021_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (nios2_2nd_core_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios2_2nd_core_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios2_2nd_core_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (134),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_2nd_core_debug_mem_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset             (Nios2_2nd_Core_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (nios2_2nd_core_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (nios2_2nd_core_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (nios2_2nd_core_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios2_2nd_core_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios2_2nd_core_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios2_2nd_core_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios2_2nd_core_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios2_2nd_core_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios2_2nd_core_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios2_2nd_core_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_2nd_core_debug_mem_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                    //       clk.clk
		.reset             (Nios2_2nd_Core_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (nios2_2nd_core_debug_mem_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (nios2_2nd_core_debug_mem_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (nios2_2nd_core_debug_mem_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (nios2_2nd_core_debug_mem_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (nios2_2nd_core_debug_mem_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (nios2_2nd_core_debug_mem_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_startofpacket  (1'b0),                                                      // (terminated)
		.in_endofpacket    (1'b0),                                                      // (terminated)
		.out_startofpacket (),                                                          // (terminated)
		.out_endofpacket   (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (104),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (133),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) interval_timer_2nd_core_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                                      //             clk.clk
		.reset                   (ADC_reset_reset_bridge_in_reset_reset),                       //       clk_reset.reset
		.m0_address              (interval_timer_2nd_core_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (interval_timer_2nd_core_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (interval_timer_2nd_core_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (interval_timer_2nd_core_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (interval_timer_2nd_core_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (interval_timer_2nd_core_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (interval_timer_2nd_core_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (interval_timer_2nd_core_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (interval_timer_2nd_core_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (interval_timer_2nd_core_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (interval_timer_2nd_core_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (interval_timer_2nd_core_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (interval_timer_2nd_core_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (interval_timer_2nd_core_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (interval_timer_2nd_core_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (interval_timer_2nd_core_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_022_src_ready),                                       //              cp.ready
		.cp_valid                (cmd_mux_022_src_valid),                                       //                .valid
		.cp_data                 (cmd_mux_022_src_data),                                        //                .data
		.cp_startofpacket        (cmd_mux_022_src_startofpacket),                               //                .startofpacket
		.cp_endofpacket          (cmd_mux_022_src_endofpacket),                                 //                .endofpacket
		.cp_channel              (cmd_mux_022_src_channel),                                     //                .channel
		.rf_sink_ready           (interval_timer_2nd_core_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (interval_timer_2nd_core_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (interval_timer_2nd_core_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (interval_timer_2nd_core_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (interval_timer_2nd_core_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (interval_timer_2nd_core_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (interval_timer_2nd_core_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (interval_timer_2nd_core_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (interval_timer_2nd_core_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (interval_timer_2nd_core_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_022_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_022_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_022_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_022_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (interval_timer_2nd_core_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (interval_timer_2nd_core_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (interval_timer_2nd_core_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (134),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) interval_timer_2nd_core_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                      //       clk.clk
		.reset             (ADC_reset_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.in_data           (interval_timer_2nd_core_s1_agent_rf_source_data),             //        in.data
		.in_valid          (interval_timer_2nd_core_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (interval_timer_2nd_core_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (interval_timer_2nd_core_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (interval_timer_2nd_core_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (interval_timer_2nd_core_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (interval_timer_2nd_core_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (interval_timer_2nd_core_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (interval_timer_2nd_core_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (interval_timer_2nd_core_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) interval_timer_2nd_core_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                //       clk.clk
		.reset             (ADC_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_data           (interval_timer_2nd_core_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (interval_timer_2nd_core_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (interval_timer_2nd_core_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (interval_timer_2nd_core_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (interval_timer_2nd_core_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (interval_timer_2nd_core_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_startofpacket  (1'b0),                                                  // (terminated)
		.in_endofpacket    (1'b0),                                                  // (terminated)
		.out_startofpacket (),                                                      // (terminated)
		.out_endofpacket   (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (104),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (133),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) interval_timer_2nd_core_2_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                                        //             clk.clk
		.reset                   (ADC_reset_reset_bridge_in_reset_reset),                         //       clk_reset.reset
		.m0_address              (interval_timer_2nd_core_2_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (interval_timer_2nd_core_2_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (interval_timer_2nd_core_2_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (interval_timer_2nd_core_2_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (interval_timer_2nd_core_2_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (interval_timer_2nd_core_2_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (interval_timer_2nd_core_2_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (interval_timer_2nd_core_2_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (interval_timer_2nd_core_2_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (interval_timer_2nd_core_2_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (interval_timer_2nd_core_2_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (interval_timer_2nd_core_2_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (interval_timer_2nd_core_2_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (interval_timer_2nd_core_2_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (interval_timer_2nd_core_2_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (interval_timer_2nd_core_2_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_023_src_ready),                                         //              cp.ready
		.cp_valid                (cmd_mux_023_src_valid),                                         //                .valid
		.cp_data                 (cmd_mux_023_src_data),                                          //                .data
		.cp_startofpacket        (cmd_mux_023_src_startofpacket),                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_023_src_endofpacket),                                   //                .endofpacket
		.cp_channel              (cmd_mux_023_src_channel),                                       //                .channel
		.rf_sink_ready           (interval_timer_2nd_core_2_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (interval_timer_2nd_core_2_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (interval_timer_2nd_core_2_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (interval_timer_2nd_core_2_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (interval_timer_2nd_core_2_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (interval_timer_2nd_core_2_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (interval_timer_2nd_core_2_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (interval_timer_2nd_core_2_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (interval_timer_2nd_core_2_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (interval_timer_2nd_core_2_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_023_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_023_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_023_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_023_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (interval_timer_2nd_core_2_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (interval_timer_2nd_core_2_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (interval_timer_2nd_core_2_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (134),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) interval_timer_2nd_core_2_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                        //       clk.clk
		.reset             (ADC_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_data           (interval_timer_2nd_core_2_s1_agent_rf_source_data),             //        in.data
		.in_valid          (interval_timer_2nd_core_2_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (interval_timer_2nd_core_2_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (interval_timer_2nd_core_2_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (interval_timer_2nd_core_2_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (interval_timer_2nd_core_2_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (interval_timer_2nd_core_2_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (interval_timer_2nd_core_2_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (interval_timer_2nd_core_2_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (interval_timer_2nd_core_2_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) interval_timer_2nd_core_2_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                  //       clk.clk
		.reset             (ADC_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (interval_timer_2nd_core_2_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (interval_timer_2nd_core_2_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (interval_timer_2nd_core_2_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (interval_timer_2nd_core_2_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (interval_timer_2nd_core_2_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (interval_timer_2nd_core_2_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_startofpacket  (1'b0),                                                    // (terminated)
		.in_endofpacket    (1'b0),                                                    // (terminated)
		.out_startofpacket (),                                                        // (terminated)
		.out_endofpacket   (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (104),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (133),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios2_sram_s2_agent (
		.clk                     (System_PLL_sys_clk_clk),                         //             clk.clk
		.reset                   (ADC_reset_reset_bridge_in_reset_reset),          //       clk_reset.reset
		.m0_address              (nios2_sram_s2_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios2_sram_s2_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios2_sram_s2_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios2_sram_s2_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios2_sram_s2_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios2_sram_s2_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios2_sram_s2_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios2_sram_s2_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios2_sram_s2_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios2_sram_s2_agent_m0_writedata),               //                .writedata
		.m0_write                (nios2_sram_s2_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios2_sram_s2_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios2_sram_s2_agent_rp_ready),                   //                .ready
		.rp_valid                (nios2_sram_s2_agent_rp_valid),                   //                .valid
		.rp_data                 (nios2_sram_s2_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios2_sram_s2_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_024_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_024_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_024_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_024_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_024_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_024_src_channel),                        //                .channel
		.rf_sink_ready           (nios2_sram_s2_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios2_sram_s2_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios2_sram_s2_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios2_sram_s2_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios2_sram_s2_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios2_sram_s2_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios2_sram_s2_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios2_sram_s2_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios2_sram_s2_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios2_sram_s2_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_024_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_024_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_024_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_024_out_0_error),              //                .error
		.rdata_fifo_src_ready    (nios2_sram_s2_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios2_sram_s2_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios2_sram_s2_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (134),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_sram_s2_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset             (ADC_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (nios2_sram_s2_agent_rf_source_data),             //        in.data
		.in_valid          (nios2_sram_s2_agent_rf_source_valid),            //          .valid
		.in_ready          (nios2_sram_s2_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios2_sram_s2_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios2_sram_s2_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios2_sram_s2_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios2_sram_s2_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios2_sram_s2_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios2_sram_s2_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios2_sram_s2_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_sram_s2_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                   //       clk.clk
		.reset             (ADC_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (nios2_sram_s2_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (nios2_sram_s2_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (nios2_sram_s2_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (nios2_sram_s2_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (nios2_sram_s2_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (nios2_sram_s2_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                    // (terminated)
		.csr_read          (1'b0),                                     // (terminated)
		.csr_write         (1'b0),                                     // (terminated)
		.csr_readdata      (),                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),     // (terminated)
		.almost_full_data  (),                                         // (terminated)
		.almost_empty_data (),                                         // (terminated)
		.in_startofpacket  (1'b0),                                     // (terminated)
		.in_endofpacket    (1'b0),                                     // (terminated)
		.out_startofpacket (),                                         // (terminated)
		.out_endofpacket   (),                                         // (terminated)
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_error         (),                                         // (terminated)
		.in_channel        (1'b0),                                     // (terminated)
		.out_channel       ()                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (104),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (133),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios2_2nd_core_sram_s2_agent (
		.clk                     (System_PLL_sys_clk_clk),                                  //             clk.clk
		.reset                   (ADC_reset_reset_bridge_in_reset_reset),                   //       clk_reset.reset
		.m0_address              (nios2_2nd_core_sram_s2_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios2_2nd_core_sram_s2_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios2_2nd_core_sram_s2_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios2_2nd_core_sram_s2_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios2_2nd_core_sram_s2_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios2_2nd_core_sram_s2_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios2_2nd_core_sram_s2_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios2_2nd_core_sram_s2_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios2_2nd_core_sram_s2_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios2_2nd_core_sram_s2_agent_m0_writedata),               //                .writedata
		.m0_write                (nios2_2nd_core_sram_s2_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios2_2nd_core_sram_s2_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios2_2nd_core_sram_s2_agent_rp_ready),                   //                .ready
		.rp_valid                (nios2_2nd_core_sram_s2_agent_rp_valid),                   //                .valid
		.rp_data                 (nios2_2nd_core_sram_s2_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios2_2nd_core_sram_s2_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_025_src_ready),                                   //              cp.ready
		.cp_valid                (cmd_mux_025_src_valid),                                   //                .valid
		.cp_data                 (cmd_mux_025_src_data),                                    //                .data
		.cp_startofpacket        (cmd_mux_025_src_startofpacket),                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_025_src_endofpacket),                             //                .endofpacket
		.cp_channel              (cmd_mux_025_src_channel),                                 //                .channel
		.rf_sink_ready           (nios2_2nd_core_sram_s2_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios2_2nd_core_sram_s2_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios2_2nd_core_sram_s2_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios2_2nd_core_sram_s2_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios2_2nd_core_sram_s2_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios2_2nd_core_sram_s2_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios2_2nd_core_sram_s2_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios2_2nd_core_sram_s2_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios2_2nd_core_sram_s2_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios2_2nd_core_sram_s2_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_025_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_025_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_025_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_025_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (nios2_2nd_core_sram_s2_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios2_2nd_core_sram_s2_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios2_2nd_core_sram_s2_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (134),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_2nd_core_sram_s2_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                  //       clk.clk
		.reset             (ADC_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (nios2_2nd_core_sram_s2_agent_rf_source_data),             //        in.data
		.in_valid          (nios2_2nd_core_sram_s2_agent_rf_source_valid),            //          .valid
		.in_ready          (nios2_2nd_core_sram_s2_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios2_2nd_core_sram_s2_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios2_2nd_core_sram_s2_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios2_2nd_core_sram_s2_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios2_2nd_core_sram_s2_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios2_2nd_core_sram_s2_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios2_2nd_core_sram_s2_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios2_2nd_core_sram_s2_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_2nd_core_sram_s2_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                            //       clk.clk
		.reset             (ADC_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (nios2_2nd_core_sram_s2_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (nios2_2nd_core_sram_s2_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (nios2_2nd_core_sram_s2_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (nios2_2nd_core_sram_s2_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (nios2_2nd_core_sram_s2_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (nios2_2nd_core_sram_s2_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_startofpacket  (1'b0),                                              // (terminated)
		.in_endofpacket    (1'b0),                                              // (terminated)
		.out_startofpacket (),                                                  // (terminated)
		.out_endofpacket   (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (104),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (133),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) onchip_sram_s2_agent (
		.clk                     (System_PLL_sys_clk_clk),                          //             clk.clk
		.reset                   (ADC_reset_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (onchip_sram_s2_agent_m0_address),                 //              m0.address
		.m0_burstcount           (onchip_sram_s2_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (onchip_sram_s2_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (onchip_sram_s2_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (onchip_sram_s2_agent_m0_lock),                    //                .lock
		.m0_readdata             (onchip_sram_s2_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (onchip_sram_s2_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (onchip_sram_s2_agent_m0_read),                    //                .read
		.m0_waitrequest          (onchip_sram_s2_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (onchip_sram_s2_agent_m0_writedata),               //                .writedata
		.m0_write                (onchip_sram_s2_agent_m0_write),                   //                .write
		.rp_endofpacket          (onchip_sram_s2_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (onchip_sram_s2_agent_rp_ready),                   //                .ready
		.rp_valid                (onchip_sram_s2_agent_rp_valid),                   //                .valid
		.rp_data                 (onchip_sram_s2_agent_rp_data),                    //                .data
		.rp_startofpacket        (onchip_sram_s2_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_026_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_026_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_026_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_026_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_026_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_026_src_channel),                         //                .channel
		.rf_sink_ready           (onchip_sram_s2_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (onchip_sram_s2_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (onchip_sram_s2_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (onchip_sram_s2_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (onchip_sram_s2_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (onchip_sram_s2_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (onchip_sram_s2_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (onchip_sram_s2_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (onchip_sram_s2_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (onchip_sram_s2_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_026_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_026_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_026_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_026_out_0_error),               //                .error
		.rdata_fifo_src_ready    (onchip_sram_s2_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_sram_s2_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (onchip_sram_s2_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (134),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_sram_s2_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                          //       clk.clk
		.reset             (ADC_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (onchip_sram_s2_agent_rf_source_data),             //        in.data
		.in_valid          (onchip_sram_s2_agent_rf_source_valid),            //          .valid
		.in_ready          (onchip_sram_s2_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (onchip_sram_s2_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_sram_s2_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (onchip_sram_s2_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (onchip_sram_s2_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (onchip_sram_s2_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (onchip_sram_s2_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (onchip_sram_s2_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_sram_s2_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                    //       clk.clk
		.reset             (ADC_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (onchip_sram_s2_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (onchip_sram_s2_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (onchip_sram_s2_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (onchip_sram_s2_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (onchip_sram_s2_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (onchip_sram_s2_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_startofpacket  (1'b0),                                      // (terminated)
		.in_endofpacket    (1'b0),                                      // (terminated)
		.out_startofpacket (),                                          // (terminated)
		.out_endofpacket   (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (104),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (133),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios2_debug_mem_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                 //             clk.clk
		.reset                   (Nios2_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (nios2_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios2_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios2_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios2_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios2_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios2_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios2_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios2_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios2_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios2_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (nios2_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios2_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios2_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (nios2_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (nios2_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios2_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_027_src_ready),                                  //              cp.ready
		.cp_valid                (cmd_mux_027_src_valid),                                  //                .valid
		.cp_data                 (cmd_mux_027_src_data),                                   //                .data
		.cp_startofpacket        (cmd_mux_027_src_startofpacket),                          //                .startofpacket
		.cp_endofpacket          (cmd_mux_027_src_endofpacket),                            //                .endofpacket
		.cp_channel              (cmd_mux_027_src_channel),                                //                .channel
		.rf_sink_ready           (nios2_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios2_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios2_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios2_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios2_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios2_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios2_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios2_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios2_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios2_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_027_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_027_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_027_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_027_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (nios2_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios2_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios2_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (134),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_debug_mem_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                 //       clk.clk
		.reset             (Nios2_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (nios2_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (nios2_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (nios2_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios2_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios2_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios2_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios2_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios2_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios2_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios2_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_debug_mem_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                           //       clk.clk
		.reset             (Nios2_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (nios2_debug_mem_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (nios2_debug_mem_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (nios2_debug_mem_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (nios2_debug_mem_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (nios2_debug_mem_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (nios2_debug_mem_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_startofpacket  (1'b0),                                             // (terminated)
		.in_endofpacket    (1'b0),                                             // (terminated)
		.out_startofpacket (),                                                 // (terminated)
		.out_endofpacket   (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	Computer_System_mm_interconnect_0_router router (
		.sink_ready         (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_ready),                        //      sink.ready
		.sink_valid         (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_valid),                        //          .valid
		.sink_data          (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_data),                         //          .data
		.sink_startofpacket (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_endofpacket),                  //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset              (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                                         //       src.ready
		.src_valid          (router_src_valid),                                                         //          .valid
		.src_data           (router_src_data),                                                          //          .data
		.src_channel        (router_src_channel),                                                       //          .channel
		.src_startofpacket  (router_src_startofpacket),                                                 //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                                    //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router router_001 (
		.sink_ready         (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_ready),                         //      sink.ready
		.sink_valid         (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_valid),                         //          .valid
		.sink_data          (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_data),                          //          .data
		.sink_startofpacket (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_endofpacket),                   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset              (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                                     //       src.ready
		.src_valid          (router_001_src_valid),                                                     //          .valid
		.src_data           (router_001_src_data),                                                      //          .data
		.src_channel        (router_001_src_channel),                                                   //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                                //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (nios2_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_data_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                   //       clk.clk
		.reset              (Nios2_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_002_src_ready),                     //       src.ready
		.src_valid          (router_002_src_valid),                     //          .valid
		.src_data           (router_002_src_data),                      //          .data
		.src_channel        (router_002_src_channel),                   //          .channel
		.src_startofpacket  (router_002_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (nios2_2nd_core_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_2nd_core_data_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_2nd_core_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_2nd_core_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_2nd_core_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                            //       clk.clk
		.reset              (Nios2_2nd_Core_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_003_src_ready),                              //       src.ready
		.src_valid          (router_003_src_valid),                              //          .valid
		.src_data           (router_003_src_data),                               //          .data
		.src_channel        (router_003_src_channel),                            //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                         //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_004 router_004 (
		.sink_ready         (jtag_to_fpga_bridge_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (jtag_to_fpga_bridge_master_agent_cp_valid),         //          .valid
		.sink_data          (jtag_to_fpga_bridge_master_agent_cp_data),          //          .data
		.sink_startofpacket (jtag_to_fpga_bridge_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_to_fpga_bridge_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                            //       clk.clk
		.reset              (ADC_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.src_ready          (router_004_src_ready),                              //       src.ready
		.src_valid          (router_004_src_valid),                              //          .valid
		.src_data           (router_004_src_data),                               //          .data
		.src_channel        (router_004_src_channel),                            //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                         //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_005 router_005 (
		.sink_ready         (nios2_2nd_core_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_2nd_core_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_2nd_core_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_2nd_core_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_2nd_core_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                   //       clk.clk
		.reset              (Nios2_2nd_Core_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_005_src_ready),                                     //       src.ready
		.src_valid          (router_005_src_valid),                                     //          .valid
		.src_data           (router_005_src_data),                                      //          .data
		.src_channel        (router_005_src_channel),                                   //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                                //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_006 router_006 (
		.sink_ready         (nios2_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                          //       clk.clk
		.reset              (Nios2_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_006_src_ready),                            //       src.ready
		.src_valid          (router_006_src_valid),                            //          .valid
		.src_data           (router_006_src_data),                             //          .data
		.src_channel        (router_006_src_channel),                          //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                       //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_007 router_007 (
		.sink_ready         (arm_a9_hps_h2f_axi_master_agent_write_cp_ready),                           //      sink.ready
		.sink_valid         (arm_a9_hps_h2f_axi_master_agent_write_cp_valid),                           //          .valid
		.sink_data          (arm_a9_hps_h2f_axi_master_agent_write_cp_data),                            //          .data
		.sink_startofpacket (arm_a9_hps_h2f_axi_master_agent_write_cp_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (arm_a9_hps_h2f_axi_master_agent_write_cp_endofpacket),                     //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset              (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                                                     //       src.ready
		.src_valid          (router_007_src_valid),                                                     //          .valid
		.src_data           (router_007_src_data),                                                      //          .data
		.src_channel        (router_007_src_channel),                                                   //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                                                //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_007 router_008 (
		.sink_ready         (arm_a9_hps_h2f_axi_master_agent_read_cp_ready),                            //      sink.ready
		.sink_valid         (arm_a9_hps_h2f_axi_master_agent_read_cp_valid),                            //          .valid
		.sink_data          (arm_a9_hps_h2f_axi_master_agent_read_cp_data),                             //          .data
		.sink_startofpacket (arm_a9_hps_h2f_axi_master_agent_read_cp_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (arm_a9_hps_h2f_axi_master_agent_read_cp_endofpacket),                      //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset              (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                                                     //       src.ready
		.src_valid          (router_008_src_valid),                                                     //          .valid
		.src_data           (router_008_src_data),                                                      //          .data
		.src_channel        (router_008_src_channel),                                                   //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                                                //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_009 router_009 (
		.sink_ready         (adc_adc_slave_agent_rp_ready),          //      sink.ready
		.sink_valid         (adc_adc_slave_agent_rp_valid),          //          .valid
		.sink_data          (adc_adc_slave_agent_rp_data),           //          .data
		.sink_startofpacket (adc_adc_slave_agent_rp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (adc_adc_slave_agent_rp_endofpacket),    //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                //       clk.clk
		.reset              (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                  //       src.ready
		.src_valid          (router_009_src_valid),                  //          .valid
		.src_data           (router_009_src_data),                   //          .data
		.src_channel        (router_009_src_channel),                //          .channel
		.src_startofpacket  (router_009_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)             //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_009 router_010 (
		.sink_ready         (sysid_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (sysid_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (sysid_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (sysid_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sysid_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                     //       clk.clk
		.reset              (ADC_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_010_src_ready),                       //       src.ready
		.src_valid          (router_010_src_valid),                       //          .valid
		.src_data           (router_010_src_data),                        //          .data
		.src_channel        (router_010_src_channel),                     //          .channel
		.src_startofpacket  (router_010_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                  //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_009 router_011 (
		.sink_ready         (leds_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (leds_s1_agent_rp_valid),                //          .valid
		.sink_data          (leds_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (leds_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (leds_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                //       clk.clk
		.reset              (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                  //       src.ready
		.src_valid          (router_011_src_valid),                  //          .valid
		.src_data           (router_011_src_data),                   //          .data
		.src_channel        (router_011_src_channel),                //          .channel
		.src_startofpacket  (router_011_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)             //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_009 router_012 (
		.sink_ready         (slider_switches_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (slider_switches_s1_agent_rp_valid),         //          .valid
		.sink_data          (slider_switches_s1_agent_rp_data),          //          .data
		.sink_startofpacket (slider_switches_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (slider_switches_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                    //       clk.clk
		.reset              (ADC_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_012_src_ready),                      //       src.ready
		.src_valid          (router_012_src_valid),                      //          .valid
		.src_data           (router_012_src_data),                       //          .data
		.src_channel        (router_012_src_channel),                    //          .channel
		.src_startofpacket  (router_012_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                 //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_009 router_013 (
		.sink_ready         (pushbuttons_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (pushbuttons_s1_agent_rp_valid),         //          .valid
		.sink_data          (pushbuttons_s1_agent_rp_data),          //          .data
		.sink_startofpacket (pushbuttons_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (pushbuttons_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                //       clk.clk
		.reset              (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                  //       src.ready
		.src_valid          (router_013_src_valid),                  //          .valid
		.src_data           (router_013_src_data),                   //          .data
		.src_channel        (router_013_src_channel),                //          .channel
		.src_startofpacket  (router_013_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)             //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_009 router_014 (
		.sink_ready         (expansion_jp1_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (expansion_jp1_s1_agent_rp_valid),         //          .valid
		.sink_data          (expansion_jp1_s1_agent_rp_data),          //          .data
		.sink_startofpacket (expansion_jp1_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (expansion_jp1_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (ADC_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_014_src_ready),                    //       src.ready
		.src_valid          (router_014_src_valid),                    //          .valid
		.src_data           (router_014_src_data),                     //          .data
		.src_channel        (router_014_src_channel),                  //          .channel
		.src_startofpacket  (router_014_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)               //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_009 router_015 (
		.sink_ready         (expansion_jp7_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (expansion_jp7_s1_agent_rp_valid),         //          .valid
		.sink_data          (expansion_jp7_s1_agent_rp_data),          //          .data
		.sink_startofpacket (expansion_jp7_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (expansion_jp7_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (ADC_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_015_src_ready),                    //       src.ready
		.src_valid          (router_015_src_valid),                    //          .valid
		.src_data           (router_015_src_data),                     //          .data
		.src_channel        (router_015_src_channel),                  //          .channel
		.src_startofpacket  (router_015_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)               //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_009 router_016 (
		.sink_ready         (arduino_gpio_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (arduino_gpio_s1_agent_rp_valid),         //          .valid
		.sink_data          (arduino_gpio_s1_agent_rp_data),          //          .data
		.sink_startofpacket (arduino_gpio_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (arduino_gpio_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                 //       clk.clk
		.reset              (ADC_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_016_src_ready),                   //       src.ready
		.src_valid          (router_016_src_valid),                   //          .valid
		.src_data           (router_016_src_data),                    //          .data
		.src_channel        (router_016_src_channel),                 //          .channel
		.src_startofpacket  (router_016_src_startofpacket),           //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)              //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_009 router_017 (
		.sink_ready         (arduino_reset_n_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (arduino_reset_n_s1_agent_rp_valid),         //          .valid
		.sink_data          (arduino_reset_n_s1_agent_rp_data),          //          .data
		.sink_startofpacket (arduino_reset_n_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (arduino_reset_n_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                    //       clk.clk
		.reset              (ADC_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_017_src_ready),                      //       src.ready
		.src_valid          (router_017_src_valid),                      //          .valid
		.src_data           (router_017_src_data),                       //          .data
		.src_channel        (router_017_src_channel),                    //          .channel
		.src_startofpacket  (router_017_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                 //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_018 router_018 (
		.sink_ready         (interval_timer_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (interval_timer_s1_agent_rp_valid),         //          .valid
		.sink_data          (interval_timer_s1_agent_rp_data),          //          .data
		.sink_startofpacket (interval_timer_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (interval_timer_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                   //       clk.clk
		.reset              (ADC_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_018_src_ready),                     //       src.ready
		.src_valid          (router_018_src_valid),                     //          .valid
		.src_data           (router_018_src_data),                      //          .data
		.src_channel        (router_018_src_channel),                   //          .channel
		.src_startofpacket  (router_018_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_018 router_019 (
		.sink_ready         (interval_timer_2_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (interval_timer_2_s1_agent_rp_valid),         //          .valid
		.sink_data          (interval_timer_2_s1_agent_rp_data),          //          .data
		.sink_startofpacket (interval_timer_2_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (interval_timer_2_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                     //       clk.clk
		.reset              (ADC_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_019_src_ready),                       //       src.ready
		.src_valid          (router_019_src_valid),                       //          .valid
		.src_data           (router_019_src_data),                        //          .data
		.src_channel        (router_019_src_channel),                     //          .channel
		.src_startofpacket  (router_019_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                  //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_020 router_020 (
		.sink_ready         (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                       //       clk.clk
		.reset              (ADC_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.src_ready          (router_020_src_ready),                                         //       src.ready
		.src_valid          (router_020_src_valid),                                         //          .valid
		.src_data           (router_020_src_data),                                          //          .data
		.src_channel        (router_020_src_channel),                                       //          .channel
		.src_startofpacket  (router_020_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                                    //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_020 router_021 (
		.sink_ready         (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                       //       clk.clk
		.reset              (ADC_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.src_ready          (router_021_src_ready),                                         //       src.ready
		.src_valid          (router_021_src_valid),                                         //          .valid
		.src_data           (router_021_src_data),                                          //          .data
		.src_channel        (router_021_src_channel),                                       //          .channel
		.src_startofpacket  (router_021_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_021_src_endofpacket)                                    //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_022 router_022 (
		.sink_ready         (jtag_uart_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset              (ADC_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.src_ready          (router_022_src_ready),                               //       src.ready
		.src_valid          (router_022_src_valid),                               //          .valid
		.src_data           (router_022_src_data),                                //          .data
		.src_channel        (router_022_src_channel),                             //          .channel
		.src_startofpacket  (router_022_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_022_src_endofpacket)                          //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_023 router_023 (
		.sink_ready         (nios2_sram_s1_agent_rp_ready),          //      sink.ready
		.sink_valid         (nios2_sram_s1_agent_rp_valid),          //          .valid
		.sink_data          (nios2_sram_s1_agent_rp_data),           //          .data
		.sink_startofpacket (nios2_sram_s1_agent_rp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (nios2_sram_s1_agent_rp_endofpacket),    //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                //       clk.clk
		.reset              (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_023_src_ready),                  //       src.ready
		.src_valid          (router_023_src_valid),                  //          .valid
		.src_data           (router_023_src_data),                   //          .data
		.src_channel        (router_023_src_channel),                //          .channel
		.src_startofpacket  (router_023_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_023_src_endofpacket)             //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_023 router_024 (
		.sink_ready         (nios2_2nd_core_sram_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (nios2_2nd_core_sram_s1_agent_rp_valid),         //          .valid
		.sink_data          (nios2_2nd_core_sram_s1_agent_rp_data),          //          .data
		.sink_startofpacket (nios2_2nd_core_sram_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_2nd_core_sram_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (ADC_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_024_src_ready),                          //       src.ready
		.src_valid          (router_024_src_valid),                          //          .valid
		.src_data           (router_024_src_data),                           //          .data
		.src_channel        (router_024_src_channel),                        //          .channel
		.src_startofpacket  (router_024_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_024_src_endofpacket)                     //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_023 router_025 (
		.sink_ready         (onchip_sram_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (onchip_sram_s1_agent_rp_valid),         //          .valid
		.sink_data          (onchip_sram_s1_agent_rp_data),          //          .data
		.sink_startofpacket (onchip_sram_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (onchip_sram_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                //       clk.clk
		.reset              (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_025_src_ready),                  //       src.ready
		.src_valid          (router_025_src_valid),                  //          .valid
		.src_data           (router_025_src_data),                   //          .data
		.src_channel        (router_025_src_channel),                //          .channel
		.src_startofpacket  (router_025_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_025_src_endofpacket)             //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_026 router_026 (
		.sink_ready         (f2h_mem_window_00000000_windowed_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (f2h_mem_window_00000000_windowed_slave_agent_rp_valid),         //          .valid
		.sink_data          (f2h_mem_window_00000000_windowed_slave_agent_rp_data),          //          .data
		.sink_startofpacket (f2h_mem_window_00000000_windowed_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (f2h_mem_window_00000000_windowed_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                        //       clk.clk
		.reset              (ADC_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.src_ready          (router_026_src_ready),                                          //       src.ready
		.src_valid          (router_026_src_valid),                                          //          .valid
		.src_data           (router_026_src_data),                                           //          .data
		.src_channel        (router_026_src_channel),                                        //          .channel
		.src_startofpacket  (router_026_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket    (router_026_src_endofpacket)                                     //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_026 router_027 (
		.sink_ready         (f2h_mem_window_ff600000_windowed_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (f2h_mem_window_ff600000_windowed_slave_agent_rp_valid),         //          .valid
		.sink_data          (f2h_mem_window_ff600000_windowed_slave_agent_rp_data),          //          .data
		.sink_startofpacket (f2h_mem_window_ff600000_windowed_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (f2h_mem_window_ff600000_windowed_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                        //       clk.clk
		.reset              (ADC_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.src_ready          (router_027_src_ready),                                          //       src.ready
		.src_valid          (router_027_src_valid),                                          //          .valid
		.src_data           (router_027_src_data),                                           //          .data
		.src_channel        (router_027_src_channel),                                        //          .channel
		.src_startofpacket  (router_027_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket    (router_027_src_endofpacket)                                     //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_026 router_028 (
		.sink_ready         (f2h_mem_window_ff800000_windowed_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (f2h_mem_window_ff800000_windowed_slave_agent_rp_valid),         //          .valid
		.sink_data          (f2h_mem_window_ff800000_windowed_slave_agent_rp_data),          //          .data
		.sink_startofpacket (f2h_mem_window_ff800000_windowed_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (f2h_mem_window_ff800000_windowed_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                        //       clk.clk
		.reset              (ADC_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.src_ready          (router_028_src_ready),                                          //       src.ready
		.src_valid          (router_028_src_valid),                                          //          .valid
		.src_data           (router_028_src_data),                                           //          .data
		.src_channel        (router_028_src_channel),                                        //          .channel
		.src_startofpacket  (router_028_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket    (router_028_src_endofpacket)                                     //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_029 router_029 (
		.sink_ready         (jtag_uart_2nd_core_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_2nd_core_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_2nd_core_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_2nd_core_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_2nd_core_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                      //       clk.clk
		.reset              (ADC_reset_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.src_ready          (router_029_src_ready),                                        //       src.ready
		.src_valid          (router_029_src_valid),                                        //          .valid
		.src_data           (router_029_src_data),                                         //          .data
		.src_channel        (router_029_src_channel),                                      //          .channel
		.src_startofpacket  (router_029_src_startofpacket),                                //          .startofpacket
		.src_endofpacket    (router_029_src_endofpacket)                                   //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_030 router_030 (
		.sink_ready         (nios2_2nd_core_debug_mem_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (nios2_2nd_core_debug_mem_slave_agent_rp_valid),         //          .valid
		.sink_data          (nios2_2nd_core_debug_mem_slave_agent_rp_data),          //          .data
		.sink_startofpacket (nios2_2nd_core_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_2nd_core_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                //       clk.clk
		.reset              (Nios2_2nd_Core_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_030_src_ready),                                  //       src.ready
		.src_valid          (router_030_src_valid),                                  //          .valid
		.src_data           (router_030_src_data),                                   //          .data
		.src_channel        (router_030_src_channel),                                //          .channel
		.src_startofpacket  (router_030_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_030_src_endofpacket)                             //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_029 router_031 (
		.sink_ready         (interval_timer_2nd_core_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (interval_timer_2nd_core_s1_agent_rp_valid),         //          .valid
		.sink_data          (interval_timer_2nd_core_s1_agent_rp_data),          //          .data
		.sink_startofpacket (interval_timer_2nd_core_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (interval_timer_2nd_core_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                            //       clk.clk
		.reset              (ADC_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.src_ready          (router_031_src_ready),                              //       src.ready
		.src_valid          (router_031_src_valid),                              //          .valid
		.src_data           (router_031_src_data),                               //          .data
		.src_channel        (router_031_src_channel),                            //          .channel
		.src_startofpacket  (router_031_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_031_src_endofpacket)                         //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_029 router_032 (
		.sink_ready         (interval_timer_2nd_core_2_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (interval_timer_2nd_core_2_s1_agent_rp_valid),         //          .valid
		.sink_data          (interval_timer_2nd_core_2_s1_agent_rp_data),          //          .data
		.sink_startofpacket (interval_timer_2nd_core_2_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (interval_timer_2nd_core_2_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                              //       clk.clk
		.reset              (ADC_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.src_ready          (router_032_src_ready),                                //       src.ready
		.src_valid          (router_032_src_valid),                                //          .valid
		.src_data           (router_032_src_data),                                 //          .data
		.src_channel        (router_032_src_channel),                              //          .channel
		.src_startofpacket  (router_032_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_032_src_endofpacket)                           //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_033 router_033 (
		.sink_ready         (nios2_sram_s2_agent_rp_ready),          //      sink.ready
		.sink_valid         (nios2_sram_s2_agent_rp_valid),          //          .valid
		.sink_data          (nios2_sram_s2_agent_rp_data),           //          .data
		.sink_startofpacket (nios2_sram_s2_agent_rp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (nios2_sram_s2_agent_rp_endofpacket),    //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                //       clk.clk
		.reset              (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_033_src_ready),                  //       src.ready
		.src_valid          (router_033_src_valid),                  //          .valid
		.src_data           (router_033_src_data),                   //          .data
		.src_channel        (router_033_src_channel),                //          .channel
		.src_startofpacket  (router_033_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_033_src_endofpacket)             //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_033 router_034 (
		.sink_ready         (nios2_2nd_core_sram_s2_agent_rp_ready),         //      sink.ready
		.sink_valid         (nios2_2nd_core_sram_s2_agent_rp_valid),         //          .valid
		.sink_data          (nios2_2nd_core_sram_s2_agent_rp_data),          //          .data
		.sink_startofpacket (nios2_2nd_core_sram_s2_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_2nd_core_sram_s2_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (ADC_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_034_src_ready),                          //       src.ready
		.src_valid          (router_034_src_valid),                          //          .valid
		.src_data           (router_034_src_data),                           //          .data
		.src_channel        (router_034_src_channel),                        //          .channel
		.src_startofpacket  (router_034_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_034_src_endofpacket)                     //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_033 router_035 (
		.sink_ready         (onchip_sram_s2_agent_rp_ready),         //      sink.ready
		.sink_valid         (onchip_sram_s2_agent_rp_valid),         //          .valid
		.sink_data          (onchip_sram_s2_agent_rp_data),          //          .data
		.sink_startofpacket (onchip_sram_s2_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (onchip_sram_s2_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                //       clk.clk
		.reset              (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_035_src_ready),                  //       src.ready
		.src_valid          (router_035_src_valid),                  //          .valid
		.src_data           (router_035_src_data),                   //          .data
		.src_channel        (router_035_src_channel),                //          .channel
		.src_startofpacket  (router_035_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_035_src_endofpacket)             //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_036 router_036 (
		.sink_ready         (nios2_debug_mem_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (nios2_debug_mem_slave_agent_rp_valid),         //          .valid
		.sink_data          (nios2_debug_mem_slave_agent_rp_data),          //          .data
		.sink_startofpacket (nios2_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset              (Nios2_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_036_src_ready),                         //       src.ready
		.src_valid          (router_036_src_valid),                         //          .valid
		.src_data           (router_036_src_data),                          //          .data
		.src_channel        (router_036_src_channel),                       //          .channel
		.src_startofpacket  (router_036_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_036_src_endofpacket)                    //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (104),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (99),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (133),
		.ST_CHANNEL_W              (28),
		.VALID_WIDTH               (28),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) arm_a9_hps_h2f_lw_axi_master_wr_limiter (
		.clk                    (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset                  (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                                         //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                                         //          .valid
		.cmd_sink_data          (router_src_data),                                                          //          .data
		.cmd_sink_channel       (router_src_channel),                                                       //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                                 //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                                   //          .endofpacket
		.cmd_src_ready          (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                                        //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                                        //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                                      //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                                         //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                                //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                                  //          .endofpacket
		.rsp_src_ready          (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (104),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (99),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (133),
		.ST_CHANNEL_W              (28),
		.VALID_WIDTH               (28),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) arm_a9_hps_h2f_lw_axi_master_rd_limiter (
		.clk                    (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset                  (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                                     //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                                     //          .valid
		.cmd_sink_data          (router_001_src_data),                                                      //          .data
		.cmd_sink_channel       (router_001_src_channel),                                                   //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                                             //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                               //          .endofpacket
		.cmd_src_ready          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                                    //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                                    //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                                  //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                                     //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                                            //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                                              //          .endofpacket
		.rsp_src_ready          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (104),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (99),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (133),
		.ST_CHANNEL_W              (28),
		.VALID_WIDTH               (28),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) jtag_to_fpga_bridge_master_limiter (
		.clk                    (System_PLL_sys_clk_clk),                                   //       clk.clk
		.reset                  (ADC_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.cmd_sink_ready         (router_004_src_ready),                                     //  cmd_sink.ready
		.cmd_sink_valid         (router_004_src_valid),                                     //          .valid
		.cmd_sink_data          (router_004_src_data),                                      //          .data
		.cmd_sink_channel       (router_004_src_channel),                                   //          .channel
		.cmd_sink_startofpacket (router_004_src_startofpacket),                             //          .startofpacket
		.cmd_sink_endofpacket   (router_004_src_endofpacket),                               //          .endofpacket
		.cmd_src_ready          (jtag_to_fpga_bridge_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (jtag_to_fpga_bridge_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (jtag_to_fpga_bridge_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (jtag_to_fpga_bridge_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (jtag_to_fpga_bridge_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_004_src_ready),                                    //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_004_src_valid),                                    //          .valid
		.rsp_sink_channel       (rsp_mux_004_src_channel),                                  //          .channel
		.rsp_sink_data          (rsp_mux_004_src_data),                                     //          .data
		.rsp_sink_startofpacket (rsp_mux_004_src_startofpacket),                            //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_004_src_endofpacket),                              //          .endofpacket
		.rsp_src_ready          (jtag_to_fpga_bridge_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (jtag_to_fpga_bridge_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (jtag_to_fpga_bridge_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (jtag_to_fpga_bridge_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (jtag_to_fpga_bridge_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (jtag_to_fpga_bridge_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (jtag_to_fpga_bridge_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (144),
		.PKT_DEST_ID_L             (140),
		.PKT_SRC_ID_H              (139),
		.PKT_SRC_ID_L              (135),
		.PKT_BYTE_CNT_H            (117),
		.PKT_BYTE_CNT_L            (110),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (169),
		.ST_CHANNEL_W              (28),
		.VALID_WIDTH               (1),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) arm_a9_hps_h2f_axi_master_wr_limiter (
		.clk                    (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset                  (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_007_src_ready),                                                     //  cmd_sink.ready
		.cmd_sink_valid         (router_007_src_valid),                                                     //          .valid
		.cmd_sink_data          (router_007_src_data),                                                      //          .data
		.cmd_sink_channel       (router_007_src_channel),                                                   //          .channel
		.cmd_sink_startofpacket (router_007_src_startofpacket),                                             //          .startofpacket
		.cmd_sink_endofpacket   (router_007_src_endofpacket),                                               //          .endofpacket
		.cmd_src_ready          (arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_ready),                       //   cmd_src.ready
		.cmd_src_data           (arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_data),                        //          .data
		.cmd_src_channel        (arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_channel),                     //          .channel
		.cmd_src_startofpacket  (arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_startofpacket),               //          .startofpacket
		.cmd_src_endofpacket    (arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_endofpacket),                 //          .endofpacket
		.cmd_src_valid          (arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_valid),                       //          .valid
		.rsp_sink_ready         (arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_ready),                 //  rsp_sink.ready
		.rsp_sink_valid         (arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_valid),                 //          .valid
		.rsp_sink_channel       (arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_channel),               //          .channel
		.rsp_sink_data          (arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_data),                  //          .data
		.rsp_sink_startofpacket (arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket),         //          .startofpacket
		.rsp_sink_endofpacket   (arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket),           //          .endofpacket
		.rsp_src_ready          (arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_ready),                       //   rsp_src.ready
		.rsp_src_valid          (arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_valid),                       //          .valid
		.rsp_src_data           (arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_data),                        //          .data
		.rsp_src_channel        (arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_channel),                     //          .channel
		.rsp_src_startofpacket  (arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_startofpacket),               //          .startofpacket
		.rsp_src_endofpacket    (arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_endofpacket)                  //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (144),
		.PKT_DEST_ID_L             (140),
		.PKT_SRC_ID_H              (139),
		.PKT_SRC_ID_L              (135),
		.PKT_BYTE_CNT_H            (117),
		.PKT_BYTE_CNT_L            (110),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (169),
		.ST_CHANNEL_W              (28),
		.VALID_WIDTH               (1),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) arm_a9_hps_h2f_axi_master_rd_limiter (
		.clk                    (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset                  (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_008_src_ready),                                                     //  cmd_sink.ready
		.cmd_sink_valid         (router_008_src_valid),                                                     //          .valid
		.cmd_sink_data          (router_008_src_data),                                                      //          .data
		.cmd_sink_channel       (router_008_src_channel),                                                   //          .channel
		.cmd_sink_startofpacket (router_008_src_startofpacket),                                             //          .startofpacket
		.cmd_sink_endofpacket   (router_008_src_endofpacket),                                               //          .endofpacket
		.cmd_src_ready          (arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_ready),                       //   cmd_src.ready
		.cmd_src_data           (arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_data),                        //          .data
		.cmd_src_channel        (arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_channel),                     //          .channel
		.cmd_src_startofpacket  (arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_startofpacket),               //          .startofpacket
		.cmd_src_endofpacket    (arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_endofpacket),                 //          .endofpacket
		.cmd_src_valid          (arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_valid),                       //          .valid
		.rsp_sink_ready         (arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_ready),                 //  rsp_sink.ready
		.rsp_sink_valid         (arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_valid),                 //          .valid
		.rsp_sink_channel       (arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_channel),               //          .channel
		.rsp_sink_data          (arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_data),                  //          .data
		.rsp_sink_startofpacket (arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket),         //          .startofpacket
		.rsp_sink_endofpacket   (arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket),           //          .endofpacket
		.rsp_src_ready          (arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_ready),                       //   rsp_src.ready
		.rsp_src_valid          (arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_valid),                       //          .valid
		.rsp_src_data           (arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_data),                        //          .data
		.rsp_src_channel        (arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_channel),                     //          .channel
		.rsp_src_startofpacket  (arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_startofpacket),               //          .startofpacket
		.rsp_src_endofpacket    (arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_endofpacket)                  //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (133),
		.ST_CHANNEL_W              (28),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) adc_adc_slave_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                            //       cr0.clk
		.reset                 (ADC_reset_reset_bridge_in_reset_reset),             // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                 //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                  //          .data
		.sink0_channel         (cmd_mux_src_channel),                               //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                         //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                           //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                 //          .ready
		.source0_valid         (adc_adc_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (adc_adc_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (adc_adc_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (adc_adc_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (adc_adc_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (adc_adc_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (133),
		.ST_CHANNEL_W              (28),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sysid_control_slave_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                  //       cr0.clk
		.reset                 (ADC_reset_reset_bridge_in_reset_reset),                   // cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                                   //     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                                    //          .data
		.sink0_channel         (cmd_mux_001_src_channel),                                 //          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),                           //          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                             //          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                                   //          .ready
		.source0_valid         (sysid_control_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sysid_control_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (sysid_control_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sysid_control_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sysid_control_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sysid_control_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (133),
		.ST_CHANNEL_W              (28),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) leds_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                      //       cr0.clk
		.reset                 (ADC_reset_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                       //     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                        //          .data
		.sink0_channel         (cmd_mux_002_src_channel),                     //          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),               //          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                 //          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                       //          .ready
		.source0_valid         (leds_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (leds_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (leds_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (leds_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (leds_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (leds_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (133),
		.ST_CHANNEL_W              (28),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) slider_switches_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                 //       cr0.clk
		.reset                 (ADC_reset_reset_bridge_in_reset_reset),                  // cr0_reset.reset
		.sink0_valid           (cmd_mux_003_src_valid),                                  //     sink0.valid
		.sink0_data            (cmd_mux_003_src_data),                                   //          .data
		.sink0_channel         (cmd_mux_003_src_channel),                                //          .channel
		.sink0_startofpacket   (cmd_mux_003_src_startofpacket),                          //          .startofpacket
		.sink0_endofpacket     (cmd_mux_003_src_endofpacket),                            //          .endofpacket
		.sink0_ready           (cmd_mux_003_src_ready),                                  //          .ready
		.source0_valid         (slider_switches_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (slider_switches_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (slider_switches_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (slider_switches_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (slider_switches_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (slider_switches_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (133),
		.ST_CHANNEL_W              (28),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) pushbuttons_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                             //       cr0.clk
		.reset                 (ADC_reset_reset_bridge_in_reset_reset),              // cr0_reset.reset
		.sink0_valid           (cmd_mux_004_src_valid),                              //     sink0.valid
		.sink0_data            (cmd_mux_004_src_data),                               //          .data
		.sink0_channel         (cmd_mux_004_src_channel),                            //          .channel
		.sink0_startofpacket   (cmd_mux_004_src_startofpacket),                      //          .startofpacket
		.sink0_endofpacket     (cmd_mux_004_src_endofpacket),                        //          .endofpacket
		.sink0_ready           (cmd_mux_004_src_ready),                              //          .ready
		.source0_valid         (pushbuttons_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (pushbuttons_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (pushbuttons_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (pushbuttons_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (pushbuttons_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (pushbuttons_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (133),
		.ST_CHANNEL_W              (28),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) expansion_jp1_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                               //       cr0.clk
		.reset                 (ADC_reset_reset_bridge_in_reset_reset),                // cr0_reset.reset
		.sink0_valid           (cmd_mux_005_src_valid),                                //     sink0.valid
		.sink0_data            (cmd_mux_005_src_data),                                 //          .data
		.sink0_channel         (cmd_mux_005_src_channel),                              //          .channel
		.sink0_startofpacket   (cmd_mux_005_src_startofpacket),                        //          .startofpacket
		.sink0_endofpacket     (cmd_mux_005_src_endofpacket),                          //          .endofpacket
		.sink0_ready           (cmd_mux_005_src_ready),                                //          .ready
		.source0_valid         (expansion_jp1_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (expansion_jp1_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (expansion_jp1_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (expansion_jp1_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (expansion_jp1_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (expansion_jp1_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (133),
		.ST_CHANNEL_W              (28),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) expansion_jp7_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                               //       cr0.clk
		.reset                 (ADC_reset_reset_bridge_in_reset_reset),                // cr0_reset.reset
		.sink0_valid           (cmd_mux_006_src_valid),                                //     sink0.valid
		.sink0_data            (cmd_mux_006_src_data),                                 //          .data
		.sink0_channel         (cmd_mux_006_src_channel),                              //          .channel
		.sink0_startofpacket   (cmd_mux_006_src_startofpacket),                        //          .startofpacket
		.sink0_endofpacket     (cmd_mux_006_src_endofpacket),                          //          .endofpacket
		.sink0_ready           (cmd_mux_006_src_ready),                                //          .ready
		.source0_valid         (expansion_jp7_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (expansion_jp7_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (expansion_jp7_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (expansion_jp7_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (expansion_jp7_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (expansion_jp7_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (133),
		.ST_CHANNEL_W              (28),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) arduino_gpio_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                              //       cr0.clk
		.reset                 (ADC_reset_reset_bridge_in_reset_reset),               // cr0_reset.reset
		.sink0_valid           (cmd_mux_007_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_007_src_data),                                //          .data
		.sink0_channel         (cmd_mux_007_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_007_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_007_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_007_src_ready),                               //          .ready
		.source0_valid         (arduino_gpio_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (arduino_gpio_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (arduino_gpio_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (arduino_gpio_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (arduino_gpio_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (arduino_gpio_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (133),
		.ST_CHANNEL_W              (28),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) arduino_reset_n_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                 //       cr0.clk
		.reset                 (ADC_reset_reset_bridge_in_reset_reset),                  // cr0_reset.reset
		.sink0_valid           (cmd_mux_008_src_valid),                                  //     sink0.valid
		.sink0_data            (cmd_mux_008_src_data),                                   //          .data
		.sink0_channel         (cmd_mux_008_src_channel),                                //          .channel
		.sink0_startofpacket   (cmd_mux_008_src_startofpacket),                          //          .startofpacket
		.sink0_endofpacket     (cmd_mux_008_src_endofpacket),                            //          .endofpacket
		.sink0_ready           (cmd_mux_008_src_ready),                                  //          .ready
		.source0_valid         (arduino_reset_n_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (arduino_reset_n_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (arduino_reset_n_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (arduino_reset_n_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (arduino_reset_n_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (arduino_reset_n_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (133),
		.ST_CHANNEL_W              (28),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) interval_timer_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                //       cr0.clk
		.reset                 (ADC_reset_reset_bridge_in_reset_reset),                 // cr0_reset.reset
		.sink0_valid           (cmd_mux_009_src_valid),                                 //     sink0.valid
		.sink0_data            (cmd_mux_009_src_data),                                  //          .data
		.sink0_channel         (cmd_mux_009_src_channel),                               //          .channel
		.sink0_startofpacket   (cmd_mux_009_src_startofpacket),                         //          .startofpacket
		.sink0_endofpacket     (cmd_mux_009_src_endofpacket),                           //          .endofpacket
		.sink0_ready           (cmd_mux_009_src_ready),                                 //          .ready
		.source0_valid         (interval_timer_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (interval_timer_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (interval_timer_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (interval_timer_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (interval_timer_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (interval_timer_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (133),
		.ST_CHANNEL_W              (28),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) interval_timer_2_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                  //       cr0.clk
		.reset                 (ADC_reset_reset_bridge_in_reset_reset),                   // cr0_reset.reset
		.sink0_valid           (cmd_mux_010_src_valid),                                   //     sink0.valid
		.sink0_data            (cmd_mux_010_src_data),                                    //          .data
		.sink0_channel         (cmd_mux_010_src_channel),                                 //          .channel
		.sink0_startofpacket   (cmd_mux_010_src_startofpacket),                           //          .startofpacket
		.sink0_endofpacket     (cmd_mux_010_src_endofpacket),                             //          .endofpacket
		.sink0_ready           (cmd_mux_010_src_ready),                                   //          .ready
		.source0_valid         (interval_timer_2_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (interval_timer_2_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (interval_timer_2_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (interval_timer_2_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (interval_timer_2_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (interval_timer_2_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (133),
		.ST_CHANNEL_W              (28),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                                    //       cr0.clk
		.reset                 (ADC_reset_reset_bridge_in_reset_reset),                                     // cr0_reset.reset
		.sink0_valid           (cmd_mux_011_src_valid),                                                     //     sink0.valid
		.sink0_data            (cmd_mux_011_src_data),                                                      //          .data
		.sink0_channel         (cmd_mux_011_src_channel),                                                   //          .channel
		.sink0_startofpacket   (cmd_mux_011_src_startofpacket),                                             //          .startofpacket
		.sink0_endofpacket     (cmd_mux_011_src_endofpacket),                                               //          .endofpacket
		.sink0_ready           (cmd_mux_011_src_ready),                                                     //          .ready
		.source0_valid         (jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (133),
		.ST_CHANNEL_W              (28),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                                    //       cr0.clk
		.reset                 (ADC_reset_reset_bridge_in_reset_reset),                                     // cr0_reset.reset
		.sink0_valid           (cmd_mux_012_src_valid),                                                     //     sink0.valid
		.sink0_data            (cmd_mux_012_src_data),                                                      //          .data
		.sink0_channel         (cmd_mux_012_src_channel),                                                   //          .channel
		.sink0_startofpacket   (cmd_mux_012_src_startofpacket),                                             //          .startofpacket
		.sink0_endofpacket     (cmd_mux_012_src_endofpacket),                                               //          .endofpacket
		.sink0_ready           (cmd_mux_012_src_ready),                                                     //          .ready
		.source0_valid         (jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (133),
		.ST_CHANNEL_W              (28),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) nios2_sram_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                            //       cr0.clk
		.reset                 (ADC_reset_reset_bridge_in_reset_reset),             // cr0_reset.reset
		.sink0_valid           (cmd_mux_014_src_valid),                             //     sink0.valid
		.sink0_data            (cmd_mux_014_src_data),                              //          .data
		.sink0_channel         (cmd_mux_014_src_channel),                           //          .channel
		.sink0_startofpacket   (cmd_mux_014_src_startofpacket),                     //          .startofpacket
		.sink0_endofpacket     (cmd_mux_014_src_endofpacket),                       //          .endofpacket
		.sink0_ready           (cmd_mux_014_src_ready),                             //          .ready
		.source0_valid         (nios2_sram_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (nios2_sram_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (nios2_sram_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (nios2_sram_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (nios2_sram_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (nios2_sram_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (133),
		.ST_CHANNEL_W              (28),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) nios2_2nd_core_sram_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                     //       cr0.clk
		.reset                 (ADC_reset_reset_bridge_in_reset_reset),                      // cr0_reset.reset
		.sink0_valid           (cmd_mux_015_src_valid),                                      //     sink0.valid
		.sink0_data            (cmd_mux_015_src_data),                                       //          .data
		.sink0_channel         (cmd_mux_015_src_channel),                                    //          .channel
		.sink0_startofpacket   (cmd_mux_015_src_startofpacket),                              //          .startofpacket
		.sink0_endofpacket     (cmd_mux_015_src_endofpacket),                                //          .endofpacket
		.sink0_ready           (cmd_mux_015_src_ready),                                      //          .ready
		.source0_valid         (nios2_2nd_core_sram_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (nios2_2nd_core_sram_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (nios2_2nd_core_sram_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (nios2_2nd_core_sram_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (nios2_2nd_core_sram_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (nios2_2nd_core_sram_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (133),
		.ST_CHANNEL_W              (28),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) onchip_sram_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                             //       cr0.clk
		.reset                 (ADC_reset_reset_bridge_in_reset_reset),              // cr0_reset.reset
		.sink0_valid           (cmd_mux_016_src_valid),                              //     sink0.valid
		.sink0_data            (cmd_mux_016_src_data),                               //          .data
		.sink0_channel         (cmd_mux_016_src_channel),                            //          .channel
		.sink0_startofpacket   (cmd_mux_016_src_startofpacket),                      //          .startofpacket
		.sink0_endofpacket     (cmd_mux_016_src_endofpacket),                        //          .endofpacket
		.sink0_ready           (cmd_mux_016_src_ready),                              //          .ready
		.source0_valid         (onchip_sram_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (onchip_sram_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (onchip_sram_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (onchip_sram_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (onchip_sram_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (onchip_sram_s1_burst_adapter_source0_ready)          //          .ready
	);

	Computer_System_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                 (System_PLL_sys_clk_clk),                                                   //        clk.clk
		.reset               (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel        (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_channel),                  //           .channel
		.sink_data           (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket  (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket    (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid          (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready          (cmd_demux_src0_ready),                                                     //       src0.ready
		.src0_valid          (cmd_demux_src0_valid),                                                     //           .valid
		.src0_data           (cmd_demux_src0_data),                                                      //           .data
		.src0_channel        (cmd_demux_src0_channel),                                                   //           .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                                             //           .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                                               //           .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                                                     //       src1.ready
		.src1_valid          (cmd_demux_src1_valid),                                                     //           .valid
		.src1_data           (cmd_demux_src1_data),                                                      //           .data
		.src1_channel        (cmd_demux_src1_channel),                                                   //           .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                                             //           .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                                               //           .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                                                     //       src2.ready
		.src2_valid          (cmd_demux_src2_valid),                                                     //           .valid
		.src2_data           (cmd_demux_src2_data),                                                      //           .data
		.src2_channel        (cmd_demux_src2_channel),                                                   //           .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                                             //           .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                                               //           .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                                                     //       src3.ready
		.src3_valid          (cmd_demux_src3_valid),                                                     //           .valid
		.src3_data           (cmd_demux_src3_data),                                                      //           .data
		.src3_channel        (cmd_demux_src3_channel),                                                   //           .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                                             //           .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                                               //           .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                                                     //       src4.ready
		.src4_valid          (cmd_demux_src4_valid),                                                     //           .valid
		.src4_data           (cmd_demux_src4_data),                                                      //           .data
		.src4_channel        (cmd_demux_src4_channel),                                                   //           .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                                             //           .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                                               //           .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                                                     //       src5.ready
		.src5_valid          (cmd_demux_src5_valid),                                                     //           .valid
		.src5_data           (cmd_demux_src5_data),                                                      //           .data
		.src5_channel        (cmd_demux_src5_channel),                                                   //           .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                                             //           .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                                               //           .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                                                     //       src6.ready
		.src6_valid          (cmd_demux_src6_valid),                                                     //           .valid
		.src6_data           (cmd_demux_src6_data),                                                      //           .data
		.src6_channel        (cmd_demux_src6_channel),                                                   //           .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                                             //           .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                                               //           .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                                                     //       src7.ready
		.src7_valid          (cmd_demux_src7_valid),                                                     //           .valid
		.src7_data           (cmd_demux_src7_data),                                                      //           .data
		.src7_channel        (cmd_demux_src7_channel),                                                   //           .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                                             //           .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                                               //           .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                                                     //       src8.ready
		.src8_valid          (cmd_demux_src8_valid),                                                     //           .valid
		.src8_data           (cmd_demux_src8_data),                                                      //           .data
		.src8_channel        (cmd_demux_src8_channel),                                                   //           .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                                             //           .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                                               //           .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                                                     //       src9.ready
		.src9_valid          (cmd_demux_src9_valid),                                                     //           .valid
		.src9_data           (cmd_demux_src9_data),                                                      //           .data
		.src9_channel        (cmd_demux_src9_channel),                                                   //           .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                                             //           .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                                               //           .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                                                    //      src10.ready
		.src10_valid         (cmd_demux_src10_valid),                                                    //           .valid
		.src10_data          (cmd_demux_src10_data),                                                     //           .data
		.src10_channel       (cmd_demux_src10_channel),                                                  //           .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                                            //           .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),                                              //           .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                                                    //      src11.ready
		.src11_valid         (cmd_demux_src11_valid),                                                    //           .valid
		.src11_data          (cmd_demux_src11_data),                                                     //           .data
		.src11_channel       (cmd_demux_src11_channel),                                                  //           .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),                                            //           .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket),                                              //           .endofpacket
		.src12_ready         (cmd_demux_src12_ready),                                                    //      src12.ready
		.src12_valid         (cmd_demux_src12_valid),                                                    //           .valid
		.src12_data          (cmd_demux_src12_data),                                                     //           .data
		.src12_channel       (cmd_demux_src12_channel),                                                  //           .channel
		.src12_startofpacket (cmd_demux_src12_startofpacket),                                            //           .startofpacket
		.src12_endofpacket   (cmd_demux_src12_endofpacket)                                               //           .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux cmd_demux_001 (
		.clk                 (System_PLL_sys_clk_clk),                                                   //        clk.clk
		.reset               (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel        (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_channel),                  //           .channel
		.sink_data           (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket  (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket    (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready          (cmd_demux_001_src0_ready),                                                 //       src0.ready
		.src0_valid          (cmd_demux_001_src0_valid),                                                 //           .valid
		.src0_data           (cmd_demux_001_src0_data),                                                  //           .data
		.src0_channel        (cmd_demux_001_src0_channel),                                               //           .channel
		.src0_startofpacket  (cmd_demux_001_src0_startofpacket),                                         //           .startofpacket
		.src0_endofpacket    (cmd_demux_001_src0_endofpacket),                                           //           .endofpacket
		.src1_ready          (cmd_demux_001_src1_ready),                                                 //       src1.ready
		.src1_valid          (cmd_demux_001_src1_valid),                                                 //           .valid
		.src1_data           (cmd_demux_001_src1_data),                                                  //           .data
		.src1_channel        (cmd_demux_001_src1_channel),                                               //           .channel
		.src1_startofpacket  (cmd_demux_001_src1_startofpacket),                                         //           .startofpacket
		.src1_endofpacket    (cmd_demux_001_src1_endofpacket),                                           //           .endofpacket
		.src2_ready          (cmd_demux_001_src2_ready),                                                 //       src2.ready
		.src2_valid          (cmd_demux_001_src2_valid),                                                 //           .valid
		.src2_data           (cmd_demux_001_src2_data),                                                  //           .data
		.src2_channel        (cmd_demux_001_src2_channel),                                               //           .channel
		.src2_startofpacket  (cmd_demux_001_src2_startofpacket),                                         //           .startofpacket
		.src2_endofpacket    (cmd_demux_001_src2_endofpacket),                                           //           .endofpacket
		.src3_ready          (cmd_demux_001_src3_ready),                                                 //       src3.ready
		.src3_valid          (cmd_demux_001_src3_valid),                                                 //           .valid
		.src3_data           (cmd_demux_001_src3_data),                                                  //           .data
		.src3_channel        (cmd_demux_001_src3_channel),                                               //           .channel
		.src3_startofpacket  (cmd_demux_001_src3_startofpacket),                                         //           .startofpacket
		.src3_endofpacket    (cmd_demux_001_src3_endofpacket),                                           //           .endofpacket
		.src4_ready          (cmd_demux_001_src4_ready),                                                 //       src4.ready
		.src4_valid          (cmd_demux_001_src4_valid),                                                 //           .valid
		.src4_data           (cmd_demux_001_src4_data),                                                  //           .data
		.src4_channel        (cmd_demux_001_src4_channel),                                               //           .channel
		.src4_startofpacket  (cmd_demux_001_src4_startofpacket),                                         //           .startofpacket
		.src4_endofpacket    (cmd_demux_001_src4_endofpacket),                                           //           .endofpacket
		.src5_ready          (cmd_demux_001_src5_ready),                                                 //       src5.ready
		.src5_valid          (cmd_demux_001_src5_valid),                                                 //           .valid
		.src5_data           (cmd_demux_001_src5_data),                                                  //           .data
		.src5_channel        (cmd_demux_001_src5_channel),                                               //           .channel
		.src5_startofpacket  (cmd_demux_001_src5_startofpacket),                                         //           .startofpacket
		.src5_endofpacket    (cmd_demux_001_src5_endofpacket),                                           //           .endofpacket
		.src6_ready          (cmd_demux_001_src6_ready),                                                 //       src6.ready
		.src6_valid          (cmd_demux_001_src6_valid),                                                 //           .valid
		.src6_data           (cmd_demux_001_src6_data),                                                  //           .data
		.src6_channel        (cmd_demux_001_src6_channel),                                               //           .channel
		.src6_startofpacket  (cmd_demux_001_src6_startofpacket),                                         //           .startofpacket
		.src6_endofpacket    (cmd_demux_001_src6_endofpacket),                                           //           .endofpacket
		.src7_ready          (cmd_demux_001_src7_ready),                                                 //       src7.ready
		.src7_valid          (cmd_demux_001_src7_valid),                                                 //           .valid
		.src7_data           (cmd_demux_001_src7_data),                                                  //           .data
		.src7_channel        (cmd_demux_001_src7_channel),                                               //           .channel
		.src7_startofpacket  (cmd_demux_001_src7_startofpacket),                                         //           .startofpacket
		.src7_endofpacket    (cmd_demux_001_src7_endofpacket),                                           //           .endofpacket
		.src8_ready          (cmd_demux_001_src8_ready),                                                 //       src8.ready
		.src8_valid          (cmd_demux_001_src8_valid),                                                 //           .valid
		.src8_data           (cmd_demux_001_src8_data),                                                  //           .data
		.src8_channel        (cmd_demux_001_src8_channel),                                               //           .channel
		.src8_startofpacket  (cmd_demux_001_src8_startofpacket),                                         //           .startofpacket
		.src8_endofpacket    (cmd_demux_001_src8_endofpacket),                                           //           .endofpacket
		.src9_ready          (cmd_demux_001_src9_ready),                                                 //       src9.ready
		.src9_valid          (cmd_demux_001_src9_valid),                                                 //           .valid
		.src9_data           (cmd_demux_001_src9_data),                                                  //           .data
		.src9_channel        (cmd_demux_001_src9_channel),                                               //           .channel
		.src9_startofpacket  (cmd_demux_001_src9_startofpacket),                                         //           .startofpacket
		.src9_endofpacket    (cmd_demux_001_src9_endofpacket),                                           //           .endofpacket
		.src10_ready         (cmd_demux_001_src10_ready),                                                //      src10.ready
		.src10_valid         (cmd_demux_001_src10_valid),                                                //           .valid
		.src10_data          (cmd_demux_001_src10_data),                                                 //           .data
		.src10_channel       (cmd_demux_001_src10_channel),                                              //           .channel
		.src10_startofpacket (cmd_demux_001_src10_startofpacket),                                        //           .startofpacket
		.src10_endofpacket   (cmd_demux_001_src10_endofpacket),                                          //           .endofpacket
		.src11_ready         (cmd_demux_001_src11_ready),                                                //      src11.ready
		.src11_valid         (cmd_demux_001_src11_valid),                                                //           .valid
		.src11_data          (cmd_demux_001_src11_data),                                                 //           .data
		.src11_channel       (cmd_demux_001_src11_channel),                                              //           .channel
		.src11_startofpacket (cmd_demux_001_src11_startofpacket),                                        //           .startofpacket
		.src11_endofpacket   (cmd_demux_001_src11_endofpacket),                                          //           .endofpacket
		.src12_ready         (cmd_demux_001_src12_ready),                                                //      src12.ready
		.src12_valid         (cmd_demux_001_src12_valid),                                                //           .valid
		.src12_data          (cmd_demux_001_src12_data),                                                 //           .data
		.src12_channel       (cmd_demux_001_src12_channel),                                              //           .channel
		.src12_startofpacket (cmd_demux_001_src12_startofpacket),                                        //           .startofpacket
		.src12_endofpacket   (cmd_demux_001_src12_endofpacket)                                           //           .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_002 cmd_demux_002 (
		.clk                 (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset               (Nios2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready          (router_002_src_ready),                    //      sink.ready
		.sink_channel        (router_002_src_channel),                  //          .channel
		.sink_data           (router_002_src_data),                     //          .data
		.sink_startofpacket  (router_002_src_startofpacket),            //          .startofpacket
		.sink_endofpacket    (router_002_src_endofpacket),              //          .endofpacket
		.sink_valid          (router_002_src_valid),                    //          .valid
		.src0_ready          (cmd_demux_002_src0_ready),                //      src0.ready
		.src0_valid          (cmd_demux_002_src0_valid),                //          .valid
		.src0_data           (cmd_demux_002_src0_data),                 //          .data
		.src0_channel        (cmd_demux_002_src0_channel),              //          .channel
		.src0_startofpacket  (cmd_demux_002_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket    (cmd_demux_002_src0_endofpacket),          //          .endofpacket
		.src1_ready          (cmd_demux_002_src1_ready),                //      src1.ready
		.src1_valid          (cmd_demux_002_src1_valid),                //          .valid
		.src1_data           (cmd_demux_002_src1_data),                 //          .data
		.src1_channel        (cmd_demux_002_src1_channel),              //          .channel
		.src1_startofpacket  (cmd_demux_002_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket    (cmd_demux_002_src1_endofpacket),          //          .endofpacket
		.src2_ready          (cmd_demux_002_src2_ready),                //      src2.ready
		.src2_valid          (cmd_demux_002_src2_valid),                //          .valid
		.src2_data           (cmd_demux_002_src2_data),                 //          .data
		.src2_channel        (cmd_demux_002_src2_channel),              //          .channel
		.src2_startofpacket  (cmd_demux_002_src2_startofpacket),        //          .startofpacket
		.src2_endofpacket    (cmd_demux_002_src2_endofpacket),          //          .endofpacket
		.src3_ready          (cmd_demux_002_src3_ready),                //      src3.ready
		.src3_valid          (cmd_demux_002_src3_valid),                //          .valid
		.src3_data           (cmd_demux_002_src3_data),                 //          .data
		.src3_channel        (cmd_demux_002_src3_channel),              //          .channel
		.src3_startofpacket  (cmd_demux_002_src3_startofpacket),        //          .startofpacket
		.src3_endofpacket    (cmd_demux_002_src3_endofpacket),          //          .endofpacket
		.src4_ready          (cmd_demux_002_src4_ready),                //      src4.ready
		.src4_valid          (cmd_demux_002_src4_valid),                //          .valid
		.src4_data           (cmd_demux_002_src4_data),                 //          .data
		.src4_channel        (cmd_demux_002_src4_channel),              //          .channel
		.src4_startofpacket  (cmd_demux_002_src4_startofpacket),        //          .startofpacket
		.src4_endofpacket    (cmd_demux_002_src4_endofpacket),          //          .endofpacket
		.src5_ready          (cmd_demux_002_src5_ready),                //      src5.ready
		.src5_valid          (cmd_demux_002_src5_valid),                //          .valid
		.src5_data           (cmd_demux_002_src5_data),                 //          .data
		.src5_channel        (cmd_demux_002_src5_channel),              //          .channel
		.src5_startofpacket  (cmd_demux_002_src5_startofpacket),        //          .startofpacket
		.src5_endofpacket    (cmd_demux_002_src5_endofpacket),          //          .endofpacket
		.src6_ready          (cmd_demux_002_src6_ready),                //      src6.ready
		.src6_valid          (cmd_demux_002_src6_valid),                //          .valid
		.src6_data           (cmd_demux_002_src6_data),                 //          .data
		.src6_channel        (cmd_demux_002_src6_channel),              //          .channel
		.src6_startofpacket  (cmd_demux_002_src6_startofpacket),        //          .startofpacket
		.src6_endofpacket    (cmd_demux_002_src6_endofpacket),          //          .endofpacket
		.src7_ready          (cmd_demux_002_src7_ready),                //      src7.ready
		.src7_valid          (cmd_demux_002_src7_valid),                //          .valid
		.src7_data           (cmd_demux_002_src7_data),                 //          .data
		.src7_channel        (cmd_demux_002_src7_channel),              //          .channel
		.src7_startofpacket  (cmd_demux_002_src7_startofpacket),        //          .startofpacket
		.src7_endofpacket    (cmd_demux_002_src7_endofpacket),          //          .endofpacket
		.src8_ready          (cmd_demux_002_src8_ready),                //      src8.ready
		.src8_valid          (cmd_demux_002_src8_valid),                //          .valid
		.src8_data           (cmd_demux_002_src8_data),                 //          .data
		.src8_channel        (cmd_demux_002_src8_channel),              //          .channel
		.src8_startofpacket  (cmd_demux_002_src8_startofpacket),        //          .startofpacket
		.src8_endofpacket    (cmd_demux_002_src8_endofpacket),          //          .endofpacket
		.src9_ready          (cmd_demux_002_src9_ready),                //      src9.ready
		.src9_valid          (cmd_demux_002_src9_valid),                //          .valid
		.src9_data           (cmd_demux_002_src9_data),                 //          .data
		.src9_channel        (cmd_demux_002_src9_channel),              //          .channel
		.src9_startofpacket  (cmd_demux_002_src9_startofpacket),        //          .startofpacket
		.src9_endofpacket    (cmd_demux_002_src9_endofpacket),          //          .endofpacket
		.src10_ready         (cmd_demux_002_src10_ready),               //     src10.ready
		.src10_valid         (cmd_demux_002_src10_valid),               //          .valid
		.src10_data          (cmd_demux_002_src10_data),                //          .data
		.src10_channel       (cmd_demux_002_src10_channel),             //          .channel
		.src10_startofpacket (cmd_demux_002_src10_startofpacket),       //          .startofpacket
		.src10_endofpacket   (cmd_demux_002_src10_endofpacket),         //          .endofpacket
		.src11_ready         (cmd_demux_002_src11_ready),               //     src11.ready
		.src11_valid         (cmd_demux_002_src11_valid),               //          .valid
		.src11_data          (cmd_demux_002_src11_data),                //          .data
		.src11_channel       (cmd_demux_002_src11_channel),             //          .channel
		.src11_startofpacket (cmd_demux_002_src11_startofpacket),       //          .startofpacket
		.src11_endofpacket   (cmd_demux_002_src11_endofpacket),         //          .endofpacket
		.src12_ready         (cmd_demux_002_src12_ready),               //     src12.ready
		.src12_valid         (cmd_demux_002_src12_valid),               //          .valid
		.src12_data          (cmd_demux_002_src12_data),                //          .data
		.src12_channel       (cmd_demux_002_src12_channel),             //          .channel
		.src12_startofpacket (cmd_demux_002_src12_startofpacket),       //          .startofpacket
		.src12_endofpacket   (cmd_demux_002_src12_endofpacket),         //          .endofpacket
		.src13_ready         (cmd_demux_002_src13_ready),               //     src13.ready
		.src13_valid         (cmd_demux_002_src13_valid),               //          .valid
		.src13_data          (cmd_demux_002_src13_data),                //          .data
		.src13_channel       (cmd_demux_002_src13_channel),             //          .channel
		.src13_startofpacket (cmd_demux_002_src13_startofpacket),       //          .startofpacket
		.src13_endofpacket   (cmd_demux_002_src13_endofpacket),         //          .endofpacket
		.src14_ready         (cmd_demux_002_src14_ready),               //     src14.ready
		.src14_valid         (cmd_demux_002_src14_valid),               //          .valid
		.src14_data          (cmd_demux_002_src14_data),                //          .data
		.src14_channel       (cmd_demux_002_src14_channel),             //          .channel
		.src14_startofpacket (cmd_demux_002_src14_startofpacket),       //          .startofpacket
		.src14_endofpacket   (cmd_demux_002_src14_endofpacket),         //          .endofpacket
		.src15_ready         (cmd_demux_002_src15_ready),               //     src15.ready
		.src15_valid         (cmd_demux_002_src15_valid),               //          .valid
		.src15_data          (cmd_demux_002_src15_data),                //          .data
		.src15_channel       (cmd_demux_002_src15_channel),             //          .channel
		.src15_startofpacket (cmd_demux_002_src15_startofpacket),       //          .startofpacket
		.src15_endofpacket   (cmd_demux_002_src15_endofpacket),         //          .endofpacket
		.src16_ready         (cmd_demux_002_src16_ready),               //     src16.ready
		.src16_valid         (cmd_demux_002_src16_valid),               //          .valid
		.src16_data          (cmd_demux_002_src16_data),                //          .data
		.src16_channel       (cmd_demux_002_src16_channel),             //          .channel
		.src16_startofpacket (cmd_demux_002_src16_startofpacket),       //          .startofpacket
		.src16_endofpacket   (cmd_demux_002_src16_endofpacket),         //          .endofpacket
		.src17_ready         (cmd_demux_002_src17_ready),               //     src17.ready
		.src17_valid         (cmd_demux_002_src17_valid),               //          .valid
		.src17_data          (cmd_demux_002_src17_data),                //          .data
		.src17_channel       (cmd_demux_002_src17_channel),             //          .channel
		.src17_startofpacket (cmd_demux_002_src17_startofpacket),       //          .startofpacket
		.src17_endofpacket   (cmd_demux_002_src17_endofpacket),         //          .endofpacket
		.src18_ready         (cmd_demux_002_src18_ready),               //     src18.ready
		.src18_valid         (cmd_demux_002_src18_valid),               //          .valid
		.src18_data          (cmd_demux_002_src18_data),                //          .data
		.src18_channel       (cmd_demux_002_src18_channel),             //          .channel
		.src18_startofpacket (cmd_demux_002_src18_startofpacket),       //          .startofpacket
		.src18_endofpacket   (cmd_demux_002_src18_endofpacket)          //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_002 cmd_demux_003 (
		.clk                 (System_PLL_sys_clk_clk),                           //       clk.clk
		.reset               (Nios2_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready          (router_003_src_ready),                             //      sink.ready
		.sink_channel        (router_003_src_channel),                           //          .channel
		.sink_data           (router_003_src_data),                              //          .data
		.sink_startofpacket  (router_003_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket    (router_003_src_endofpacket),                       //          .endofpacket
		.sink_valid          (router_003_src_valid),                             //          .valid
		.src0_ready          (cmd_demux_003_src0_ready),                         //      src0.ready
		.src0_valid          (cmd_demux_003_src0_valid),                         //          .valid
		.src0_data           (cmd_demux_003_src0_data),                          //          .data
		.src0_channel        (cmd_demux_003_src0_channel),                       //          .channel
		.src0_startofpacket  (cmd_demux_003_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket    (cmd_demux_003_src0_endofpacket),                   //          .endofpacket
		.src1_ready          (cmd_demux_003_src1_ready),                         //      src1.ready
		.src1_valid          (cmd_demux_003_src1_valid),                         //          .valid
		.src1_data           (cmd_demux_003_src1_data),                          //          .data
		.src1_channel        (cmd_demux_003_src1_channel),                       //          .channel
		.src1_startofpacket  (cmd_demux_003_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket    (cmd_demux_003_src1_endofpacket),                   //          .endofpacket
		.src2_ready          (cmd_demux_003_src2_ready),                         //      src2.ready
		.src2_valid          (cmd_demux_003_src2_valid),                         //          .valid
		.src2_data           (cmd_demux_003_src2_data),                          //          .data
		.src2_channel        (cmd_demux_003_src2_channel),                       //          .channel
		.src2_startofpacket  (cmd_demux_003_src2_startofpacket),                 //          .startofpacket
		.src2_endofpacket    (cmd_demux_003_src2_endofpacket),                   //          .endofpacket
		.src3_ready          (cmd_demux_003_src3_ready),                         //      src3.ready
		.src3_valid          (cmd_demux_003_src3_valid),                         //          .valid
		.src3_data           (cmd_demux_003_src3_data),                          //          .data
		.src3_channel        (cmd_demux_003_src3_channel),                       //          .channel
		.src3_startofpacket  (cmd_demux_003_src3_startofpacket),                 //          .startofpacket
		.src3_endofpacket    (cmd_demux_003_src3_endofpacket),                   //          .endofpacket
		.src4_ready          (cmd_demux_003_src4_ready),                         //      src4.ready
		.src4_valid          (cmd_demux_003_src4_valid),                         //          .valid
		.src4_data           (cmd_demux_003_src4_data),                          //          .data
		.src4_channel        (cmd_demux_003_src4_channel),                       //          .channel
		.src4_startofpacket  (cmd_demux_003_src4_startofpacket),                 //          .startofpacket
		.src4_endofpacket    (cmd_demux_003_src4_endofpacket),                   //          .endofpacket
		.src5_ready          (cmd_demux_003_src5_ready),                         //      src5.ready
		.src5_valid          (cmd_demux_003_src5_valid),                         //          .valid
		.src5_data           (cmd_demux_003_src5_data),                          //          .data
		.src5_channel        (cmd_demux_003_src5_channel),                       //          .channel
		.src5_startofpacket  (cmd_demux_003_src5_startofpacket),                 //          .startofpacket
		.src5_endofpacket    (cmd_demux_003_src5_endofpacket),                   //          .endofpacket
		.src6_ready          (cmd_demux_003_src6_ready),                         //      src6.ready
		.src6_valid          (cmd_demux_003_src6_valid),                         //          .valid
		.src6_data           (cmd_demux_003_src6_data),                          //          .data
		.src6_channel        (cmd_demux_003_src6_channel),                       //          .channel
		.src6_startofpacket  (cmd_demux_003_src6_startofpacket),                 //          .startofpacket
		.src6_endofpacket    (cmd_demux_003_src6_endofpacket),                   //          .endofpacket
		.src7_ready          (cmd_demux_003_src7_ready),                         //      src7.ready
		.src7_valid          (cmd_demux_003_src7_valid),                         //          .valid
		.src7_data           (cmd_demux_003_src7_data),                          //          .data
		.src7_channel        (cmd_demux_003_src7_channel),                       //          .channel
		.src7_startofpacket  (cmd_demux_003_src7_startofpacket),                 //          .startofpacket
		.src7_endofpacket    (cmd_demux_003_src7_endofpacket),                   //          .endofpacket
		.src8_ready          (cmd_demux_003_src8_ready),                         //      src8.ready
		.src8_valid          (cmd_demux_003_src8_valid),                         //          .valid
		.src8_data           (cmd_demux_003_src8_data),                          //          .data
		.src8_channel        (cmd_demux_003_src8_channel),                       //          .channel
		.src8_startofpacket  (cmd_demux_003_src8_startofpacket),                 //          .startofpacket
		.src8_endofpacket    (cmd_demux_003_src8_endofpacket),                   //          .endofpacket
		.src9_ready          (cmd_demux_003_src9_ready),                         //      src9.ready
		.src9_valid          (cmd_demux_003_src9_valid),                         //          .valid
		.src9_data           (cmd_demux_003_src9_data),                          //          .data
		.src9_channel        (cmd_demux_003_src9_channel),                       //          .channel
		.src9_startofpacket  (cmd_demux_003_src9_startofpacket),                 //          .startofpacket
		.src9_endofpacket    (cmd_demux_003_src9_endofpacket),                   //          .endofpacket
		.src10_ready         (cmd_demux_003_src10_ready),                        //     src10.ready
		.src10_valid         (cmd_demux_003_src10_valid),                        //          .valid
		.src10_data          (cmd_demux_003_src10_data),                         //          .data
		.src10_channel       (cmd_demux_003_src10_channel),                      //          .channel
		.src10_startofpacket (cmd_demux_003_src10_startofpacket),                //          .startofpacket
		.src10_endofpacket   (cmd_demux_003_src10_endofpacket),                  //          .endofpacket
		.src11_ready         (cmd_demux_003_src11_ready),                        //     src11.ready
		.src11_valid         (cmd_demux_003_src11_valid),                        //          .valid
		.src11_data          (cmd_demux_003_src11_data),                         //          .data
		.src11_channel       (cmd_demux_003_src11_channel),                      //          .channel
		.src11_startofpacket (cmd_demux_003_src11_startofpacket),                //          .startofpacket
		.src11_endofpacket   (cmd_demux_003_src11_endofpacket),                  //          .endofpacket
		.src12_ready         (cmd_demux_003_src12_ready),                        //     src12.ready
		.src12_valid         (cmd_demux_003_src12_valid),                        //          .valid
		.src12_data          (cmd_demux_003_src12_data),                         //          .data
		.src12_channel       (cmd_demux_003_src12_channel),                      //          .channel
		.src12_startofpacket (cmd_demux_003_src12_startofpacket),                //          .startofpacket
		.src12_endofpacket   (cmd_demux_003_src12_endofpacket),                  //          .endofpacket
		.src13_ready         (cmd_demux_003_src13_ready),                        //     src13.ready
		.src13_valid         (cmd_demux_003_src13_valid),                        //          .valid
		.src13_data          (cmd_demux_003_src13_data),                         //          .data
		.src13_channel       (cmd_demux_003_src13_channel),                      //          .channel
		.src13_startofpacket (cmd_demux_003_src13_startofpacket),                //          .startofpacket
		.src13_endofpacket   (cmd_demux_003_src13_endofpacket),                  //          .endofpacket
		.src14_ready         (cmd_demux_003_src14_ready),                        //     src14.ready
		.src14_valid         (cmd_demux_003_src14_valid),                        //          .valid
		.src14_data          (cmd_demux_003_src14_data),                         //          .data
		.src14_channel       (cmd_demux_003_src14_channel),                      //          .channel
		.src14_startofpacket (cmd_demux_003_src14_startofpacket),                //          .startofpacket
		.src14_endofpacket   (cmd_demux_003_src14_endofpacket),                  //          .endofpacket
		.src15_ready         (cmd_demux_003_src15_ready),                        //     src15.ready
		.src15_valid         (cmd_demux_003_src15_valid),                        //          .valid
		.src15_data          (cmd_demux_003_src15_data),                         //          .data
		.src15_channel       (cmd_demux_003_src15_channel),                      //          .channel
		.src15_startofpacket (cmd_demux_003_src15_startofpacket),                //          .startofpacket
		.src15_endofpacket   (cmd_demux_003_src15_endofpacket),                  //          .endofpacket
		.src16_ready         (cmd_demux_003_src16_ready),                        //     src16.ready
		.src16_valid         (cmd_demux_003_src16_valid),                        //          .valid
		.src16_data          (cmd_demux_003_src16_data),                         //          .data
		.src16_channel       (cmd_demux_003_src16_channel),                      //          .channel
		.src16_startofpacket (cmd_demux_003_src16_startofpacket),                //          .startofpacket
		.src16_endofpacket   (cmd_demux_003_src16_endofpacket),                  //          .endofpacket
		.src17_ready         (cmd_demux_003_src17_ready),                        //     src17.ready
		.src17_valid         (cmd_demux_003_src17_valid),                        //          .valid
		.src17_data          (cmd_demux_003_src17_data),                         //          .data
		.src17_channel       (cmd_demux_003_src17_channel),                      //          .channel
		.src17_startofpacket (cmd_demux_003_src17_startofpacket),                //          .startofpacket
		.src17_endofpacket   (cmd_demux_003_src17_endofpacket),                  //          .endofpacket
		.src18_ready         (cmd_demux_003_src18_ready),                        //     src18.ready
		.src18_valid         (cmd_demux_003_src18_valid),                        //          .valid
		.src18_data          (cmd_demux_003_src18_data),                         //          .data
		.src18_channel       (cmd_demux_003_src18_channel),                      //          .channel
		.src18_startofpacket (cmd_demux_003_src18_startofpacket),                //          .startofpacket
		.src18_endofpacket   (cmd_demux_003_src18_endofpacket)                   //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_004 cmd_demux_004 (
		.clk                 (System_PLL_sys_clk_clk),                                   //        clk.clk
		.reset               (ADC_reset_reset_bridge_in_reset_reset),                    //  clk_reset.reset
		.sink_ready          (jtag_to_fpga_bridge_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel        (jtag_to_fpga_bridge_master_limiter_cmd_src_channel),       //           .channel
		.sink_data           (jtag_to_fpga_bridge_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket  (jtag_to_fpga_bridge_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket    (jtag_to_fpga_bridge_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid          (jtag_to_fpga_bridge_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready          (cmd_demux_004_src0_ready),                                 //       src0.ready
		.src0_valid          (cmd_demux_004_src0_valid),                                 //           .valid
		.src0_data           (cmd_demux_004_src0_data),                                  //           .data
		.src0_channel        (cmd_demux_004_src0_channel),                               //           .channel
		.src0_startofpacket  (cmd_demux_004_src0_startofpacket),                         //           .startofpacket
		.src0_endofpacket    (cmd_demux_004_src0_endofpacket),                           //           .endofpacket
		.src1_ready          (cmd_demux_004_src1_ready),                                 //       src1.ready
		.src1_valid          (cmd_demux_004_src1_valid),                                 //           .valid
		.src1_data           (cmd_demux_004_src1_data),                                  //           .data
		.src1_channel        (cmd_demux_004_src1_channel),                               //           .channel
		.src1_startofpacket  (cmd_demux_004_src1_startofpacket),                         //           .startofpacket
		.src1_endofpacket    (cmd_demux_004_src1_endofpacket),                           //           .endofpacket
		.src2_ready          (cmd_demux_004_src2_ready),                                 //       src2.ready
		.src2_valid          (cmd_demux_004_src2_valid),                                 //           .valid
		.src2_data           (cmd_demux_004_src2_data),                                  //           .data
		.src2_channel        (cmd_demux_004_src2_channel),                               //           .channel
		.src2_startofpacket  (cmd_demux_004_src2_startofpacket),                         //           .startofpacket
		.src2_endofpacket    (cmd_demux_004_src2_endofpacket),                           //           .endofpacket
		.src3_ready          (cmd_demux_004_src3_ready),                                 //       src3.ready
		.src3_valid          (cmd_demux_004_src3_valid),                                 //           .valid
		.src3_data           (cmd_demux_004_src3_data),                                  //           .data
		.src3_channel        (cmd_demux_004_src3_channel),                               //           .channel
		.src3_startofpacket  (cmd_demux_004_src3_startofpacket),                         //           .startofpacket
		.src3_endofpacket    (cmd_demux_004_src3_endofpacket),                           //           .endofpacket
		.src4_ready          (cmd_demux_004_src4_ready),                                 //       src4.ready
		.src4_valid          (cmd_demux_004_src4_valid),                                 //           .valid
		.src4_data           (cmd_demux_004_src4_data),                                  //           .data
		.src4_channel        (cmd_demux_004_src4_channel),                               //           .channel
		.src4_startofpacket  (cmd_demux_004_src4_startofpacket),                         //           .startofpacket
		.src4_endofpacket    (cmd_demux_004_src4_endofpacket),                           //           .endofpacket
		.src5_ready          (cmd_demux_004_src5_ready),                                 //       src5.ready
		.src5_valid          (cmd_demux_004_src5_valid),                                 //           .valid
		.src5_data           (cmd_demux_004_src5_data),                                  //           .data
		.src5_channel        (cmd_demux_004_src5_channel),                               //           .channel
		.src5_startofpacket  (cmd_demux_004_src5_startofpacket),                         //           .startofpacket
		.src5_endofpacket    (cmd_demux_004_src5_endofpacket),                           //           .endofpacket
		.src6_ready          (cmd_demux_004_src6_ready),                                 //       src6.ready
		.src6_valid          (cmd_demux_004_src6_valid),                                 //           .valid
		.src6_data           (cmd_demux_004_src6_data),                                  //           .data
		.src6_channel        (cmd_demux_004_src6_channel),                               //           .channel
		.src6_startofpacket  (cmd_demux_004_src6_startofpacket),                         //           .startofpacket
		.src6_endofpacket    (cmd_demux_004_src6_endofpacket),                           //           .endofpacket
		.src7_ready          (cmd_demux_004_src7_ready),                                 //       src7.ready
		.src7_valid          (cmd_demux_004_src7_valid),                                 //           .valid
		.src7_data           (cmd_demux_004_src7_data),                                  //           .data
		.src7_channel        (cmd_demux_004_src7_channel),                               //           .channel
		.src7_startofpacket  (cmd_demux_004_src7_startofpacket),                         //           .startofpacket
		.src7_endofpacket    (cmd_demux_004_src7_endofpacket),                           //           .endofpacket
		.src8_ready          (cmd_demux_004_src8_ready),                                 //       src8.ready
		.src8_valid          (cmd_demux_004_src8_valid),                                 //           .valid
		.src8_data           (cmd_demux_004_src8_data),                                  //           .data
		.src8_channel        (cmd_demux_004_src8_channel),                               //           .channel
		.src8_startofpacket  (cmd_demux_004_src8_startofpacket),                         //           .startofpacket
		.src8_endofpacket    (cmd_demux_004_src8_endofpacket),                           //           .endofpacket
		.src9_ready          (cmd_demux_004_src9_ready),                                 //       src9.ready
		.src9_valid          (cmd_demux_004_src9_valid),                                 //           .valid
		.src9_data           (cmd_demux_004_src9_data),                                  //           .data
		.src9_channel        (cmd_demux_004_src9_channel),                               //           .channel
		.src9_startofpacket  (cmd_demux_004_src9_startofpacket),                         //           .startofpacket
		.src9_endofpacket    (cmd_demux_004_src9_endofpacket),                           //           .endofpacket
		.src10_ready         (cmd_demux_004_src10_ready),                                //      src10.ready
		.src10_valid         (cmd_demux_004_src10_valid),                                //           .valid
		.src10_data          (cmd_demux_004_src10_data),                                 //           .data
		.src10_channel       (cmd_demux_004_src10_channel),                              //           .channel
		.src10_startofpacket (cmd_demux_004_src10_startofpacket),                        //           .startofpacket
		.src10_endofpacket   (cmd_demux_004_src10_endofpacket),                          //           .endofpacket
		.src11_ready         (cmd_demux_004_src11_ready),                                //      src11.ready
		.src11_valid         (cmd_demux_004_src11_valid),                                //           .valid
		.src11_data          (cmd_demux_004_src11_data),                                 //           .data
		.src11_channel       (cmd_demux_004_src11_channel),                              //           .channel
		.src11_startofpacket (cmd_demux_004_src11_startofpacket),                        //           .startofpacket
		.src11_endofpacket   (cmd_demux_004_src11_endofpacket),                          //           .endofpacket
		.src12_ready         (cmd_demux_004_src12_ready),                                //      src12.ready
		.src12_valid         (cmd_demux_004_src12_valid),                                //           .valid
		.src12_data          (cmd_demux_004_src12_data),                                 //           .data
		.src12_channel       (cmd_demux_004_src12_channel),                              //           .channel
		.src12_startofpacket (cmd_demux_004_src12_startofpacket),                        //           .startofpacket
		.src12_endofpacket   (cmd_demux_004_src12_endofpacket),                          //           .endofpacket
		.src13_ready         (cmd_demux_004_src13_ready),                                //      src13.ready
		.src13_valid         (cmd_demux_004_src13_valid),                                //           .valid
		.src13_data          (cmd_demux_004_src13_data),                                 //           .data
		.src13_channel       (cmd_demux_004_src13_channel),                              //           .channel
		.src13_startofpacket (cmd_demux_004_src13_startofpacket),                        //           .startofpacket
		.src13_endofpacket   (cmd_demux_004_src13_endofpacket),                          //           .endofpacket
		.src14_ready         (cmd_demux_004_src14_ready),                                //      src14.ready
		.src14_valid         (cmd_demux_004_src14_valid),                                //           .valid
		.src14_data          (cmd_demux_004_src14_data),                                 //           .data
		.src14_channel       (cmd_demux_004_src14_channel),                              //           .channel
		.src14_startofpacket (cmd_demux_004_src14_startofpacket),                        //           .startofpacket
		.src14_endofpacket   (cmd_demux_004_src14_endofpacket),                          //           .endofpacket
		.src15_ready         (cmd_demux_004_src15_ready),                                //      src15.ready
		.src15_valid         (cmd_demux_004_src15_valid),                                //           .valid
		.src15_data          (cmd_demux_004_src15_data),                                 //           .data
		.src15_channel       (cmd_demux_004_src15_channel),                              //           .channel
		.src15_startofpacket (cmd_demux_004_src15_startofpacket),                        //           .startofpacket
		.src15_endofpacket   (cmd_demux_004_src15_endofpacket),                          //           .endofpacket
		.src16_ready         (cmd_demux_004_src16_ready),                                //      src16.ready
		.src16_valid         (cmd_demux_004_src16_valid),                                //           .valid
		.src16_data          (cmd_demux_004_src16_data),                                 //           .data
		.src16_channel       (cmd_demux_004_src16_channel),                              //           .channel
		.src16_startofpacket (cmd_demux_004_src16_startofpacket),                        //           .startofpacket
		.src16_endofpacket   (cmd_demux_004_src16_endofpacket),                          //           .endofpacket
		.src17_ready         (cmd_demux_004_src17_ready),                                //      src17.ready
		.src17_valid         (cmd_demux_004_src17_valid),                                //           .valid
		.src17_data          (cmd_demux_004_src17_data),                                 //           .data
		.src17_channel       (cmd_demux_004_src17_channel),                              //           .channel
		.src17_startofpacket (cmd_demux_004_src17_startofpacket),                        //           .startofpacket
		.src17_endofpacket   (cmd_demux_004_src17_endofpacket)                           //           .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_005 cmd_demux_005 (
		.clk                (System_PLL_sys_clk_clk),                           //       clk.clk
		.reset              (Nios2_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                             //      sink.ready
		.sink_channel       (router_005_src_channel),                           //          .channel
		.sink_data          (router_005_src_data),                              //          .data
		.sink_startofpacket (router_005_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_005_src_valid),                             //          .valid
		.src0_ready         (cmd_demux_005_src0_ready),                         //      src0.ready
		.src0_valid         (cmd_demux_005_src0_valid),                         //          .valid
		.src0_data          (cmd_demux_005_src0_data),                          //          .data
		.src0_channel       (cmd_demux_005_src0_channel),                       //          .channel
		.src0_startofpacket (cmd_demux_005_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (cmd_demux_005_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (cmd_demux_005_src1_ready),                         //      src1.ready
		.src1_valid         (cmd_demux_005_src1_valid),                         //          .valid
		.src1_data          (cmd_demux_005_src1_data),                          //          .data
		.src1_channel       (cmd_demux_005_src1_channel),                       //          .channel
		.src1_startofpacket (cmd_demux_005_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (cmd_demux_005_src1_endofpacket),                   //          .endofpacket
		.src2_ready         (cmd_demux_005_src2_ready),                         //      src2.ready
		.src2_valid         (cmd_demux_005_src2_valid),                         //          .valid
		.src2_data          (cmd_demux_005_src2_data),                          //          .data
		.src2_channel       (cmd_demux_005_src2_channel),                       //          .channel
		.src2_startofpacket (cmd_demux_005_src2_startofpacket),                 //          .startofpacket
		.src2_endofpacket   (cmd_demux_005_src2_endofpacket),                   //          .endofpacket
		.src3_ready         (cmd_demux_005_src3_ready),                         //      src3.ready
		.src3_valid         (cmd_demux_005_src3_valid),                         //          .valid
		.src3_data          (cmd_demux_005_src3_data),                          //          .data
		.src3_channel       (cmd_demux_005_src3_channel),                       //          .channel
		.src3_startofpacket (cmd_demux_005_src3_startofpacket),                 //          .startofpacket
		.src3_endofpacket   (cmd_demux_005_src3_endofpacket)                    //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_005 cmd_demux_006 (
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (Nios2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                    //      sink.ready
		.sink_channel       (router_006_src_channel),                  //          .channel
		.sink_data          (router_006_src_data),                     //          .data
		.sink_startofpacket (router_006_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_006_src_valid),                    //          .valid
		.src0_ready         (cmd_demux_006_src0_ready),                //      src0.ready
		.src0_valid         (cmd_demux_006_src0_valid),                //          .valid
		.src0_data          (cmd_demux_006_src0_data),                 //          .data
		.src0_channel       (cmd_demux_006_src0_channel),              //          .channel
		.src0_startofpacket (cmd_demux_006_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (cmd_demux_006_src0_endofpacket),          //          .endofpacket
		.src1_ready         (cmd_demux_006_src1_ready),                //      src1.ready
		.src1_valid         (cmd_demux_006_src1_valid),                //          .valid
		.src1_data          (cmd_demux_006_src1_data),                 //          .data
		.src1_channel       (cmd_demux_006_src1_channel),              //          .channel
		.src1_startofpacket (cmd_demux_006_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (cmd_demux_006_src1_endofpacket),          //          .endofpacket
		.src2_ready         (cmd_demux_006_src2_ready),                //      src2.ready
		.src2_valid         (cmd_demux_006_src2_valid),                //          .valid
		.src2_data          (cmd_demux_006_src2_data),                 //          .data
		.src2_channel       (cmd_demux_006_src2_channel),              //          .channel
		.src2_startofpacket (cmd_demux_006_src2_startofpacket),        //          .startofpacket
		.src2_endofpacket   (cmd_demux_006_src2_endofpacket),          //          .endofpacket
		.src3_ready         (cmd_demux_006_src3_ready),                //      src3.ready
		.src3_valid         (cmd_demux_006_src3_valid),                //          .valid
		.src3_data          (cmd_demux_006_src3_data),                 //          .data
		.src3_channel       (cmd_demux_006_src3_channel),              //          .channel
		.src3_startofpacket (cmd_demux_006_src3_startofpacket),        //          .startofpacket
		.src3_endofpacket   (cmd_demux_006_src3_endofpacket)           //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_007 cmd_demux_007 (
		.clk                (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset              (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (arm_a9_hps_h2f_axi_master_wr_cmd_width_adapter_src_ready),                 //      sink.ready
		.sink_channel       (arm_a9_hps_h2f_axi_master_wr_cmd_width_adapter_src_channel),               //          .channel
		.sink_data          (arm_a9_hps_h2f_axi_master_wr_cmd_width_adapter_src_data),                  //          .data
		.sink_startofpacket (arm_a9_hps_h2f_axi_master_wr_cmd_width_adapter_src_startofpacket),         //          .startofpacket
		.sink_endofpacket   (arm_a9_hps_h2f_axi_master_wr_cmd_width_adapter_src_endofpacket),           //          .endofpacket
		.sink_valid         (arm_a9_hps_h2f_axi_master_wr_cmd_width_adapter_src_valid),                 //          .valid
		.src0_ready         (cmd_demux_007_src0_ready),                                                 //      src0.ready
		.src0_valid         (cmd_demux_007_src0_valid),                                                 //          .valid
		.src0_data          (cmd_demux_007_src0_data),                                                  //          .data
		.src0_channel       (cmd_demux_007_src0_channel),                                               //          .channel
		.src0_startofpacket (cmd_demux_007_src0_startofpacket),                                         //          .startofpacket
		.src0_endofpacket   (cmd_demux_007_src0_endofpacket),                                           //          .endofpacket
		.src1_ready         (cmd_demux_007_src1_ready),                                                 //      src1.ready
		.src1_valid         (cmd_demux_007_src1_valid),                                                 //          .valid
		.src1_data          (cmd_demux_007_src1_data),                                                  //          .data
		.src1_channel       (cmd_demux_007_src1_channel),                                               //          .channel
		.src1_startofpacket (cmd_demux_007_src1_startofpacket),                                         //          .startofpacket
		.src1_endofpacket   (cmd_demux_007_src1_endofpacket),                                           //          .endofpacket
		.src2_ready         (cmd_demux_007_src2_ready),                                                 //      src2.ready
		.src2_valid         (cmd_demux_007_src2_valid),                                                 //          .valid
		.src2_data          (cmd_demux_007_src2_data),                                                  //          .data
		.src2_channel       (cmd_demux_007_src2_channel),                                               //          .channel
		.src2_startofpacket (cmd_demux_007_src2_startofpacket),                                         //          .startofpacket
		.src2_endofpacket   (cmd_demux_007_src2_endofpacket)                                            //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_007 cmd_demux_008 (
		.clk                (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset              (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (arm_a9_hps_h2f_axi_master_rd_cmd_width_adapter_src_ready),                 //      sink.ready
		.sink_channel       (arm_a9_hps_h2f_axi_master_rd_cmd_width_adapter_src_channel),               //          .channel
		.sink_data          (arm_a9_hps_h2f_axi_master_rd_cmd_width_adapter_src_data),                  //          .data
		.sink_startofpacket (arm_a9_hps_h2f_axi_master_rd_cmd_width_adapter_src_startofpacket),         //          .startofpacket
		.sink_endofpacket   (arm_a9_hps_h2f_axi_master_rd_cmd_width_adapter_src_endofpacket),           //          .endofpacket
		.sink_valid         (arm_a9_hps_h2f_axi_master_rd_cmd_width_adapter_src_valid),                 //          .valid
		.src0_ready         (cmd_demux_008_src0_ready),                                                 //      src0.ready
		.src0_valid         (cmd_demux_008_src0_valid),                                                 //          .valid
		.src0_data          (cmd_demux_008_src0_data),                                                  //          .data
		.src0_channel       (cmd_demux_008_src0_channel),                                               //          .channel
		.src0_startofpacket (cmd_demux_008_src0_startofpacket),                                         //          .startofpacket
		.src0_endofpacket   (cmd_demux_008_src0_endofpacket),                                           //          .endofpacket
		.src1_ready         (cmd_demux_008_src1_ready),                                                 //      src1.ready
		.src1_valid         (cmd_demux_008_src1_valid),                                                 //          .valid
		.src1_data          (cmd_demux_008_src1_data),                                                  //          .data
		.src1_channel       (cmd_demux_008_src1_channel),                                               //          .channel
		.src1_startofpacket (cmd_demux_008_src1_startofpacket),                                         //          .startofpacket
		.src1_endofpacket   (cmd_demux_008_src1_endofpacket),                                           //          .endofpacket
		.src2_ready         (cmd_demux_008_src2_ready),                                                 //      src2.ready
		.src2_valid         (cmd_demux_008_src2_valid),                                                 //          .valid
		.src2_data          (cmd_demux_008_src2_data),                                                  //          .data
		.src2_channel       (cmd_demux_008_src2_channel),                                               //          .channel
		.src2_startofpacket (cmd_demux_008_src2_startofpacket),                                         //          .startofpacket
		.src2_endofpacket   (cmd_demux_008_src2_endofpacket)                                            //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (System_PLL_sys_clk_clk),                //       clk.clk
		.reset               (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                     //       src.ready
		.src_valid           (cmd_mux_src_valid),                     //          .valid
		.src_data            (cmd_mux_src_data),                      //          .data
		.src_channel         (cmd_mux_src_channel),                   //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),               //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                //          .channel
		.sink0_data          (cmd_demux_src0_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),              //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),            //          .channel
		.sink1_data          (cmd_demux_001_src0_data),               //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket),        //          .endofpacket
		.sink2_ready         (cmd_demux_002_src0_ready),              //     sink2.ready
		.sink2_valid         (cmd_demux_002_src0_valid),              //          .valid
		.sink2_channel       (cmd_demux_002_src0_channel),            //          .channel
		.sink2_data          (cmd_demux_002_src0_data),               //          .data
		.sink2_startofpacket (cmd_demux_002_src0_startofpacket),      //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src0_endofpacket),        //          .endofpacket
		.sink3_ready         (cmd_demux_003_src0_ready),              //     sink3.ready
		.sink3_valid         (cmd_demux_003_src0_valid),              //          .valid
		.sink3_channel       (cmd_demux_003_src0_channel),            //          .channel
		.sink3_data          (cmd_demux_003_src0_data),               //          .data
		.sink3_startofpacket (cmd_demux_003_src0_startofpacket),      //          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src0_endofpacket),        //          .endofpacket
		.sink4_ready         (cmd_demux_004_src0_ready),              //     sink4.ready
		.sink4_valid         (cmd_demux_004_src0_valid),              //          .valid
		.sink4_channel       (cmd_demux_004_src0_channel),            //          .channel
		.sink4_data          (cmd_demux_004_src0_data),               //          .data
		.sink4_startofpacket (cmd_demux_004_src0_startofpacket),      //          .startofpacket
		.sink4_endofpacket   (cmd_demux_004_src0_endofpacket)         //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (System_PLL_sys_clk_clk),                //       clk.clk
		.reset               (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                 //          .valid
		.src_data            (cmd_mux_001_src_data),                  //          .data
		.src_channel         (cmd_mux_001_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                //          .channel
		.sink0_data          (cmd_demux_src1_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),              //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),            //          .channel
		.sink1_data          (cmd_demux_001_src1_data),               //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket),        //          .endofpacket
		.sink2_ready         (cmd_demux_002_src1_ready),              //     sink2.ready
		.sink2_valid         (cmd_demux_002_src1_valid),              //          .valid
		.sink2_channel       (cmd_demux_002_src1_channel),            //          .channel
		.sink2_data          (cmd_demux_002_src1_data),               //          .data
		.sink2_startofpacket (cmd_demux_002_src1_startofpacket),      //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src1_endofpacket),        //          .endofpacket
		.sink3_ready         (cmd_demux_003_src1_ready),              //     sink3.ready
		.sink3_valid         (cmd_demux_003_src1_valid),              //          .valid
		.sink3_channel       (cmd_demux_003_src1_channel),            //          .channel
		.sink3_data          (cmd_demux_003_src1_data),               //          .data
		.sink3_startofpacket (cmd_demux_003_src1_startofpacket),      //          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src1_endofpacket),        //          .endofpacket
		.sink4_ready         (cmd_demux_004_src1_ready),              //     sink4.ready
		.sink4_valid         (cmd_demux_004_src1_valid),              //          .valid
		.sink4_channel       (cmd_demux_004_src1_channel),            //          .channel
		.sink4_data          (cmd_demux_004_src1_data),               //          .data
		.sink4_startofpacket (cmd_demux_004_src1_startofpacket),      //          .startofpacket
		.sink4_endofpacket   (cmd_demux_004_src1_endofpacket)         //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (System_PLL_sys_clk_clk),                //       clk.clk
		.reset               (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                 //          .valid
		.src_data            (cmd_mux_002_src_data),                  //          .data
		.src_channel         (cmd_mux_002_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                //          .channel
		.sink0_data          (cmd_demux_src2_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),              //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),            //          .channel
		.sink1_data          (cmd_demux_001_src2_data),               //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket),        //          .endofpacket
		.sink2_ready         (cmd_demux_002_src2_ready),              //     sink2.ready
		.sink2_valid         (cmd_demux_002_src2_valid),              //          .valid
		.sink2_channel       (cmd_demux_002_src2_channel),            //          .channel
		.sink2_data          (cmd_demux_002_src2_data),               //          .data
		.sink2_startofpacket (cmd_demux_002_src2_startofpacket),      //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src2_endofpacket),        //          .endofpacket
		.sink3_ready         (cmd_demux_003_src2_ready),              //     sink3.ready
		.sink3_valid         (cmd_demux_003_src2_valid),              //          .valid
		.sink3_channel       (cmd_demux_003_src2_channel),            //          .channel
		.sink3_data          (cmd_demux_003_src2_data),               //          .data
		.sink3_startofpacket (cmd_demux_003_src2_startofpacket),      //          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src2_endofpacket),        //          .endofpacket
		.sink4_ready         (cmd_demux_004_src2_ready),              //     sink4.ready
		.sink4_valid         (cmd_demux_004_src2_valid),              //          .valid
		.sink4_channel       (cmd_demux_004_src2_channel),            //          .channel
		.sink4_data          (cmd_demux_004_src2_data),               //          .data
		.sink4_startofpacket (cmd_demux_004_src2_startofpacket),      //          .startofpacket
		.sink4_endofpacket   (cmd_demux_004_src2_endofpacket)         //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux cmd_mux_003 (
		.clk                 (System_PLL_sys_clk_clk),                //       clk.clk
		.reset               (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                 //          .valid
		.src_data            (cmd_mux_003_src_data),                  //          .data
		.src_channel         (cmd_mux_003_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                //          .channel
		.sink0_data          (cmd_demux_src3_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_demux_001_src3_ready),              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src3_valid),              //          .valid
		.sink1_channel       (cmd_demux_001_src3_channel),            //          .channel
		.sink1_data          (cmd_demux_001_src3_data),               //          .data
		.sink1_startofpacket (cmd_demux_001_src3_startofpacket),      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src3_endofpacket),        //          .endofpacket
		.sink2_ready         (cmd_demux_002_src3_ready),              //     sink2.ready
		.sink2_valid         (cmd_demux_002_src3_valid),              //          .valid
		.sink2_channel       (cmd_demux_002_src3_channel),            //          .channel
		.sink2_data          (cmd_demux_002_src3_data),               //          .data
		.sink2_startofpacket (cmd_demux_002_src3_startofpacket),      //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src3_endofpacket),        //          .endofpacket
		.sink3_ready         (cmd_demux_003_src3_ready),              //     sink3.ready
		.sink3_valid         (cmd_demux_003_src3_valid),              //          .valid
		.sink3_channel       (cmd_demux_003_src3_channel),            //          .channel
		.sink3_data          (cmd_demux_003_src3_data),               //          .data
		.sink3_startofpacket (cmd_demux_003_src3_startofpacket),      //          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src3_endofpacket),        //          .endofpacket
		.sink4_ready         (cmd_demux_004_src3_ready),              //     sink4.ready
		.sink4_valid         (cmd_demux_004_src3_valid),              //          .valid
		.sink4_channel       (cmd_demux_004_src3_channel),            //          .channel
		.sink4_data          (cmd_demux_004_src3_data),               //          .data
		.sink4_startofpacket (cmd_demux_004_src3_startofpacket),      //          .startofpacket
		.sink4_endofpacket   (cmd_demux_004_src3_endofpacket)         //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux cmd_mux_004 (
		.clk                 (System_PLL_sys_clk_clk),                //       clk.clk
		.reset               (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                 //          .valid
		.src_data            (cmd_mux_004_src_data),                  //          .data
		.src_channel         (cmd_mux_004_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                //          .channel
		.sink0_data          (cmd_demux_src4_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_demux_001_src4_ready),              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src4_valid),              //          .valid
		.sink1_channel       (cmd_demux_001_src4_channel),            //          .channel
		.sink1_data          (cmd_demux_001_src4_data),               //          .data
		.sink1_startofpacket (cmd_demux_001_src4_startofpacket),      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src4_endofpacket),        //          .endofpacket
		.sink2_ready         (cmd_demux_002_src4_ready),              //     sink2.ready
		.sink2_valid         (cmd_demux_002_src4_valid),              //          .valid
		.sink2_channel       (cmd_demux_002_src4_channel),            //          .channel
		.sink2_data          (cmd_demux_002_src4_data),               //          .data
		.sink2_startofpacket (cmd_demux_002_src4_startofpacket),      //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src4_endofpacket),        //          .endofpacket
		.sink3_ready         (cmd_demux_003_src4_ready),              //     sink3.ready
		.sink3_valid         (cmd_demux_003_src4_valid),              //          .valid
		.sink3_channel       (cmd_demux_003_src4_channel),            //          .channel
		.sink3_data          (cmd_demux_003_src4_data),               //          .data
		.sink3_startofpacket (cmd_demux_003_src4_startofpacket),      //          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src4_endofpacket),        //          .endofpacket
		.sink4_ready         (cmd_demux_004_src4_ready),              //     sink4.ready
		.sink4_valid         (cmd_demux_004_src4_valid),              //          .valid
		.sink4_channel       (cmd_demux_004_src4_channel),            //          .channel
		.sink4_data          (cmd_demux_004_src4_data),               //          .data
		.sink4_startofpacket (cmd_demux_004_src4_startofpacket),      //          .startofpacket
		.sink4_endofpacket   (cmd_demux_004_src4_endofpacket)         //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux cmd_mux_005 (
		.clk                 (System_PLL_sys_clk_clk),                //       clk.clk
		.reset               (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                 //          .valid
		.src_data            (cmd_mux_005_src_data),                  //          .data
		.src_channel         (cmd_mux_005_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                //          .channel
		.sink0_data          (cmd_demux_src5_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_demux_001_src5_ready),              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src5_valid),              //          .valid
		.sink1_channel       (cmd_demux_001_src5_channel),            //          .channel
		.sink1_data          (cmd_demux_001_src5_data),               //          .data
		.sink1_startofpacket (cmd_demux_001_src5_startofpacket),      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src5_endofpacket),        //          .endofpacket
		.sink2_ready         (cmd_demux_002_src5_ready),              //     sink2.ready
		.sink2_valid         (cmd_demux_002_src5_valid),              //          .valid
		.sink2_channel       (cmd_demux_002_src5_channel),            //          .channel
		.sink2_data          (cmd_demux_002_src5_data),               //          .data
		.sink2_startofpacket (cmd_demux_002_src5_startofpacket),      //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src5_endofpacket),        //          .endofpacket
		.sink3_ready         (cmd_demux_003_src5_ready),              //     sink3.ready
		.sink3_valid         (cmd_demux_003_src5_valid),              //          .valid
		.sink3_channel       (cmd_demux_003_src5_channel),            //          .channel
		.sink3_data          (cmd_demux_003_src5_data),               //          .data
		.sink3_startofpacket (cmd_demux_003_src5_startofpacket),      //          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src5_endofpacket),        //          .endofpacket
		.sink4_ready         (cmd_demux_004_src5_ready),              //     sink4.ready
		.sink4_valid         (cmd_demux_004_src5_valid),              //          .valid
		.sink4_channel       (cmd_demux_004_src5_channel),            //          .channel
		.sink4_data          (cmd_demux_004_src5_data),               //          .data
		.sink4_startofpacket (cmd_demux_004_src5_startofpacket),      //          .startofpacket
		.sink4_endofpacket   (cmd_demux_004_src5_endofpacket)         //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux cmd_mux_006 (
		.clk                 (System_PLL_sys_clk_clk),                //       clk.clk
		.reset               (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                 //          .valid
		.src_data            (cmd_mux_006_src_data),                  //          .data
		.src_channel         (cmd_mux_006_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                //          .channel
		.sink0_data          (cmd_demux_src6_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_demux_001_src6_ready),              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src6_valid),              //          .valid
		.sink1_channel       (cmd_demux_001_src6_channel),            //          .channel
		.sink1_data          (cmd_demux_001_src6_data),               //          .data
		.sink1_startofpacket (cmd_demux_001_src6_startofpacket),      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src6_endofpacket),        //          .endofpacket
		.sink2_ready         (cmd_demux_002_src6_ready),              //     sink2.ready
		.sink2_valid         (cmd_demux_002_src6_valid),              //          .valid
		.sink2_channel       (cmd_demux_002_src6_channel),            //          .channel
		.sink2_data          (cmd_demux_002_src6_data),               //          .data
		.sink2_startofpacket (cmd_demux_002_src6_startofpacket),      //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src6_endofpacket),        //          .endofpacket
		.sink3_ready         (cmd_demux_003_src6_ready),              //     sink3.ready
		.sink3_valid         (cmd_demux_003_src6_valid),              //          .valid
		.sink3_channel       (cmd_demux_003_src6_channel),            //          .channel
		.sink3_data          (cmd_demux_003_src6_data),               //          .data
		.sink3_startofpacket (cmd_demux_003_src6_startofpacket),      //          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src6_endofpacket),        //          .endofpacket
		.sink4_ready         (cmd_demux_004_src6_ready),              //     sink4.ready
		.sink4_valid         (cmd_demux_004_src6_valid),              //          .valid
		.sink4_channel       (cmd_demux_004_src6_channel),            //          .channel
		.sink4_data          (cmd_demux_004_src6_data),               //          .data
		.sink4_startofpacket (cmd_demux_004_src6_startofpacket),      //          .startofpacket
		.sink4_endofpacket   (cmd_demux_004_src6_endofpacket)         //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux cmd_mux_007 (
		.clk                 (System_PLL_sys_clk_clk),                //       clk.clk
		.reset               (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                 //          .valid
		.src_data            (cmd_mux_007_src_data),                  //          .data
		.src_channel         (cmd_mux_007_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                //          .channel
		.sink0_data          (cmd_demux_src7_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_demux_001_src7_ready),              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src7_valid),              //          .valid
		.sink1_channel       (cmd_demux_001_src7_channel),            //          .channel
		.sink1_data          (cmd_demux_001_src7_data),               //          .data
		.sink1_startofpacket (cmd_demux_001_src7_startofpacket),      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src7_endofpacket),        //          .endofpacket
		.sink2_ready         (cmd_demux_002_src7_ready),              //     sink2.ready
		.sink2_valid         (cmd_demux_002_src7_valid),              //          .valid
		.sink2_channel       (cmd_demux_002_src7_channel),            //          .channel
		.sink2_data          (cmd_demux_002_src7_data),               //          .data
		.sink2_startofpacket (cmd_demux_002_src7_startofpacket),      //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src7_endofpacket),        //          .endofpacket
		.sink3_ready         (cmd_demux_003_src7_ready),              //     sink3.ready
		.sink3_valid         (cmd_demux_003_src7_valid),              //          .valid
		.sink3_channel       (cmd_demux_003_src7_channel),            //          .channel
		.sink3_data          (cmd_demux_003_src7_data),               //          .data
		.sink3_startofpacket (cmd_demux_003_src7_startofpacket),      //          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src7_endofpacket),        //          .endofpacket
		.sink4_ready         (cmd_demux_004_src7_ready),              //     sink4.ready
		.sink4_valid         (cmd_demux_004_src7_valid),              //          .valid
		.sink4_channel       (cmd_demux_004_src7_channel),            //          .channel
		.sink4_data          (cmd_demux_004_src7_data),               //          .data
		.sink4_startofpacket (cmd_demux_004_src7_startofpacket),      //          .startofpacket
		.sink4_endofpacket   (cmd_demux_004_src7_endofpacket)         //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux cmd_mux_008 (
		.clk                 (System_PLL_sys_clk_clk),                //       clk.clk
		.reset               (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                 //          .valid
		.src_data            (cmd_mux_008_src_data),                  //          .data
		.src_channel         (cmd_mux_008_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                //          .channel
		.sink0_data          (cmd_demux_src8_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_demux_001_src8_ready),              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src8_valid),              //          .valid
		.sink1_channel       (cmd_demux_001_src8_channel),            //          .channel
		.sink1_data          (cmd_demux_001_src8_data),               //          .data
		.sink1_startofpacket (cmd_demux_001_src8_startofpacket),      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src8_endofpacket),        //          .endofpacket
		.sink2_ready         (cmd_demux_002_src8_ready),              //     sink2.ready
		.sink2_valid         (cmd_demux_002_src8_valid),              //          .valid
		.sink2_channel       (cmd_demux_002_src8_channel),            //          .channel
		.sink2_data          (cmd_demux_002_src8_data),               //          .data
		.sink2_startofpacket (cmd_demux_002_src8_startofpacket),      //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src8_endofpacket),        //          .endofpacket
		.sink3_ready         (cmd_demux_003_src8_ready),              //     sink3.ready
		.sink3_valid         (cmd_demux_003_src8_valid),              //          .valid
		.sink3_channel       (cmd_demux_003_src8_channel),            //          .channel
		.sink3_data          (cmd_demux_003_src8_data),               //          .data
		.sink3_startofpacket (cmd_demux_003_src8_startofpacket),      //          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src8_endofpacket),        //          .endofpacket
		.sink4_ready         (cmd_demux_004_src8_ready),              //     sink4.ready
		.sink4_valid         (cmd_demux_004_src8_valid),              //          .valid
		.sink4_channel       (cmd_demux_004_src8_channel),            //          .channel
		.sink4_data          (cmd_demux_004_src8_data),               //          .data
		.sink4_startofpacket (cmd_demux_004_src8_startofpacket),      //          .startofpacket
		.sink4_endofpacket   (cmd_demux_004_src8_endofpacket)         //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_009 cmd_mux_009 (
		.clk                 (System_PLL_sys_clk_clk),                //       clk.clk
		.reset               (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                 //          .valid
		.src_data            (cmd_mux_009_src_data),                  //          .data
		.src_channel         (cmd_mux_009_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                //          .channel
		.sink0_data          (cmd_demux_src9_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_demux_001_src9_ready),              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src9_valid),              //          .valid
		.sink1_channel       (cmd_demux_001_src9_channel),            //          .channel
		.sink1_data          (cmd_demux_001_src9_data),               //          .data
		.sink1_startofpacket (cmd_demux_001_src9_startofpacket),      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src9_endofpacket),        //          .endofpacket
		.sink2_ready         (cmd_demux_002_src9_ready),              //     sink2.ready
		.sink2_valid         (cmd_demux_002_src9_valid),              //          .valid
		.sink2_channel       (cmd_demux_002_src9_channel),            //          .channel
		.sink2_data          (cmd_demux_002_src9_data),               //          .data
		.sink2_startofpacket (cmd_demux_002_src9_startofpacket),      //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src9_endofpacket),        //          .endofpacket
		.sink3_ready         (cmd_demux_004_src9_ready),              //     sink3.ready
		.sink3_valid         (cmd_demux_004_src9_valid),              //          .valid
		.sink3_channel       (cmd_demux_004_src9_channel),            //          .channel
		.sink3_data          (cmd_demux_004_src9_data),               //          .data
		.sink3_startofpacket (cmd_demux_004_src9_startofpacket),      //          .startofpacket
		.sink3_endofpacket   (cmd_demux_004_src9_endofpacket)         //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_009 cmd_mux_010 (
		.clk                 (System_PLL_sys_clk_clk),                //       clk.clk
		.reset               (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                 //          .valid
		.src_data            (cmd_mux_010_src_data),                  //          .data
		.src_channel         (cmd_mux_010_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src10_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_src10_valid),                 //          .valid
		.sink0_channel       (cmd_demux_src10_channel),               //          .channel
		.sink0_data          (cmd_demux_src10_data),                  //          .data
		.sink0_startofpacket (cmd_demux_src10_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src10_endofpacket),           //          .endofpacket
		.sink1_ready         (cmd_demux_001_src10_ready),             //     sink1.ready
		.sink1_valid         (cmd_demux_001_src10_valid),             //          .valid
		.sink1_channel       (cmd_demux_001_src10_channel),           //          .channel
		.sink1_data          (cmd_demux_001_src10_data),              //          .data
		.sink1_startofpacket (cmd_demux_001_src10_startofpacket),     //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src10_endofpacket),       //          .endofpacket
		.sink2_ready         (cmd_demux_002_src10_ready),             //     sink2.ready
		.sink2_valid         (cmd_demux_002_src10_valid),             //          .valid
		.sink2_channel       (cmd_demux_002_src10_channel),           //          .channel
		.sink2_data          (cmd_demux_002_src10_data),              //          .data
		.sink2_startofpacket (cmd_demux_002_src10_startofpacket),     //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src10_endofpacket),       //          .endofpacket
		.sink3_ready         (cmd_demux_004_src10_ready),             //     sink3.ready
		.sink3_valid         (cmd_demux_004_src10_valid),             //          .valid
		.sink3_channel       (cmd_demux_004_src10_channel),           //          .channel
		.sink3_data          (cmd_demux_004_src10_data),              //          .data
		.sink3_startofpacket (cmd_demux_004_src10_startofpacket),     //          .startofpacket
		.sink3_endofpacket   (cmd_demux_004_src10_endofpacket)        //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_011 cmd_mux_011 (
		.clk                 (System_PLL_sys_clk_clk),                //       clk.clk
		.reset               (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                 //          .valid
		.src_data            (cmd_mux_011_src_data),                  //          .data
		.src_channel         (cmd_mux_011_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src11_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_src11_valid),                 //          .valid
		.sink0_channel       (cmd_demux_src11_channel),               //          .channel
		.sink0_data          (cmd_demux_src11_data),                  //          .data
		.sink0_startofpacket (cmd_demux_src11_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src11_endofpacket),           //          .endofpacket
		.sink1_ready         (cmd_demux_001_src11_ready),             //     sink1.ready
		.sink1_valid         (cmd_demux_001_src11_valid),             //          .valid
		.sink1_channel       (cmd_demux_001_src11_channel),           //          .channel
		.sink1_data          (cmd_demux_001_src11_data),              //          .data
		.sink1_startofpacket (cmd_demux_001_src11_startofpacket),     //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src11_endofpacket)        //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_011 cmd_mux_012 (
		.clk                 (System_PLL_sys_clk_clk),                //       clk.clk
		.reset               (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                 //          .valid
		.src_data            (cmd_mux_012_src_data),                  //          .data
		.src_channel         (cmd_mux_012_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src12_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_src12_valid),                 //          .valid
		.sink0_channel       (cmd_demux_src12_channel),               //          .channel
		.sink0_data          (cmd_demux_src12_data),                  //          .data
		.sink0_startofpacket (cmd_demux_src12_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src12_endofpacket),           //          .endofpacket
		.sink1_ready         (cmd_demux_001_src12_ready),             //     sink1.ready
		.sink1_valid         (cmd_demux_001_src12_valid),             //          .valid
		.sink1_channel       (cmd_demux_001_src12_channel),           //          .channel
		.sink1_data          (cmd_demux_001_src12_data),              //          .data
		.sink1_startofpacket (cmd_demux_001_src12_startofpacket),     //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src12_endofpacket)        //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_011 cmd_mux_013 (
		.clk                 (System_PLL_sys_clk_clk),                //       clk.clk
		.reset               (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                 //          .valid
		.src_data            (cmd_mux_013_src_data),                  //          .data
		.src_channel         (cmd_mux_013_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_002_src11_ready),             //     sink0.ready
		.sink0_valid         (cmd_demux_002_src11_valid),             //          .valid
		.sink0_channel       (cmd_demux_002_src11_channel),           //          .channel
		.sink0_data          (cmd_demux_002_src11_data),              //          .data
		.sink0_startofpacket (cmd_demux_002_src11_startofpacket),     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src11_endofpacket),       //          .endofpacket
		.sink1_ready         (cmd_demux_004_src11_ready),             //     sink1.ready
		.sink1_valid         (cmd_demux_004_src11_valid),             //          .valid
		.sink1_channel       (cmd_demux_004_src11_channel),           //          .channel
		.sink1_data          (cmd_demux_004_src11_data),              //          .data
		.sink1_startofpacket (cmd_demux_004_src11_startofpacket),     //          .startofpacket
		.sink1_endofpacket   (cmd_demux_004_src11_endofpacket)        //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux cmd_mux_014 (
		.clk                 (System_PLL_sys_clk_clk),                //       clk.clk
		.reset               (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                 //          .valid
		.src_data            (cmd_mux_014_src_data),                  //          .data
		.src_channel         (cmd_mux_014_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_002_src12_ready),             //     sink0.ready
		.sink0_valid         (cmd_demux_002_src12_valid),             //          .valid
		.sink0_channel       (cmd_demux_002_src12_channel),           //          .channel
		.sink0_data          (cmd_demux_002_src12_data),              //          .data
		.sink0_startofpacket (cmd_demux_002_src12_startofpacket),     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src12_endofpacket),       //          .endofpacket
		.sink1_ready         (cmd_demux_003_src9_ready),              //     sink1.ready
		.sink1_valid         (cmd_demux_003_src9_valid),              //          .valid
		.sink1_channel       (cmd_demux_003_src9_channel),            //          .channel
		.sink1_data          (cmd_demux_003_src9_data),               //          .data
		.sink1_startofpacket (cmd_demux_003_src9_startofpacket),      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src9_endofpacket),        //          .endofpacket
		.sink2_ready         (cmd_demux_004_src12_ready),             //     sink2.ready
		.sink2_valid         (cmd_demux_004_src12_valid),             //          .valid
		.sink2_channel       (cmd_demux_004_src12_channel),           //          .channel
		.sink2_data          (cmd_demux_004_src12_data),              //          .data
		.sink2_startofpacket (cmd_demux_004_src12_startofpacket),     //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src12_endofpacket),       //          .endofpacket
		.sink3_ready         (cmd_demux_007_src0_ready),              //     sink3.ready
		.sink3_valid         (cmd_demux_007_src0_valid),              //          .valid
		.sink3_channel       (cmd_demux_007_src0_channel),            //          .channel
		.sink3_data          (cmd_demux_007_src0_data),               //          .data
		.sink3_startofpacket (cmd_demux_007_src0_startofpacket),      //          .startofpacket
		.sink3_endofpacket   (cmd_demux_007_src0_endofpacket),        //          .endofpacket
		.sink4_ready         (cmd_demux_008_src0_ready),              //     sink4.ready
		.sink4_valid         (cmd_demux_008_src0_valid),              //          .valid
		.sink4_channel       (cmd_demux_008_src0_channel),            //          .channel
		.sink4_data          (cmd_demux_008_src0_data),               //          .data
		.sink4_startofpacket (cmd_demux_008_src0_startofpacket),      //          .startofpacket
		.sink4_endofpacket   (cmd_demux_008_src0_endofpacket)         //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux cmd_mux_015 (
		.clk                 (System_PLL_sys_clk_clk),                //       clk.clk
		.reset               (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                 //          .valid
		.src_data            (cmd_mux_015_src_data),                  //          .data
		.src_channel         (cmd_mux_015_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_002_src13_ready),             //     sink0.ready
		.sink0_valid         (cmd_demux_002_src13_valid),             //          .valid
		.sink0_channel       (cmd_demux_002_src13_channel),           //          .channel
		.sink0_data          (cmd_demux_002_src13_data),              //          .data
		.sink0_startofpacket (cmd_demux_002_src13_startofpacket),     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src13_endofpacket),       //          .endofpacket
		.sink1_ready         (cmd_demux_003_src10_ready),             //     sink1.ready
		.sink1_valid         (cmd_demux_003_src10_valid),             //          .valid
		.sink1_channel       (cmd_demux_003_src10_channel),           //          .channel
		.sink1_data          (cmd_demux_003_src10_data),              //          .data
		.sink1_startofpacket (cmd_demux_003_src10_startofpacket),     //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src10_endofpacket),       //          .endofpacket
		.sink2_ready         (cmd_demux_004_src13_ready),             //     sink2.ready
		.sink2_valid         (cmd_demux_004_src13_valid),             //          .valid
		.sink2_channel       (cmd_demux_004_src13_channel),           //          .channel
		.sink2_data          (cmd_demux_004_src13_data),              //          .data
		.sink2_startofpacket (cmd_demux_004_src13_startofpacket),     //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src13_endofpacket),       //          .endofpacket
		.sink3_ready         (cmd_demux_007_src1_ready),              //     sink3.ready
		.sink3_valid         (cmd_demux_007_src1_valid),              //          .valid
		.sink3_channel       (cmd_demux_007_src1_channel),            //          .channel
		.sink3_data          (cmd_demux_007_src1_data),               //          .data
		.sink3_startofpacket (cmd_demux_007_src1_startofpacket),      //          .startofpacket
		.sink3_endofpacket   (cmd_demux_007_src1_endofpacket),        //          .endofpacket
		.sink4_ready         (cmd_demux_008_src1_ready),              //     sink4.ready
		.sink4_valid         (cmd_demux_008_src1_valid),              //          .valid
		.sink4_channel       (cmd_demux_008_src1_channel),            //          .channel
		.sink4_data          (cmd_demux_008_src1_data),               //          .data
		.sink4_startofpacket (cmd_demux_008_src1_startofpacket),      //          .startofpacket
		.sink4_endofpacket   (cmd_demux_008_src1_endofpacket)         //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux cmd_mux_016 (
		.clk                 (System_PLL_sys_clk_clk),                //       clk.clk
		.reset               (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                 //          .valid
		.src_data            (cmd_mux_016_src_data),                  //          .data
		.src_channel         (cmd_mux_016_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_002_src14_ready),             //     sink0.ready
		.sink0_valid         (cmd_demux_002_src14_valid),             //          .valid
		.sink0_channel       (cmd_demux_002_src14_channel),           //          .channel
		.sink0_data          (cmd_demux_002_src14_data),              //          .data
		.sink0_startofpacket (cmd_demux_002_src14_startofpacket),     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src14_endofpacket),       //          .endofpacket
		.sink1_ready         (cmd_demux_003_src11_ready),             //     sink1.ready
		.sink1_valid         (cmd_demux_003_src11_valid),             //          .valid
		.sink1_channel       (cmd_demux_003_src11_channel),           //          .channel
		.sink1_data          (cmd_demux_003_src11_data),              //          .data
		.sink1_startofpacket (cmd_demux_003_src11_startofpacket),     //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src11_endofpacket),       //          .endofpacket
		.sink2_ready         (cmd_demux_004_src14_ready),             //     sink2.ready
		.sink2_valid         (cmd_demux_004_src14_valid),             //          .valid
		.sink2_channel       (cmd_demux_004_src14_channel),           //          .channel
		.sink2_data          (cmd_demux_004_src14_data),              //          .data
		.sink2_startofpacket (cmd_demux_004_src14_startofpacket),     //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src14_endofpacket),       //          .endofpacket
		.sink3_ready         (cmd_demux_007_src2_ready),              //     sink3.ready
		.sink3_valid         (cmd_demux_007_src2_valid),              //          .valid
		.sink3_channel       (cmd_demux_007_src2_channel),            //          .channel
		.sink3_data          (cmd_demux_007_src2_data),               //          .data
		.sink3_startofpacket (cmd_demux_007_src2_startofpacket),      //          .startofpacket
		.sink3_endofpacket   (cmd_demux_007_src2_endofpacket),        //          .endofpacket
		.sink4_ready         (cmd_demux_008_src2_ready),              //     sink4.ready
		.sink4_valid         (cmd_demux_008_src2_valid),              //          .valid
		.sink4_channel       (cmd_demux_008_src2_channel),            //          .channel
		.sink4_data          (cmd_demux_008_src2_data),               //          .data
		.sink4_startofpacket (cmd_demux_008_src2_startofpacket),      //          .startofpacket
		.sink4_endofpacket   (cmd_demux_008_src2_endofpacket)         //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_017 cmd_mux_017 (
		.clk                 (System_PLL_sys_clk_clk),                //       clk.clk
		.reset               (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_017_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_017_src_valid),                 //          .valid
		.src_data            (cmd_mux_017_src_data),                  //          .data
		.src_channel         (cmd_mux_017_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_017_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_017_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_002_src15_ready),             //     sink0.ready
		.sink0_valid         (cmd_demux_002_src15_valid),             //          .valid
		.sink0_channel       (cmd_demux_002_src15_channel),           //          .channel
		.sink0_data          (cmd_demux_002_src15_data),              //          .data
		.sink0_startofpacket (cmd_demux_002_src15_startofpacket),     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src15_endofpacket),       //          .endofpacket
		.sink1_ready         (cmd_demux_003_src12_ready),             //     sink1.ready
		.sink1_valid         (cmd_demux_003_src12_valid),             //          .valid
		.sink1_channel       (cmd_demux_003_src12_channel),           //          .channel
		.sink1_data          (cmd_demux_003_src12_data),              //          .data
		.sink1_startofpacket (cmd_demux_003_src12_startofpacket),     //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src12_endofpacket),       //          .endofpacket
		.sink2_ready         (cmd_demux_004_src15_ready),             //     sink2.ready
		.sink2_valid         (cmd_demux_004_src15_valid),             //          .valid
		.sink2_channel       (cmd_demux_004_src15_channel),           //          .channel
		.sink2_data          (cmd_demux_004_src15_data),              //          .data
		.sink2_startofpacket (cmd_demux_004_src15_startofpacket),     //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src15_endofpacket)        //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_017 cmd_mux_018 (
		.clk                 (System_PLL_sys_clk_clk),                //       clk.clk
		.reset               (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_018_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_018_src_valid),                 //          .valid
		.src_data            (cmd_mux_018_src_data),                  //          .data
		.src_channel         (cmd_mux_018_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_018_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_018_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_002_src16_ready),             //     sink0.ready
		.sink0_valid         (cmd_demux_002_src16_valid),             //          .valid
		.sink0_channel       (cmd_demux_002_src16_channel),           //          .channel
		.sink0_data          (cmd_demux_002_src16_data),              //          .data
		.sink0_startofpacket (cmd_demux_002_src16_startofpacket),     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src16_endofpacket),       //          .endofpacket
		.sink1_ready         (cmd_demux_003_src13_ready),             //     sink1.ready
		.sink1_valid         (cmd_demux_003_src13_valid),             //          .valid
		.sink1_channel       (cmd_demux_003_src13_channel),           //          .channel
		.sink1_data          (cmd_demux_003_src13_data),              //          .data
		.sink1_startofpacket (cmd_demux_003_src13_startofpacket),     //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src13_endofpacket),       //          .endofpacket
		.sink2_ready         (cmd_demux_004_src16_ready),             //     sink2.ready
		.sink2_valid         (cmd_demux_004_src16_valid),             //          .valid
		.sink2_channel       (cmd_demux_004_src16_channel),           //          .channel
		.sink2_data          (cmd_demux_004_src16_data),              //          .data
		.sink2_startofpacket (cmd_demux_004_src16_startofpacket),     //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src16_endofpacket)        //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_017 cmd_mux_019 (
		.clk                 (System_PLL_sys_clk_clk),                //       clk.clk
		.reset               (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_019_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_019_src_valid),                 //          .valid
		.src_data            (cmd_mux_019_src_data),                  //          .data
		.src_channel         (cmd_mux_019_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_019_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_019_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_002_src17_ready),             //     sink0.ready
		.sink0_valid         (cmd_demux_002_src17_valid),             //          .valid
		.sink0_channel       (cmd_demux_002_src17_channel),           //          .channel
		.sink0_data          (cmd_demux_002_src17_data),              //          .data
		.sink0_startofpacket (cmd_demux_002_src17_startofpacket),     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src17_endofpacket),       //          .endofpacket
		.sink1_ready         (cmd_demux_003_src14_ready),             //     sink1.ready
		.sink1_valid         (cmd_demux_003_src14_valid),             //          .valid
		.sink1_channel       (cmd_demux_003_src14_channel),           //          .channel
		.sink1_data          (cmd_demux_003_src14_data),              //          .data
		.sink1_startofpacket (cmd_demux_003_src14_startofpacket),     //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src14_endofpacket),       //          .endofpacket
		.sink2_ready         (cmd_demux_004_src17_ready),             //     sink2.ready
		.sink2_valid         (cmd_demux_004_src17_valid),             //          .valid
		.sink2_channel       (cmd_demux_004_src17_channel),           //          .channel
		.sink2_data          (cmd_demux_004_src17_data),              //          .data
		.sink2_startofpacket (cmd_demux_004_src17_startofpacket),     //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src17_endofpacket)        //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_020 cmd_mux_020 (
		.clk                 (System_PLL_sys_clk_clk),                //       clk.clk
		.reset               (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_020_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_020_src_valid),                 //          .valid
		.src_data            (cmd_mux_020_src_data),                  //          .data
		.src_channel         (cmd_mux_020_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_020_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_020_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_003_src15_ready),             //     sink0.ready
		.sink0_valid         (cmd_demux_003_src15_valid),             //          .valid
		.sink0_channel       (cmd_demux_003_src15_channel),           //          .channel
		.sink0_data          (cmd_demux_003_src15_data),              //          .data
		.sink0_startofpacket (cmd_demux_003_src15_startofpacket),     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_003_src15_endofpacket)        //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_011 cmd_mux_021 (
		.clk                 (System_PLL_sys_clk_clk),                           //       clk.clk
		.reset               (Nios2_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_021_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_021_src_valid),                            //          .valid
		.src_data            (cmd_mux_021_src_data),                             //          .data
		.src_channel         (cmd_mux_021_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_021_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_021_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_003_src16_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_003_src16_valid),                        //          .valid
		.sink0_channel       (cmd_demux_003_src16_channel),                      //          .channel
		.sink0_data          (cmd_demux_003_src16_data),                         //          .data
		.sink0_startofpacket (cmd_demux_003_src16_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_003_src16_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_005_src0_ready),                         //     sink1.ready
		.sink1_valid         (cmd_demux_005_src0_valid),                         //          .valid
		.sink1_channel       (cmd_demux_005_src0_channel),                       //          .channel
		.sink1_data          (cmd_demux_005_src0_data),                          //          .data
		.sink1_startofpacket (cmd_demux_005_src0_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_005_src0_endofpacket)                    //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_020 cmd_mux_022 (
		.clk                 (System_PLL_sys_clk_clk),                //       clk.clk
		.reset               (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_022_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_022_src_valid),                 //          .valid
		.src_data            (cmd_mux_022_src_data),                  //          .data
		.src_channel         (cmd_mux_022_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_022_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_022_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_003_src17_ready),             //     sink0.ready
		.sink0_valid         (cmd_demux_003_src17_valid),             //          .valid
		.sink0_channel       (cmd_demux_003_src17_channel),           //          .channel
		.sink0_data          (cmd_demux_003_src17_data),              //          .data
		.sink0_startofpacket (cmd_demux_003_src17_startofpacket),     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_003_src17_endofpacket)        //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_020 cmd_mux_023 (
		.clk                 (System_PLL_sys_clk_clk),                //       clk.clk
		.reset               (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_023_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_023_src_valid),                 //          .valid
		.src_data            (cmd_mux_023_src_data),                  //          .data
		.src_channel         (cmd_mux_023_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_023_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_023_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_003_src18_ready),             //     sink0.ready
		.sink0_valid         (cmd_demux_003_src18_valid),             //          .valid
		.sink0_channel       (cmd_demux_003_src18_channel),           //          .channel
		.sink0_data          (cmd_demux_003_src18_data),              //          .data
		.sink0_startofpacket (cmd_demux_003_src18_startofpacket),     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_003_src18_endofpacket)        //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_011 cmd_mux_024 (
		.clk                 (System_PLL_sys_clk_clk),                //       clk.clk
		.reset               (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_024_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_024_src_valid),                 //          .valid
		.src_data            (cmd_mux_024_src_data),                  //          .data
		.src_channel         (cmd_mux_024_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_024_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_024_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_005_src1_ready),              //     sink0.ready
		.sink0_valid         (cmd_demux_005_src1_valid),              //          .valid
		.sink0_channel       (cmd_demux_005_src1_channel),            //          .channel
		.sink0_data          (cmd_demux_005_src1_data),               //          .data
		.sink0_startofpacket (cmd_demux_005_src1_startofpacket),      //          .startofpacket
		.sink0_endofpacket   (cmd_demux_005_src1_endofpacket),        //          .endofpacket
		.sink1_ready         (cmd_demux_006_src0_ready),              //     sink1.ready
		.sink1_valid         (cmd_demux_006_src0_valid),              //          .valid
		.sink1_channel       (cmd_demux_006_src0_channel),            //          .channel
		.sink1_data          (cmd_demux_006_src0_data),               //          .data
		.sink1_startofpacket (cmd_demux_006_src0_startofpacket),      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_006_src0_endofpacket)         //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_011 cmd_mux_025 (
		.clk                 (System_PLL_sys_clk_clk),                //       clk.clk
		.reset               (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_025_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_025_src_valid),                 //          .valid
		.src_data            (cmd_mux_025_src_data),                  //          .data
		.src_channel         (cmd_mux_025_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_025_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_025_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_005_src2_ready),              //     sink0.ready
		.sink0_valid         (cmd_demux_005_src2_valid),              //          .valid
		.sink0_channel       (cmd_demux_005_src2_channel),            //          .channel
		.sink0_data          (cmd_demux_005_src2_data),               //          .data
		.sink0_startofpacket (cmd_demux_005_src2_startofpacket),      //          .startofpacket
		.sink0_endofpacket   (cmd_demux_005_src2_endofpacket),        //          .endofpacket
		.sink1_ready         (cmd_demux_006_src1_ready),              //     sink1.ready
		.sink1_valid         (cmd_demux_006_src1_valid),              //          .valid
		.sink1_channel       (cmd_demux_006_src1_channel),            //          .channel
		.sink1_data          (cmd_demux_006_src1_data),               //          .data
		.sink1_startofpacket (cmd_demux_006_src1_startofpacket),      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_006_src1_endofpacket)         //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_011 cmd_mux_026 (
		.clk                 (System_PLL_sys_clk_clk),                //       clk.clk
		.reset               (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_026_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_026_src_valid),                 //          .valid
		.src_data            (cmd_mux_026_src_data),                  //          .data
		.src_channel         (cmd_mux_026_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_026_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_026_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_005_src3_ready),              //     sink0.ready
		.sink0_valid         (cmd_demux_005_src3_valid),              //          .valid
		.sink0_channel       (cmd_demux_005_src3_channel),            //          .channel
		.sink0_data          (cmd_demux_005_src3_data),               //          .data
		.sink0_startofpacket (cmd_demux_005_src3_startofpacket),      //          .startofpacket
		.sink0_endofpacket   (cmd_demux_005_src3_endofpacket),        //          .endofpacket
		.sink1_ready         (cmd_demux_006_src2_ready),              //     sink1.ready
		.sink1_valid         (cmd_demux_006_src2_valid),              //          .valid
		.sink1_channel       (cmd_demux_006_src2_channel),            //          .channel
		.sink1_data          (cmd_demux_006_src2_data),               //          .data
		.sink1_startofpacket (cmd_demux_006_src2_startofpacket),      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_006_src2_endofpacket)         //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_011 cmd_mux_027 (
		.clk                 (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset               (Nios2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_027_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_027_src_valid),                   //          .valid
		.src_data            (cmd_mux_027_src_data),                    //          .data
		.src_channel         (cmd_mux_027_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_027_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_027_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_002_src18_ready),               //     sink0.ready
		.sink0_valid         (cmd_demux_002_src18_valid),               //          .valid
		.sink0_channel       (cmd_demux_002_src18_channel),             //          .channel
		.sink0_data          (cmd_demux_002_src18_data),                //          .data
		.sink0_startofpacket (cmd_demux_002_src18_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src18_endofpacket),         //          .endofpacket
		.sink1_ready         (cmd_demux_006_src3_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_006_src3_valid),                //          .valid
		.sink1_channel       (cmd_demux_006_src3_channel),              //          .channel
		.sink1_data          (cmd_demux_006_src3_data),                 //          .data
		.sink1_startofpacket (cmd_demux_006_src3_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_006_src3_endofpacket)           //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (System_PLL_sys_clk_clk),                //       clk.clk
		.reset              (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                  //      sink.ready
		.sink_channel       (router_009_src_channel),                //          .channel
		.sink_data          (router_009_src_data),                   //          .data
		.sink_startofpacket (router_009_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_009_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_src0_data),                   //          .data
		.src0_channel       (rsp_demux_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),            //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                  //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                  //          .valid
		.src1_data          (rsp_demux_src1_data),                   //          .data
		.src1_channel       (rsp_demux_src1_channel),                //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),          //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket),            //          .endofpacket
		.src2_ready         (rsp_demux_src2_ready),                  //      src2.ready
		.src2_valid         (rsp_demux_src2_valid),                  //          .valid
		.src2_data          (rsp_demux_src2_data),                   //          .data
		.src2_channel       (rsp_demux_src2_channel),                //          .channel
		.src2_startofpacket (rsp_demux_src2_startofpacket),          //          .startofpacket
		.src2_endofpacket   (rsp_demux_src2_endofpacket),            //          .endofpacket
		.src3_ready         (rsp_demux_src3_ready),                  //      src3.ready
		.src3_valid         (rsp_demux_src3_valid),                  //          .valid
		.src3_data          (rsp_demux_src3_data),                   //          .data
		.src3_channel       (rsp_demux_src3_channel),                //          .channel
		.src3_startofpacket (rsp_demux_src3_startofpacket),          //          .startofpacket
		.src3_endofpacket   (rsp_demux_src3_endofpacket),            //          .endofpacket
		.src4_ready         (rsp_demux_src4_ready),                  //      src4.ready
		.src4_valid         (rsp_demux_src4_valid),                  //          .valid
		.src4_data          (rsp_demux_src4_data),                   //          .data
		.src4_channel       (rsp_demux_src4_channel),                //          .channel
		.src4_startofpacket (rsp_demux_src4_startofpacket),          //          .startofpacket
		.src4_endofpacket   (rsp_demux_src4_endofpacket)             //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (System_PLL_sys_clk_clk),                //       clk.clk
		.reset              (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                  //      sink.ready
		.sink_channel       (router_010_src_channel),                //          .channel
		.sink_data          (router_010_src_data),                   //          .data
		.sink_startofpacket (router_010_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_010_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),              //          .valid
		.src0_data          (rsp_demux_001_src0_data),               //          .data
		.src0_channel       (rsp_demux_001_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),        //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),              //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),              //          .valid
		.src1_data          (rsp_demux_001_src1_data),               //          .data
		.src1_channel       (rsp_demux_001_src1_channel),            //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),      //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket),        //          .endofpacket
		.src2_ready         (rsp_demux_001_src2_ready),              //      src2.ready
		.src2_valid         (rsp_demux_001_src2_valid),              //          .valid
		.src2_data          (rsp_demux_001_src2_data),               //          .data
		.src2_channel       (rsp_demux_001_src2_channel),            //          .channel
		.src2_startofpacket (rsp_demux_001_src2_startofpacket),      //          .startofpacket
		.src2_endofpacket   (rsp_demux_001_src2_endofpacket),        //          .endofpacket
		.src3_ready         (rsp_demux_001_src3_ready),              //      src3.ready
		.src3_valid         (rsp_demux_001_src3_valid),              //          .valid
		.src3_data          (rsp_demux_001_src3_data),               //          .data
		.src3_channel       (rsp_demux_001_src3_channel),            //          .channel
		.src3_startofpacket (rsp_demux_001_src3_startofpacket),      //          .startofpacket
		.src3_endofpacket   (rsp_demux_001_src3_endofpacket),        //          .endofpacket
		.src4_ready         (rsp_demux_001_src4_ready),              //      src4.ready
		.src4_valid         (rsp_demux_001_src4_valid),              //          .valid
		.src4_data          (rsp_demux_001_src4_data),               //          .data
		.src4_channel       (rsp_demux_001_src4_channel),            //          .channel
		.src4_startofpacket (rsp_demux_001_src4_startofpacket),      //          .startofpacket
		.src4_endofpacket   (rsp_demux_001_src4_endofpacket)         //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux rsp_demux_002 (
		.clk                (System_PLL_sys_clk_clk),                //       clk.clk
		.reset              (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                  //      sink.ready
		.sink_channel       (router_011_src_channel),                //          .channel
		.sink_data          (router_011_src_data),                   //          .data
		.sink_startofpacket (router_011_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_011_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),              //          .valid
		.src0_data          (rsp_demux_002_src0_data),               //          .data
		.src0_channel       (rsp_demux_002_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),        //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),              //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),              //          .valid
		.src1_data          (rsp_demux_002_src1_data),               //          .data
		.src1_channel       (rsp_demux_002_src1_channel),            //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),      //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket),        //          .endofpacket
		.src2_ready         (rsp_demux_002_src2_ready),              //      src2.ready
		.src2_valid         (rsp_demux_002_src2_valid),              //          .valid
		.src2_data          (rsp_demux_002_src2_data),               //          .data
		.src2_channel       (rsp_demux_002_src2_channel),            //          .channel
		.src2_startofpacket (rsp_demux_002_src2_startofpacket),      //          .startofpacket
		.src2_endofpacket   (rsp_demux_002_src2_endofpacket),        //          .endofpacket
		.src3_ready         (rsp_demux_002_src3_ready),              //      src3.ready
		.src3_valid         (rsp_demux_002_src3_valid),              //          .valid
		.src3_data          (rsp_demux_002_src3_data),               //          .data
		.src3_channel       (rsp_demux_002_src3_channel),            //          .channel
		.src3_startofpacket (rsp_demux_002_src3_startofpacket),      //          .startofpacket
		.src3_endofpacket   (rsp_demux_002_src3_endofpacket),        //          .endofpacket
		.src4_ready         (rsp_demux_002_src4_ready),              //      src4.ready
		.src4_valid         (rsp_demux_002_src4_valid),              //          .valid
		.src4_data          (rsp_demux_002_src4_data),               //          .data
		.src4_channel       (rsp_demux_002_src4_channel),            //          .channel
		.src4_startofpacket (rsp_demux_002_src4_startofpacket),      //          .startofpacket
		.src4_endofpacket   (rsp_demux_002_src4_endofpacket)         //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux rsp_demux_003 (
		.clk                (System_PLL_sys_clk_clk),                //       clk.clk
		.reset              (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                  //      sink.ready
		.sink_channel       (router_012_src_channel),                //          .channel
		.sink_data          (router_012_src_data),                   //          .data
		.sink_startofpacket (router_012_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_012_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),              //          .valid
		.src0_data          (rsp_demux_003_src0_data),               //          .data
		.src0_channel       (rsp_demux_003_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),        //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),              //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),              //          .valid
		.src1_data          (rsp_demux_003_src1_data),               //          .data
		.src1_channel       (rsp_demux_003_src1_channel),            //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),      //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket),        //          .endofpacket
		.src2_ready         (rsp_demux_003_src2_ready),              //      src2.ready
		.src2_valid         (rsp_demux_003_src2_valid),              //          .valid
		.src2_data          (rsp_demux_003_src2_data),               //          .data
		.src2_channel       (rsp_demux_003_src2_channel),            //          .channel
		.src2_startofpacket (rsp_demux_003_src2_startofpacket),      //          .startofpacket
		.src2_endofpacket   (rsp_demux_003_src2_endofpacket),        //          .endofpacket
		.src3_ready         (rsp_demux_003_src3_ready),              //      src3.ready
		.src3_valid         (rsp_demux_003_src3_valid),              //          .valid
		.src3_data          (rsp_demux_003_src3_data),               //          .data
		.src3_channel       (rsp_demux_003_src3_channel),            //          .channel
		.src3_startofpacket (rsp_demux_003_src3_startofpacket),      //          .startofpacket
		.src3_endofpacket   (rsp_demux_003_src3_endofpacket),        //          .endofpacket
		.src4_ready         (rsp_demux_003_src4_ready),              //      src4.ready
		.src4_valid         (rsp_demux_003_src4_valid),              //          .valid
		.src4_data          (rsp_demux_003_src4_data),               //          .data
		.src4_channel       (rsp_demux_003_src4_channel),            //          .channel
		.src4_startofpacket (rsp_demux_003_src4_startofpacket),      //          .startofpacket
		.src4_endofpacket   (rsp_demux_003_src4_endofpacket)         //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux rsp_demux_004 (
		.clk                (System_PLL_sys_clk_clk),                //       clk.clk
		.reset              (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                  //      sink.ready
		.sink_channel       (router_013_src_channel),                //          .channel
		.sink_data          (router_013_src_data),                   //          .data
		.sink_startofpacket (router_013_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_013_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),              //          .valid
		.src0_data          (rsp_demux_004_src0_data),               //          .data
		.src0_channel       (rsp_demux_004_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),        //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),              //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),              //          .valid
		.src1_data          (rsp_demux_004_src1_data),               //          .data
		.src1_channel       (rsp_demux_004_src1_channel),            //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),      //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket),        //          .endofpacket
		.src2_ready         (rsp_demux_004_src2_ready),              //      src2.ready
		.src2_valid         (rsp_demux_004_src2_valid),              //          .valid
		.src2_data          (rsp_demux_004_src2_data),               //          .data
		.src2_channel       (rsp_demux_004_src2_channel),            //          .channel
		.src2_startofpacket (rsp_demux_004_src2_startofpacket),      //          .startofpacket
		.src2_endofpacket   (rsp_demux_004_src2_endofpacket),        //          .endofpacket
		.src3_ready         (rsp_demux_004_src3_ready),              //      src3.ready
		.src3_valid         (rsp_demux_004_src3_valid),              //          .valid
		.src3_data          (rsp_demux_004_src3_data),               //          .data
		.src3_channel       (rsp_demux_004_src3_channel),            //          .channel
		.src3_startofpacket (rsp_demux_004_src3_startofpacket),      //          .startofpacket
		.src3_endofpacket   (rsp_demux_004_src3_endofpacket),        //          .endofpacket
		.src4_ready         (rsp_demux_004_src4_ready),              //      src4.ready
		.src4_valid         (rsp_demux_004_src4_valid),              //          .valid
		.src4_data          (rsp_demux_004_src4_data),               //          .data
		.src4_channel       (rsp_demux_004_src4_channel),            //          .channel
		.src4_startofpacket (rsp_demux_004_src4_startofpacket),      //          .startofpacket
		.src4_endofpacket   (rsp_demux_004_src4_endofpacket)         //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux rsp_demux_005 (
		.clk                (System_PLL_sys_clk_clk),                //       clk.clk
		.reset              (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                  //      sink.ready
		.sink_channel       (router_014_src_channel),                //          .channel
		.sink_data          (router_014_src_data),                   //          .data
		.sink_startofpacket (router_014_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_014_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),              //          .valid
		.src0_data          (rsp_demux_005_src0_data),               //          .data
		.src0_channel       (rsp_demux_005_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),        //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),              //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),              //          .valid
		.src1_data          (rsp_demux_005_src1_data),               //          .data
		.src1_channel       (rsp_demux_005_src1_channel),            //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),      //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket),        //          .endofpacket
		.src2_ready         (rsp_demux_005_src2_ready),              //      src2.ready
		.src2_valid         (rsp_demux_005_src2_valid),              //          .valid
		.src2_data          (rsp_demux_005_src2_data),               //          .data
		.src2_channel       (rsp_demux_005_src2_channel),            //          .channel
		.src2_startofpacket (rsp_demux_005_src2_startofpacket),      //          .startofpacket
		.src2_endofpacket   (rsp_demux_005_src2_endofpacket),        //          .endofpacket
		.src3_ready         (rsp_demux_005_src3_ready),              //      src3.ready
		.src3_valid         (rsp_demux_005_src3_valid),              //          .valid
		.src3_data          (rsp_demux_005_src3_data),               //          .data
		.src3_channel       (rsp_demux_005_src3_channel),            //          .channel
		.src3_startofpacket (rsp_demux_005_src3_startofpacket),      //          .startofpacket
		.src3_endofpacket   (rsp_demux_005_src3_endofpacket),        //          .endofpacket
		.src4_ready         (rsp_demux_005_src4_ready),              //      src4.ready
		.src4_valid         (rsp_demux_005_src4_valid),              //          .valid
		.src4_data          (rsp_demux_005_src4_data),               //          .data
		.src4_channel       (rsp_demux_005_src4_channel),            //          .channel
		.src4_startofpacket (rsp_demux_005_src4_startofpacket),      //          .startofpacket
		.src4_endofpacket   (rsp_demux_005_src4_endofpacket)         //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux rsp_demux_006 (
		.clk                (System_PLL_sys_clk_clk),                //       clk.clk
		.reset              (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                  //      sink.ready
		.sink_channel       (router_015_src_channel),                //          .channel
		.sink_data          (router_015_src_data),                   //          .data
		.sink_startofpacket (router_015_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_015_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),              //          .valid
		.src0_data          (rsp_demux_006_src0_data),               //          .data
		.src0_channel       (rsp_demux_006_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket),        //          .endofpacket
		.src1_ready         (rsp_demux_006_src1_ready),              //      src1.ready
		.src1_valid         (rsp_demux_006_src1_valid),              //          .valid
		.src1_data          (rsp_demux_006_src1_data),               //          .data
		.src1_channel       (rsp_demux_006_src1_channel),            //          .channel
		.src1_startofpacket (rsp_demux_006_src1_startofpacket),      //          .startofpacket
		.src1_endofpacket   (rsp_demux_006_src1_endofpacket),        //          .endofpacket
		.src2_ready         (rsp_demux_006_src2_ready),              //      src2.ready
		.src2_valid         (rsp_demux_006_src2_valid),              //          .valid
		.src2_data          (rsp_demux_006_src2_data),               //          .data
		.src2_channel       (rsp_demux_006_src2_channel),            //          .channel
		.src2_startofpacket (rsp_demux_006_src2_startofpacket),      //          .startofpacket
		.src2_endofpacket   (rsp_demux_006_src2_endofpacket),        //          .endofpacket
		.src3_ready         (rsp_demux_006_src3_ready),              //      src3.ready
		.src3_valid         (rsp_demux_006_src3_valid),              //          .valid
		.src3_data          (rsp_demux_006_src3_data),               //          .data
		.src3_channel       (rsp_demux_006_src3_channel),            //          .channel
		.src3_startofpacket (rsp_demux_006_src3_startofpacket),      //          .startofpacket
		.src3_endofpacket   (rsp_demux_006_src3_endofpacket),        //          .endofpacket
		.src4_ready         (rsp_demux_006_src4_ready),              //      src4.ready
		.src4_valid         (rsp_demux_006_src4_valid),              //          .valid
		.src4_data          (rsp_demux_006_src4_data),               //          .data
		.src4_channel       (rsp_demux_006_src4_channel),            //          .channel
		.src4_startofpacket (rsp_demux_006_src4_startofpacket),      //          .startofpacket
		.src4_endofpacket   (rsp_demux_006_src4_endofpacket)         //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux rsp_demux_007 (
		.clk                (System_PLL_sys_clk_clk),                //       clk.clk
		.reset              (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                  //      sink.ready
		.sink_channel       (router_016_src_channel),                //          .channel
		.sink_data          (router_016_src_data),                   //          .data
		.sink_startofpacket (router_016_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_016_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),              //          .valid
		.src0_data          (rsp_demux_007_src0_data),               //          .data
		.src0_channel       (rsp_demux_007_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket),        //          .endofpacket
		.src1_ready         (rsp_demux_007_src1_ready),              //      src1.ready
		.src1_valid         (rsp_demux_007_src1_valid),              //          .valid
		.src1_data          (rsp_demux_007_src1_data),               //          .data
		.src1_channel       (rsp_demux_007_src1_channel),            //          .channel
		.src1_startofpacket (rsp_demux_007_src1_startofpacket),      //          .startofpacket
		.src1_endofpacket   (rsp_demux_007_src1_endofpacket),        //          .endofpacket
		.src2_ready         (rsp_demux_007_src2_ready),              //      src2.ready
		.src2_valid         (rsp_demux_007_src2_valid),              //          .valid
		.src2_data          (rsp_demux_007_src2_data),               //          .data
		.src2_channel       (rsp_demux_007_src2_channel),            //          .channel
		.src2_startofpacket (rsp_demux_007_src2_startofpacket),      //          .startofpacket
		.src2_endofpacket   (rsp_demux_007_src2_endofpacket),        //          .endofpacket
		.src3_ready         (rsp_demux_007_src3_ready),              //      src3.ready
		.src3_valid         (rsp_demux_007_src3_valid),              //          .valid
		.src3_data          (rsp_demux_007_src3_data),               //          .data
		.src3_channel       (rsp_demux_007_src3_channel),            //          .channel
		.src3_startofpacket (rsp_demux_007_src3_startofpacket),      //          .startofpacket
		.src3_endofpacket   (rsp_demux_007_src3_endofpacket),        //          .endofpacket
		.src4_ready         (rsp_demux_007_src4_ready),              //      src4.ready
		.src4_valid         (rsp_demux_007_src4_valid),              //          .valid
		.src4_data          (rsp_demux_007_src4_data),               //          .data
		.src4_channel       (rsp_demux_007_src4_channel),            //          .channel
		.src4_startofpacket (rsp_demux_007_src4_startofpacket),      //          .startofpacket
		.src4_endofpacket   (rsp_demux_007_src4_endofpacket)         //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux rsp_demux_008 (
		.clk                (System_PLL_sys_clk_clk),                //       clk.clk
		.reset              (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                  //      sink.ready
		.sink_channel       (router_017_src_channel),                //          .channel
		.sink_data          (router_017_src_data),                   //          .data
		.sink_startofpacket (router_017_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_017_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),              //          .valid
		.src0_data          (rsp_demux_008_src0_data),               //          .data
		.src0_channel       (rsp_demux_008_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket),        //          .endofpacket
		.src1_ready         (rsp_demux_008_src1_ready),              //      src1.ready
		.src1_valid         (rsp_demux_008_src1_valid),              //          .valid
		.src1_data          (rsp_demux_008_src1_data),               //          .data
		.src1_channel       (rsp_demux_008_src1_channel),            //          .channel
		.src1_startofpacket (rsp_demux_008_src1_startofpacket),      //          .startofpacket
		.src1_endofpacket   (rsp_demux_008_src1_endofpacket),        //          .endofpacket
		.src2_ready         (rsp_demux_008_src2_ready),              //      src2.ready
		.src2_valid         (rsp_demux_008_src2_valid),              //          .valid
		.src2_data          (rsp_demux_008_src2_data),               //          .data
		.src2_channel       (rsp_demux_008_src2_channel),            //          .channel
		.src2_startofpacket (rsp_demux_008_src2_startofpacket),      //          .startofpacket
		.src2_endofpacket   (rsp_demux_008_src2_endofpacket),        //          .endofpacket
		.src3_ready         (rsp_demux_008_src3_ready),              //      src3.ready
		.src3_valid         (rsp_demux_008_src3_valid),              //          .valid
		.src3_data          (rsp_demux_008_src3_data),               //          .data
		.src3_channel       (rsp_demux_008_src3_channel),            //          .channel
		.src3_startofpacket (rsp_demux_008_src3_startofpacket),      //          .startofpacket
		.src3_endofpacket   (rsp_demux_008_src3_endofpacket),        //          .endofpacket
		.src4_ready         (rsp_demux_008_src4_ready),              //      src4.ready
		.src4_valid         (rsp_demux_008_src4_valid),              //          .valid
		.src4_data          (rsp_demux_008_src4_data),               //          .data
		.src4_channel       (rsp_demux_008_src4_channel),            //          .channel
		.src4_startofpacket (rsp_demux_008_src4_startofpacket),      //          .startofpacket
		.src4_endofpacket   (rsp_demux_008_src4_endofpacket)         //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_005 rsp_demux_009 (
		.clk                (System_PLL_sys_clk_clk),                //       clk.clk
		.reset              (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                  //      sink.ready
		.sink_channel       (router_018_src_channel),                //          .channel
		.sink_data          (router_018_src_data),                   //          .data
		.sink_startofpacket (router_018_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_018_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),              //          .valid
		.src0_data          (rsp_demux_009_src0_data),               //          .data
		.src0_channel       (rsp_demux_009_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket),        //          .endofpacket
		.src1_ready         (rsp_demux_009_src1_ready),              //      src1.ready
		.src1_valid         (rsp_demux_009_src1_valid),              //          .valid
		.src1_data          (rsp_demux_009_src1_data),               //          .data
		.src1_channel       (rsp_demux_009_src1_channel),            //          .channel
		.src1_startofpacket (rsp_demux_009_src1_startofpacket),      //          .startofpacket
		.src1_endofpacket   (rsp_demux_009_src1_endofpacket),        //          .endofpacket
		.src2_ready         (rsp_demux_009_src2_ready),              //      src2.ready
		.src2_valid         (rsp_demux_009_src2_valid),              //          .valid
		.src2_data          (rsp_demux_009_src2_data),               //          .data
		.src2_channel       (rsp_demux_009_src2_channel),            //          .channel
		.src2_startofpacket (rsp_demux_009_src2_startofpacket),      //          .startofpacket
		.src2_endofpacket   (rsp_demux_009_src2_endofpacket),        //          .endofpacket
		.src3_ready         (rsp_demux_009_src3_ready),              //      src3.ready
		.src3_valid         (rsp_demux_009_src3_valid),              //          .valid
		.src3_data          (rsp_demux_009_src3_data),               //          .data
		.src3_channel       (rsp_demux_009_src3_channel),            //          .channel
		.src3_startofpacket (rsp_demux_009_src3_startofpacket),      //          .startofpacket
		.src3_endofpacket   (rsp_demux_009_src3_endofpacket)         //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_005 rsp_demux_010 (
		.clk                (System_PLL_sys_clk_clk),                //       clk.clk
		.reset              (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_019_src_ready),                  //      sink.ready
		.sink_channel       (router_019_src_channel),                //          .channel
		.sink_data          (router_019_src_data),                   //          .data
		.sink_startofpacket (router_019_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_019_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_019_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),              //          .valid
		.src0_data          (rsp_demux_010_src0_data),               //          .data
		.src0_channel       (rsp_demux_010_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket),        //          .endofpacket
		.src1_ready         (rsp_demux_010_src1_ready),              //      src1.ready
		.src1_valid         (rsp_demux_010_src1_valid),              //          .valid
		.src1_data          (rsp_demux_010_src1_data),               //          .data
		.src1_channel       (rsp_demux_010_src1_channel),            //          .channel
		.src1_startofpacket (rsp_demux_010_src1_startofpacket),      //          .startofpacket
		.src1_endofpacket   (rsp_demux_010_src1_endofpacket),        //          .endofpacket
		.src2_ready         (rsp_demux_010_src2_ready),              //      src2.ready
		.src2_valid         (rsp_demux_010_src2_valid),              //          .valid
		.src2_data          (rsp_demux_010_src2_data),               //          .data
		.src2_channel       (rsp_demux_010_src2_channel),            //          .channel
		.src2_startofpacket (rsp_demux_010_src2_startofpacket),      //          .startofpacket
		.src2_endofpacket   (rsp_demux_010_src2_endofpacket),        //          .endofpacket
		.src3_ready         (rsp_demux_010_src3_ready),              //      src3.ready
		.src3_valid         (rsp_demux_010_src3_valid),              //          .valid
		.src3_data          (rsp_demux_010_src3_data),               //          .data
		.src3_channel       (rsp_demux_010_src3_channel),            //          .channel
		.src3_startofpacket (rsp_demux_010_src3_startofpacket),      //          .startofpacket
		.src3_endofpacket   (rsp_demux_010_src3_endofpacket)         //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux_011 rsp_demux_011 (
		.clk                (System_PLL_sys_clk_clk),                //       clk.clk
		.reset              (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_020_src_ready),                  //      sink.ready
		.sink_channel       (router_020_src_channel),                //          .channel
		.sink_data          (router_020_src_data),                   //          .data
		.sink_startofpacket (router_020_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_020_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_020_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),              //          .valid
		.src0_data          (rsp_demux_011_src0_data),               //          .data
		.src0_channel       (rsp_demux_011_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket),        //          .endofpacket
		.src1_ready         (rsp_demux_011_src1_ready),              //      src1.ready
		.src1_valid         (rsp_demux_011_src1_valid),              //          .valid
		.src1_data          (rsp_demux_011_src1_data),               //          .data
		.src1_channel       (rsp_demux_011_src1_channel),            //          .channel
		.src1_startofpacket (rsp_demux_011_src1_startofpacket),      //          .startofpacket
		.src1_endofpacket   (rsp_demux_011_src1_endofpacket)         //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux_011 rsp_demux_012 (
		.clk                (System_PLL_sys_clk_clk),                //       clk.clk
		.reset              (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_021_src_ready),                  //      sink.ready
		.sink_channel       (router_021_src_channel),                //          .channel
		.sink_data          (router_021_src_data),                   //          .data
		.sink_startofpacket (router_021_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_021_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_021_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),              //          .valid
		.src0_data          (rsp_demux_012_src0_data),               //          .data
		.src0_channel       (rsp_demux_012_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket),        //          .endofpacket
		.src1_ready         (rsp_demux_012_src1_ready),              //      src1.ready
		.src1_valid         (rsp_demux_012_src1_valid),              //          .valid
		.src1_data          (rsp_demux_012_src1_data),               //          .data
		.src1_channel       (rsp_demux_012_src1_channel),            //          .channel
		.src1_startofpacket (rsp_demux_012_src1_startofpacket),      //          .startofpacket
		.src1_endofpacket   (rsp_demux_012_src1_endofpacket)         //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux_011 rsp_demux_013 (
		.clk                (System_PLL_sys_clk_clk),                //       clk.clk
		.reset              (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_022_src_ready),                  //      sink.ready
		.sink_channel       (router_022_src_channel),                //          .channel
		.sink_data          (router_022_src_data),                   //          .data
		.sink_startofpacket (router_022_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_022_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_022_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),              //          .valid
		.src0_data          (rsp_demux_013_src0_data),               //          .data
		.src0_channel       (rsp_demux_013_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket),        //          .endofpacket
		.src1_ready         (rsp_demux_013_src1_ready),              //      src1.ready
		.src1_valid         (rsp_demux_013_src1_valid),              //          .valid
		.src1_data          (rsp_demux_013_src1_data),               //          .data
		.src1_channel       (rsp_demux_013_src1_channel),            //          .channel
		.src1_startofpacket (rsp_demux_013_src1_startofpacket),      //          .startofpacket
		.src1_endofpacket   (rsp_demux_013_src1_endofpacket)         //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux rsp_demux_014 (
		.clk                (System_PLL_sys_clk_clk),                //       clk.clk
		.reset              (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_023_src_ready),                  //      sink.ready
		.sink_channel       (router_023_src_channel),                //          .channel
		.sink_data          (router_023_src_data),                   //          .data
		.sink_startofpacket (router_023_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_023_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_023_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),              //          .valid
		.src0_data          (rsp_demux_014_src0_data),               //          .data
		.src0_channel       (rsp_demux_014_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket),        //          .endofpacket
		.src1_ready         (rsp_demux_014_src1_ready),              //      src1.ready
		.src1_valid         (rsp_demux_014_src1_valid),              //          .valid
		.src1_data          (rsp_demux_014_src1_data),               //          .data
		.src1_channel       (rsp_demux_014_src1_channel),            //          .channel
		.src1_startofpacket (rsp_demux_014_src1_startofpacket),      //          .startofpacket
		.src1_endofpacket   (rsp_demux_014_src1_endofpacket),        //          .endofpacket
		.src2_ready         (rsp_demux_014_src2_ready),              //      src2.ready
		.src2_valid         (rsp_demux_014_src2_valid),              //          .valid
		.src2_data          (rsp_demux_014_src2_data),               //          .data
		.src2_channel       (rsp_demux_014_src2_channel),            //          .channel
		.src2_startofpacket (rsp_demux_014_src2_startofpacket),      //          .startofpacket
		.src2_endofpacket   (rsp_demux_014_src2_endofpacket),        //          .endofpacket
		.src3_ready         (rsp_demux_014_src3_ready),              //      src3.ready
		.src3_valid         (rsp_demux_014_src3_valid),              //          .valid
		.src3_data          (rsp_demux_014_src3_data),               //          .data
		.src3_channel       (rsp_demux_014_src3_channel),            //          .channel
		.src3_startofpacket (rsp_demux_014_src3_startofpacket),      //          .startofpacket
		.src3_endofpacket   (rsp_demux_014_src3_endofpacket),        //          .endofpacket
		.src4_ready         (rsp_demux_014_src4_ready),              //      src4.ready
		.src4_valid         (rsp_demux_014_src4_valid),              //          .valid
		.src4_data          (rsp_demux_014_src4_data),               //          .data
		.src4_channel       (rsp_demux_014_src4_channel),            //          .channel
		.src4_startofpacket (rsp_demux_014_src4_startofpacket),      //          .startofpacket
		.src4_endofpacket   (rsp_demux_014_src4_endofpacket)         //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux rsp_demux_015 (
		.clk                (System_PLL_sys_clk_clk),                //       clk.clk
		.reset              (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_024_src_ready),                  //      sink.ready
		.sink_channel       (router_024_src_channel),                //          .channel
		.sink_data          (router_024_src_data),                   //          .data
		.sink_startofpacket (router_024_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_024_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_024_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),              //          .valid
		.src0_data          (rsp_demux_015_src0_data),               //          .data
		.src0_channel       (rsp_demux_015_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket),        //          .endofpacket
		.src1_ready         (rsp_demux_015_src1_ready),              //      src1.ready
		.src1_valid         (rsp_demux_015_src1_valid),              //          .valid
		.src1_data          (rsp_demux_015_src1_data),               //          .data
		.src1_channel       (rsp_demux_015_src1_channel),            //          .channel
		.src1_startofpacket (rsp_demux_015_src1_startofpacket),      //          .startofpacket
		.src1_endofpacket   (rsp_demux_015_src1_endofpacket),        //          .endofpacket
		.src2_ready         (rsp_demux_015_src2_ready),              //      src2.ready
		.src2_valid         (rsp_demux_015_src2_valid),              //          .valid
		.src2_data          (rsp_demux_015_src2_data),               //          .data
		.src2_channel       (rsp_demux_015_src2_channel),            //          .channel
		.src2_startofpacket (rsp_demux_015_src2_startofpacket),      //          .startofpacket
		.src2_endofpacket   (rsp_demux_015_src2_endofpacket),        //          .endofpacket
		.src3_ready         (rsp_demux_015_src3_ready),              //      src3.ready
		.src3_valid         (rsp_demux_015_src3_valid),              //          .valid
		.src3_data          (rsp_demux_015_src3_data),               //          .data
		.src3_channel       (rsp_demux_015_src3_channel),            //          .channel
		.src3_startofpacket (rsp_demux_015_src3_startofpacket),      //          .startofpacket
		.src3_endofpacket   (rsp_demux_015_src3_endofpacket),        //          .endofpacket
		.src4_ready         (rsp_demux_015_src4_ready),              //      src4.ready
		.src4_valid         (rsp_demux_015_src4_valid),              //          .valid
		.src4_data          (rsp_demux_015_src4_data),               //          .data
		.src4_channel       (rsp_demux_015_src4_channel),            //          .channel
		.src4_startofpacket (rsp_demux_015_src4_startofpacket),      //          .startofpacket
		.src4_endofpacket   (rsp_demux_015_src4_endofpacket)         //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux rsp_demux_016 (
		.clk                (System_PLL_sys_clk_clk),                //       clk.clk
		.reset              (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_025_src_ready),                  //      sink.ready
		.sink_channel       (router_025_src_channel),                //          .channel
		.sink_data          (router_025_src_data),                   //          .data
		.sink_startofpacket (router_025_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_025_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_025_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),              //          .valid
		.src0_data          (rsp_demux_016_src0_data),               //          .data
		.src0_channel       (rsp_demux_016_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket),        //          .endofpacket
		.src1_ready         (rsp_demux_016_src1_ready),              //      src1.ready
		.src1_valid         (rsp_demux_016_src1_valid),              //          .valid
		.src1_data          (rsp_demux_016_src1_data),               //          .data
		.src1_channel       (rsp_demux_016_src1_channel),            //          .channel
		.src1_startofpacket (rsp_demux_016_src1_startofpacket),      //          .startofpacket
		.src1_endofpacket   (rsp_demux_016_src1_endofpacket),        //          .endofpacket
		.src2_ready         (rsp_demux_016_src2_ready),              //      src2.ready
		.src2_valid         (rsp_demux_016_src2_valid),              //          .valid
		.src2_data          (rsp_demux_016_src2_data),               //          .data
		.src2_channel       (rsp_demux_016_src2_channel),            //          .channel
		.src2_startofpacket (rsp_demux_016_src2_startofpacket),      //          .startofpacket
		.src2_endofpacket   (rsp_demux_016_src2_endofpacket),        //          .endofpacket
		.src3_ready         (rsp_demux_016_src3_ready),              //      src3.ready
		.src3_valid         (rsp_demux_016_src3_valid),              //          .valid
		.src3_data          (rsp_demux_016_src3_data),               //          .data
		.src3_channel       (rsp_demux_016_src3_channel),            //          .channel
		.src3_startofpacket (rsp_demux_016_src3_startofpacket),      //          .startofpacket
		.src3_endofpacket   (rsp_demux_016_src3_endofpacket),        //          .endofpacket
		.src4_ready         (rsp_demux_016_src4_ready),              //      src4.ready
		.src4_valid         (rsp_demux_016_src4_valid),              //          .valid
		.src4_data          (rsp_demux_016_src4_data),               //          .data
		.src4_channel       (rsp_demux_016_src4_channel),            //          .channel
		.src4_startofpacket (rsp_demux_016_src4_startofpacket),      //          .startofpacket
		.src4_endofpacket   (rsp_demux_016_src4_endofpacket)         //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_007 rsp_demux_017 (
		.clk                (System_PLL_sys_clk_clk),                //       clk.clk
		.reset              (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_026_src_ready),                  //      sink.ready
		.sink_channel       (router_026_src_channel),                //          .channel
		.sink_data          (router_026_src_data),                   //          .data
		.sink_startofpacket (router_026_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_026_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_026_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_017_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_017_src0_valid),              //          .valid
		.src0_data          (rsp_demux_017_src0_data),               //          .data
		.src0_channel       (rsp_demux_017_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_017_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_017_src0_endofpacket),        //          .endofpacket
		.src1_ready         (rsp_demux_017_src1_ready),              //      src1.ready
		.src1_valid         (rsp_demux_017_src1_valid),              //          .valid
		.src1_data          (rsp_demux_017_src1_data),               //          .data
		.src1_channel       (rsp_demux_017_src1_channel),            //          .channel
		.src1_startofpacket (rsp_demux_017_src1_startofpacket),      //          .startofpacket
		.src1_endofpacket   (rsp_demux_017_src1_endofpacket),        //          .endofpacket
		.src2_ready         (rsp_demux_017_src2_ready),              //      src2.ready
		.src2_valid         (rsp_demux_017_src2_valid),              //          .valid
		.src2_data          (rsp_demux_017_src2_data),               //          .data
		.src2_channel       (rsp_demux_017_src2_channel),            //          .channel
		.src2_startofpacket (rsp_demux_017_src2_startofpacket),      //          .startofpacket
		.src2_endofpacket   (rsp_demux_017_src2_endofpacket)         //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_007 rsp_demux_018 (
		.clk                (System_PLL_sys_clk_clk),                //       clk.clk
		.reset              (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_027_src_ready),                  //      sink.ready
		.sink_channel       (router_027_src_channel),                //          .channel
		.sink_data          (router_027_src_data),                   //          .data
		.sink_startofpacket (router_027_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_027_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_027_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_018_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_018_src0_valid),              //          .valid
		.src0_data          (rsp_demux_018_src0_data),               //          .data
		.src0_channel       (rsp_demux_018_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_018_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_018_src0_endofpacket),        //          .endofpacket
		.src1_ready         (rsp_demux_018_src1_ready),              //      src1.ready
		.src1_valid         (rsp_demux_018_src1_valid),              //          .valid
		.src1_data          (rsp_demux_018_src1_data),               //          .data
		.src1_channel       (rsp_demux_018_src1_channel),            //          .channel
		.src1_startofpacket (rsp_demux_018_src1_startofpacket),      //          .startofpacket
		.src1_endofpacket   (rsp_demux_018_src1_endofpacket),        //          .endofpacket
		.src2_ready         (rsp_demux_018_src2_ready),              //      src2.ready
		.src2_valid         (rsp_demux_018_src2_valid),              //          .valid
		.src2_data          (rsp_demux_018_src2_data),               //          .data
		.src2_channel       (rsp_demux_018_src2_channel),            //          .channel
		.src2_startofpacket (rsp_demux_018_src2_startofpacket),      //          .startofpacket
		.src2_endofpacket   (rsp_demux_018_src2_endofpacket)         //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_007 rsp_demux_019 (
		.clk                (System_PLL_sys_clk_clk),                //       clk.clk
		.reset              (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_028_src_ready),                  //      sink.ready
		.sink_channel       (router_028_src_channel),                //          .channel
		.sink_data          (router_028_src_data),                   //          .data
		.sink_startofpacket (router_028_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_028_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_028_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_019_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_019_src0_valid),              //          .valid
		.src0_data          (rsp_demux_019_src0_data),               //          .data
		.src0_channel       (rsp_demux_019_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_019_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_019_src0_endofpacket),        //          .endofpacket
		.src1_ready         (rsp_demux_019_src1_ready),              //      src1.ready
		.src1_valid         (rsp_demux_019_src1_valid),              //          .valid
		.src1_data          (rsp_demux_019_src1_data),               //          .data
		.src1_channel       (rsp_demux_019_src1_channel),            //          .channel
		.src1_startofpacket (rsp_demux_019_src1_startofpacket),      //          .startofpacket
		.src1_endofpacket   (rsp_demux_019_src1_endofpacket),        //          .endofpacket
		.src2_ready         (rsp_demux_019_src2_ready),              //      src2.ready
		.src2_valid         (rsp_demux_019_src2_valid),              //          .valid
		.src2_data          (rsp_demux_019_src2_data),               //          .data
		.src2_channel       (rsp_demux_019_src2_channel),            //          .channel
		.src2_startofpacket (rsp_demux_019_src2_startofpacket),      //          .startofpacket
		.src2_endofpacket   (rsp_demux_019_src2_endofpacket)         //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux_020 rsp_demux_020 (
		.clk                (System_PLL_sys_clk_clk),                //       clk.clk
		.reset              (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_029_src_ready),                  //      sink.ready
		.sink_channel       (router_029_src_channel),                //          .channel
		.sink_data          (router_029_src_data),                   //          .data
		.sink_startofpacket (router_029_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_029_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_029_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_020_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_020_src0_valid),              //          .valid
		.src0_data          (rsp_demux_020_src0_data),               //          .data
		.src0_channel       (rsp_demux_020_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_020_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_020_src0_endofpacket)         //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux_011 rsp_demux_021 (
		.clk                (System_PLL_sys_clk_clk),                           //       clk.clk
		.reset              (Nios2_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_030_src_ready),                             //      sink.ready
		.sink_channel       (router_030_src_channel),                           //          .channel
		.sink_data          (router_030_src_data),                              //          .data
		.sink_startofpacket (router_030_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_030_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_030_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_021_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_021_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_021_src0_data),                          //          .data
		.src0_channel       (rsp_demux_021_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_021_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_021_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (rsp_demux_021_src1_ready),                         //      src1.ready
		.src1_valid         (rsp_demux_021_src1_valid),                         //          .valid
		.src1_data          (rsp_demux_021_src1_data),                          //          .data
		.src1_channel       (rsp_demux_021_src1_channel),                       //          .channel
		.src1_startofpacket (rsp_demux_021_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_021_src1_endofpacket)                    //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux_020 rsp_demux_022 (
		.clk                (System_PLL_sys_clk_clk),                //       clk.clk
		.reset              (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_031_src_ready),                  //      sink.ready
		.sink_channel       (router_031_src_channel),                //          .channel
		.sink_data          (router_031_src_data),                   //          .data
		.sink_startofpacket (router_031_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_031_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_031_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_022_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_022_src0_valid),              //          .valid
		.src0_data          (rsp_demux_022_src0_data),               //          .data
		.src0_channel       (rsp_demux_022_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_022_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_022_src0_endofpacket)         //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux_020 rsp_demux_023 (
		.clk                (System_PLL_sys_clk_clk),                //       clk.clk
		.reset              (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_032_src_ready),                  //      sink.ready
		.sink_channel       (router_032_src_channel),                //          .channel
		.sink_data          (router_032_src_data),                   //          .data
		.sink_startofpacket (router_032_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_032_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_032_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_023_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_023_src0_valid),              //          .valid
		.src0_data          (rsp_demux_023_src0_data),               //          .data
		.src0_channel       (rsp_demux_023_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_023_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_023_src0_endofpacket)         //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux_011 rsp_demux_024 (
		.clk                (System_PLL_sys_clk_clk),                //       clk.clk
		.reset              (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_033_src_ready),                  //      sink.ready
		.sink_channel       (router_033_src_channel),                //          .channel
		.sink_data          (router_033_src_data),                   //          .data
		.sink_startofpacket (router_033_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_033_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_033_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_024_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_024_src0_valid),              //          .valid
		.src0_data          (rsp_demux_024_src0_data),               //          .data
		.src0_channel       (rsp_demux_024_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_024_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_024_src0_endofpacket),        //          .endofpacket
		.src1_ready         (rsp_demux_024_src1_ready),              //      src1.ready
		.src1_valid         (rsp_demux_024_src1_valid),              //          .valid
		.src1_data          (rsp_demux_024_src1_data),               //          .data
		.src1_channel       (rsp_demux_024_src1_channel),            //          .channel
		.src1_startofpacket (rsp_demux_024_src1_startofpacket),      //          .startofpacket
		.src1_endofpacket   (rsp_demux_024_src1_endofpacket)         //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux_011 rsp_demux_025 (
		.clk                (System_PLL_sys_clk_clk),                //       clk.clk
		.reset              (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_034_src_ready),                  //      sink.ready
		.sink_channel       (router_034_src_channel),                //          .channel
		.sink_data          (router_034_src_data),                   //          .data
		.sink_startofpacket (router_034_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_034_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_034_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_025_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_025_src0_valid),              //          .valid
		.src0_data          (rsp_demux_025_src0_data),               //          .data
		.src0_channel       (rsp_demux_025_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_025_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_025_src0_endofpacket),        //          .endofpacket
		.src1_ready         (rsp_demux_025_src1_ready),              //      src1.ready
		.src1_valid         (rsp_demux_025_src1_valid),              //          .valid
		.src1_data          (rsp_demux_025_src1_data),               //          .data
		.src1_channel       (rsp_demux_025_src1_channel),            //          .channel
		.src1_startofpacket (rsp_demux_025_src1_startofpacket),      //          .startofpacket
		.src1_endofpacket   (rsp_demux_025_src1_endofpacket)         //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux_011 rsp_demux_026 (
		.clk                (System_PLL_sys_clk_clk),                //       clk.clk
		.reset              (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_035_src_ready),                  //      sink.ready
		.sink_channel       (router_035_src_channel),                //          .channel
		.sink_data          (router_035_src_data),                   //          .data
		.sink_startofpacket (router_035_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_035_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_035_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_026_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_026_src0_valid),              //          .valid
		.src0_data          (rsp_demux_026_src0_data),               //          .data
		.src0_channel       (rsp_demux_026_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_026_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_026_src0_endofpacket),        //          .endofpacket
		.src1_ready         (rsp_demux_026_src1_ready),              //      src1.ready
		.src1_valid         (rsp_demux_026_src1_valid),              //          .valid
		.src1_data          (rsp_demux_026_src1_data),               //          .data
		.src1_channel       (rsp_demux_026_src1_channel),            //          .channel
		.src1_startofpacket (rsp_demux_026_src1_startofpacket),      //          .startofpacket
		.src1_endofpacket   (rsp_demux_026_src1_endofpacket)         //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux_011 rsp_demux_027 (
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (Nios2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_036_src_ready),                    //      sink.ready
		.sink_channel       (router_036_src_channel),                  //          .channel
		.sink_data          (router_036_src_data),                     //          .data
		.sink_startofpacket (router_036_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_036_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_036_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_027_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_027_src0_valid),                //          .valid
		.src0_data          (rsp_demux_027_src0_data),                 //          .data
		.src0_channel       (rsp_demux_027_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_027_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_027_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_027_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_027_src1_valid),                //          .valid
		.src1_data          (rsp_demux_027_src1_data),                 //          .data
		.src1_channel       (rsp_demux_027_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_027_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_027_src1_endofpacket)           //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                  (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset                (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                                                        //       src.ready
		.src_valid            (rsp_mux_src_valid),                                                        //          .valid
		.src_data             (rsp_mux_src_data),                                                         //          .data
		.src_channel          (rsp_mux_src_channel),                                                      //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                                                //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                                                  //          .endofpacket
		.sink0_ready          (rsp_demux_src0_ready),                                                     //     sink0.ready
		.sink0_valid          (rsp_demux_src0_valid),                                                     //          .valid
		.sink0_channel        (rsp_demux_src0_channel),                                                   //          .channel
		.sink0_data           (rsp_demux_src0_data),                                                      //          .data
		.sink0_startofpacket  (rsp_demux_src0_startofpacket),                                             //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src0_endofpacket),                                               //          .endofpacket
		.sink1_ready          (rsp_demux_001_src0_ready),                                                 //     sink1.ready
		.sink1_valid          (rsp_demux_001_src0_valid),                                                 //          .valid
		.sink1_channel        (rsp_demux_001_src0_channel),                                               //          .channel
		.sink1_data           (rsp_demux_001_src0_data),                                                  //          .data
		.sink1_startofpacket  (rsp_demux_001_src0_startofpacket),                                         //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src0_endofpacket),                                           //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                                                 //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                                                 //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),                                               //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                                                  //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),                                         //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),                                           //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                                                 //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                                                 //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),                                               //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                                                  //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),                                         //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),                                           //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                                                 //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                                                 //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                                               //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                                                  //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),                                         //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),                                           //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                                                 //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                                                 //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),                                               //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                                                  //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),                                         //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),                                           //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                                                 //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                                                 //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),                                               //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                                                  //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),                                         //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),                                           //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                                                 //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                                                 //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),                                               //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                                                  //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),                                         //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),                                           //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                                                 //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                                                 //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),                                               //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                                                  //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),                                         //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),                                           //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                                                 //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                                                 //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),                                               //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                                                  //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),                                         //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),                                           //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                                                 //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                                                 //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),                                               //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                                                  //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),                                         //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),                                           //          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),                                                 //    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),                                                 //          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),                                               //          .channel
		.sink11_data          (rsp_demux_011_src0_data),                                                  //          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),                                         //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket),                                           //          .endofpacket
		.sink12_ready         (rsp_demux_012_src0_ready),                                                 //    sink12.ready
		.sink12_valid         (rsp_demux_012_src0_valid),                                                 //          .valid
		.sink12_channel       (rsp_demux_012_src0_channel),                                               //          .channel
		.sink12_data          (rsp_demux_012_src0_data),                                                  //          .data
		.sink12_startofpacket (rsp_demux_012_src0_startofpacket),                                         //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src0_endofpacket)                                            //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_mux rsp_mux_001 (
		.clk                  (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset                (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_001_src_ready),                                                    //       src.ready
		.src_valid            (rsp_mux_001_src_valid),                                                    //          .valid
		.src_data             (rsp_mux_001_src_data),                                                     //          .data
		.src_channel          (rsp_mux_001_src_channel),                                                  //          .channel
		.src_startofpacket    (rsp_mux_001_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket      (rsp_mux_001_src_endofpacket),                                              //          .endofpacket
		.sink0_ready          (rsp_demux_src1_ready),                                                     //     sink0.ready
		.sink0_valid          (rsp_demux_src1_valid),                                                     //          .valid
		.sink0_channel        (rsp_demux_src1_channel),                                                   //          .channel
		.sink0_data           (rsp_demux_src1_data),                                                      //          .data
		.sink0_startofpacket  (rsp_demux_src1_startofpacket),                                             //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src1_endofpacket),                                               //          .endofpacket
		.sink1_ready          (rsp_demux_001_src1_ready),                                                 //     sink1.ready
		.sink1_valid          (rsp_demux_001_src1_valid),                                                 //          .valid
		.sink1_channel        (rsp_demux_001_src1_channel),                                               //          .channel
		.sink1_data           (rsp_demux_001_src1_data),                                                  //          .data
		.sink1_startofpacket  (rsp_demux_001_src1_startofpacket),                                         //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src1_endofpacket),                                           //          .endofpacket
		.sink2_ready          (rsp_demux_002_src1_ready),                                                 //     sink2.ready
		.sink2_valid          (rsp_demux_002_src1_valid),                                                 //          .valid
		.sink2_channel        (rsp_demux_002_src1_channel),                                               //          .channel
		.sink2_data           (rsp_demux_002_src1_data),                                                  //          .data
		.sink2_startofpacket  (rsp_demux_002_src1_startofpacket),                                         //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src1_endofpacket),                                           //          .endofpacket
		.sink3_ready          (rsp_demux_003_src1_ready),                                                 //     sink3.ready
		.sink3_valid          (rsp_demux_003_src1_valid),                                                 //          .valid
		.sink3_channel        (rsp_demux_003_src1_channel),                                               //          .channel
		.sink3_data           (rsp_demux_003_src1_data),                                                  //          .data
		.sink3_startofpacket  (rsp_demux_003_src1_startofpacket),                                         //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src1_endofpacket),                                           //          .endofpacket
		.sink4_ready          (rsp_demux_004_src1_ready),                                                 //     sink4.ready
		.sink4_valid          (rsp_demux_004_src1_valid),                                                 //          .valid
		.sink4_channel        (rsp_demux_004_src1_channel),                                               //          .channel
		.sink4_data           (rsp_demux_004_src1_data),                                                  //          .data
		.sink4_startofpacket  (rsp_demux_004_src1_startofpacket),                                         //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src1_endofpacket),                                           //          .endofpacket
		.sink5_ready          (rsp_demux_005_src1_ready),                                                 //     sink5.ready
		.sink5_valid          (rsp_demux_005_src1_valid),                                                 //          .valid
		.sink5_channel        (rsp_demux_005_src1_channel),                                               //          .channel
		.sink5_data           (rsp_demux_005_src1_data),                                                  //          .data
		.sink5_startofpacket  (rsp_demux_005_src1_startofpacket),                                         //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src1_endofpacket),                                           //          .endofpacket
		.sink6_ready          (rsp_demux_006_src1_ready),                                                 //     sink6.ready
		.sink6_valid          (rsp_demux_006_src1_valid),                                                 //          .valid
		.sink6_channel        (rsp_demux_006_src1_channel),                                               //          .channel
		.sink6_data           (rsp_demux_006_src1_data),                                                  //          .data
		.sink6_startofpacket  (rsp_demux_006_src1_startofpacket),                                         //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src1_endofpacket),                                           //          .endofpacket
		.sink7_ready          (rsp_demux_007_src1_ready),                                                 //     sink7.ready
		.sink7_valid          (rsp_demux_007_src1_valid),                                                 //          .valid
		.sink7_channel        (rsp_demux_007_src1_channel),                                               //          .channel
		.sink7_data           (rsp_demux_007_src1_data),                                                  //          .data
		.sink7_startofpacket  (rsp_demux_007_src1_startofpacket),                                         //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src1_endofpacket),                                           //          .endofpacket
		.sink8_ready          (rsp_demux_008_src1_ready),                                                 //     sink8.ready
		.sink8_valid          (rsp_demux_008_src1_valid),                                                 //          .valid
		.sink8_channel        (rsp_demux_008_src1_channel),                                               //          .channel
		.sink8_data           (rsp_demux_008_src1_data),                                                  //          .data
		.sink8_startofpacket  (rsp_demux_008_src1_startofpacket),                                         //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src1_endofpacket),                                           //          .endofpacket
		.sink9_ready          (rsp_demux_009_src1_ready),                                                 //     sink9.ready
		.sink9_valid          (rsp_demux_009_src1_valid),                                                 //          .valid
		.sink9_channel        (rsp_demux_009_src1_channel),                                               //          .channel
		.sink9_data           (rsp_demux_009_src1_data),                                                  //          .data
		.sink9_startofpacket  (rsp_demux_009_src1_startofpacket),                                         //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src1_endofpacket),                                           //          .endofpacket
		.sink10_ready         (rsp_demux_010_src1_ready),                                                 //    sink10.ready
		.sink10_valid         (rsp_demux_010_src1_valid),                                                 //          .valid
		.sink10_channel       (rsp_demux_010_src1_channel),                                               //          .channel
		.sink10_data          (rsp_demux_010_src1_data),                                                  //          .data
		.sink10_startofpacket (rsp_demux_010_src1_startofpacket),                                         //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src1_endofpacket),                                           //          .endofpacket
		.sink11_ready         (rsp_demux_011_src1_ready),                                                 //    sink11.ready
		.sink11_valid         (rsp_demux_011_src1_valid),                                                 //          .valid
		.sink11_channel       (rsp_demux_011_src1_channel),                                               //          .channel
		.sink11_data          (rsp_demux_011_src1_data),                                                  //          .data
		.sink11_startofpacket (rsp_demux_011_src1_startofpacket),                                         //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src1_endofpacket),                                           //          .endofpacket
		.sink12_ready         (rsp_demux_012_src1_ready),                                                 //    sink12.ready
		.sink12_valid         (rsp_demux_012_src1_valid),                                                 //          .valid
		.sink12_channel       (rsp_demux_012_src1_channel),                                               //          .channel
		.sink12_data          (rsp_demux_012_src1_data),                                                  //          .data
		.sink12_startofpacket (rsp_demux_012_src1_startofpacket),                                         //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src1_endofpacket)                                            //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_mux_002 rsp_mux_002 (
		.clk                  (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset                (Nios2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_002_src_ready),                   //       src.ready
		.src_valid            (rsp_mux_002_src_valid),                   //          .valid
		.src_data             (rsp_mux_002_src_data),                    //          .data
		.src_channel          (rsp_mux_002_src_channel),                 //          .channel
		.src_startofpacket    (rsp_mux_002_src_startofpacket),           //          .startofpacket
		.src_endofpacket      (rsp_mux_002_src_endofpacket),             //          .endofpacket
		.sink0_ready          (rsp_demux_src2_ready),                    //     sink0.ready
		.sink0_valid          (rsp_demux_src2_valid),                    //          .valid
		.sink0_channel        (rsp_demux_src2_channel),                  //          .channel
		.sink0_data           (rsp_demux_src2_data),                     //          .data
		.sink0_startofpacket  (rsp_demux_src2_startofpacket),            //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src2_endofpacket),              //          .endofpacket
		.sink1_ready          (rsp_demux_001_src2_ready),                //     sink1.ready
		.sink1_valid          (rsp_demux_001_src2_valid),                //          .valid
		.sink1_channel        (rsp_demux_001_src2_channel),              //          .channel
		.sink1_data           (rsp_demux_001_src2_data),                 //          .data
		.sink1_startofpacket  (rsp_demux_001_src2_startofpacket),        //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src2_endofpacket),          //          .endofpacket
		.sink2_ready          (rsp_demux_002_src2_ready),                //     sink2.ready
		.sink2_valid          (rsp_demux_002_src2_valid),                //          .valid
		.sink2_channel        (rsp_demux_002_src2_channel),              //          .channel
		.sink2_data           (rsp_demux_002_src2_data),                 //          .data
		.sink2_startofpacket  (rsp_demux_002_src2_startofpacket),        //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src2_endofpacket),          //          .endofpacket
		.sink3_ready          (rsp_demux_003_src2_ready),                //     sink3.ready
		.sink3_valid          (rsp_demux_003_src2_valid),                //          .valid
		.sink3_channel        (rsp_demux_003_src2_channel),              //          .channel
		.sink3_data           (rsp_demux_003_src2_data),                 //          .data
		.sink3_startofpacket  (rsp_demux_003_src2_startofpacket),        //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src2_endofpacket),          //          .endofpacket
		.sink4_ready          (rsp_demux_004_src2_ready),                //     sink4.ready
		.sink4_valid          (rsp_demux_004_src2_valid),                //          .valid
		.sink4_channel        (rsp_demux_004_src2_channel),              //          .channel
		.sink4_data           (rsp_demux_004_src2_data),                 //          .data
		.sink4_startofpacket  (rsp_demux_004_src2_startofpacket),        //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src2_endofpacket),          //          .endofpacket
		.sink5_ready          (rsp_demux_005_src2_ready),                //     sink5.ready
		.sink5_valid          (rsp_demux_005_src2_valid),                //          .valid
		.sink5_channel        (rsp_demux_005_src2_channel),              //          .channel
		.sink5_data           (rsp_demux_005_src2_data),                 //          .data
		.sink5_startofpacket  (rsp_demux_005_src2_startofpacket),        //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src2_endofpacket),          //          .endofpacket
		.sink6_ready          (rsp_demux_006_src2_ready),                //     sink6.ready
		.sink6_valid          (rsp_demux_006_src2_valid),                //          .valid
		.sink6_channel        (rsp_demux_006_src2_channel),              //          .channel
		.sink6_data           (rsp_demux_006_src2_data),                 //          .data
		.sink6_startofpacket  (rsp_demux_006_src2_startofpacket),        //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src2_endofpacket),          //          .endofpacket
		.sink7_ready          (rsp_demux_007_src2_ready),                //     sink7.ready
		.sink7_valid          (rsp_demux_007_src2_valid),                //          .valid
		.sink7_channel        (rsp_demux_007_src2_channel),              //          .channel
		.sink7_data           (rsp_demux_007_src2_data),                 //          .data
		.sink7_startofpacket  (rsp_demux_007_src2_startofpacket),        //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src2_endofpacket),          //          .endofpacket
		.sink8_ready          (rsp_demux_008_src2_ready),                //     sink8.ready
		.sink8_valid          (rsp_demux_008_src2_valid),                //          .valid
		.sink8_channel        (rsp_demux_008_src2_channel),              //          .channel
		.sink8_data           (rsp_demux_008_src2_data),                 //          .data
		.sink8_startofpacket  (rsp_demux_008_src2_startofpacket),        //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src2_endofpacket),          //          .endofpacket
		.sink9_ready          (rsp_demux_009_src2_ready),                //     sink9.ready
		.sink9_valid          (rsp_demux_009_src2_valid),                //          .valid
		.sink9_channel        (rsp_demux_009_src2_channel),              //          .channel
		.sink9_data           (rsp_demux_009_src2_data),                 //          .data
		.sink9_startofpacket  (rsp_demux_009_src2_startofpacket),        //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src2_endofpacket),          //          .endofpacket
		.sink10_ready         (rsp_demux_010_src2_ready),                //    sink10.ready
		.sink10_valid         (rsp_demux_010_src2_valid),                //          .valid
		.sink10_channel       (rsp_demux_010_src2_channel),              //          .channel
		.sink10_data          (rsp_demux_010_src2_data),                 //          .data
		.sink10_startofpacket (rsp_demux_010_src2_startofpacket),        //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src2_endofpacket),          //          .endofpacket
		.sink11_ready         (rsp_demux_013_src0_ready),                //    sink11.ready
		.sink11_valid         (rsp_demux_013_src0_valid),                //          .valid
		.sink11_channel       (rsp_demux_013_src0_channel),              //          .channel
		.sink11_data          (rsp_demux_013_src0_data),                 //          .data
		.sink11_startofpacket (rsp_demux_013_src0_startofpacket),        //          .startofpacket
		.sink11_endofpacket   (rsp_demux_013_src0_endofpacket),          //          .endofpacket
		.sink12_ready         (rsp_demux_014_src0_ready),                //    sink12.ready
		.sink12_valid         (rsp_demux_014_src0_valid),                //          .valid
		.sink12_channel       (rsp_demux_014_src0_channel),              //          .channel
		.sink12_data          (rsp_demux_014_src0_data),                 //          .data
		.sink12_startofpacket (rsp_demux_014_src0_startofpacket),        //          .startofpacket
		.sink12_endofpacket   (rsp_demux_014_src0_endofpacket),          //          .endofpacket
		.sink13_ready         (rsp_demux_015_src0_ready),                //    sink13.ready
		.sink13_valid         (rsp_demux_015_src0_valid),                //          .valid
		.sink13_channel       (rsp_demux_015_src0_channel),              //          .channel
		.sink13_data          (rsp_demux_015_src0_data),                 //          .data
		.sink13_startofpacket (rsp_demux_015_src0_startofpacket),        //          .startofpacket
		.sink13_endofpacket   (rsp_demux_015_src0_endofpacket),          //          .endofpacket
		.sink14_ready         (rsp_demux_016_src0_ready),                //    sink14.ready
		.sink14_valid         (rsp_demux_016_src0_valid),                //          .valid
		.sink14_channel       (rsp_demux_016_src0_channel),              //          .channel
		.sink14_data          (rsp_demux_016_src0_data),                 //          .data
		.sink14_startofpacket (rsp_demux_016_src0_startofpacket),        //          .startofpacket
		.sink14_endofpacket   (rsp_demux_016_src0_endofpacket),          //          .endofpacket
		.sink15_ready         (rsp_demux_017_src0_ready),                //    sink15.ready
		.sink15_valid         (rsp_demux_017_src0_valid),                //          .valid
		.sink15_channel       (rsp_demux_017_src0_channel),              //          .channel
		.sink15_data          (rsp_demux_017_src0_data),                 //          .data
		.sink15_startofpacket (rsp_demux_017_src0_startofpacket),        //          .startofpacket
		.sink15_endofpacket   (rsp_demux_017_src0_endofpacket),          //          .endofpacket
		.sink16_ready         (rsp_demux_018_src0_ready),                //    sink16.ready
		.sink16_valid         (rsp_demux_018_src0_valid),                //          .valid
		.sink16_channel       (rsp_demux_018_src0_channel),              //          .channel
		.sink16_data          (rsp_demux_018_src0_data),                 //          .data
		.sink16_startofpacket (rsp_demux_018_src0_startofpacket),        //          .startofpacket
		.sink16_endofpacket   (rsp_demux_018_src0_endofpacket),          //          .endofpacket
		.sink17_ready         (rsp_demux_019_src0_ready),                //    sink17.ready
		.sink17_valid         (rsp_demux_019_src0_valid),                //          .valid
		.sink17_channel       (rsp_demux_019_src0_channel),              //          .channel
		.sink17_data          (rsp_demux_019_src0_data),                 //          .data
		.sink17_startofpacket (rsp_demux_019_src0_startofpacket),        //          .startofpacket
		.sink17_endofpacket   (rsp_demux_019_src0_endofpacket),          //          .endofpacket
		.sink18_ready         (rsp_demux_027_src0_ready),                //    sink18.ready
		.sink18_valid         (rsp_demux_027_src0_valid),                //          .valid
		.sink18_channel       (rsp_demux_027_src0_channel),              //          .channel
		.sink18_data          (rsp_demux_027_src0_data),                 //          .data
		.sink18_startofpacket (rsp_demux_027_src0_startofpacket),        //          .startofpacket
		.sink18_endofpacket   (rsp_demux_027_src0_endofpacket)           //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_mux_002 rsp_mux_003 (
		.clk                  (System_PLL_sys_clk_clk),                           //       clk.clk
		.reset                (Nios2_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_003_src_ready),                            //       src.ready
		.src_valid            (rsp_mux_003_src_valid),                            //          .valid
		.src_data             (rsp_mux_003_src_data),                             //          .data
		.src_channel          (rsp_mux_003_src_channel),                          //          .channel
		.src_startofpacket    (rsp_mux_003_src_startofpacket),                    //          .startofpacket
		.src_endofpacket      (rsp_mux_003_src_endofpacket),                      //          .endofpacket
		.sink0_ready          (rsp_demux_src3_ready),                             //     sink0.ready
		.sink0_valid          (rsp_demux_src3_valid),                             //          .valid
		.sink0_channel        (rsp_demux_src3_channel),                           //          .channel
		.sink0_data           (rsp_demux_src3_data),                              //          .data
		.sink0_startofpacket  (rsp_demux_src3_startofpacket),                     //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src3_endofpacket),                       //          .endofpacket
		.sink1_ready          (rsp_demux_001_src3_ready),                         //     sink1.ready
		.sink1_valid          (rsp_demux_001_src3_valid),                         //          .valid
		.sink1_channel        (rsp_demux_001_src3_channel),                       //          .channel
		.sink1_data           (rsp_demux_001_src3_data),                          //          .data
		.sink1_startofpacket  (rsp_demux_001_src3_startofpacket),                 //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src3_endofpacket),                   //          .endofpacket
		.sink2_ready          (rsp_demux_002_src3_ready),                         //     sink2.ready
		.sink2_valid          (rsp_demux_002_src3_valid),                         //          .valid
		.sink2_channel        (rsp_demux_002_src3_channel),                       //          .channel
		.sink2_data           (rsp_demux_002_src3_data),                          //          .data
		.sink2_startofpacket  (rsp_demux_002_src3_startofpacket),                 //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src3_endofpacket),                   //          .endofpacket
		.sink3_ready          (rsp_demux_003_src3_ready),                         //     sink3.ready
		.sink3_valid          (rsp_demux_003_src3_valid),                         //          .valid
		.sink3_channel        (rsp_demux_003_src3_channel),                       //          .channel
		.sink3_data           (rsp_demux_003_src3_data),                          //          .data
		.sink3_startofpacket  (rsp_demux_003_src3_startofpacket),                 //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src3_endofpacket),                   //          .endofpacket
		.sink4_ready          (rsp_demux_004_src3_ready),                         //     sink4.ready
		.sink4_valid          (rsp_demux_004_src3_valid),                         //          .valid
		.sink4_channel        (rsp_demux_004_src3_channel),                       //          .channel
		.sink4_data           (rsp_demux_004_src3_data),                          //          .data
		.sink4_startofpacket  (rsp_demux_004_src3_startofpacket),                 //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src3_endofpacket),                   //          .endofpacket
		.sink5_ready          (rsp_demux_005_src3_ready),                         //     sink5.ready
		.sink5_valid          (rsp_demux_005_src3_valid),                         //          .valid
		.sink5_channel        (rsp_demux_005_src3_channel),                       //          .channel
		.sink5_data           (rsp_demux_005_src3_data),                          //          .data
		.sink5_startofpacket  (rsp_demux_005_src3_startofpacket),                 //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src3_endofpacket),                   //          .endofpacket
		.sink6_ready          (rsp_demux_006_src3_ready),                         //     sink6.ready
		.sink6_valid          (rsp_demux_006_src3_valid),                         //          .valid
		.sink6_channel        (rsp_demux_006_src3_channel),                       //          .channel
		.sink6_data           (rsp_demux_006_src3_data),                          //          .data
		.sink6_startofpacket  (rsp_demux_006_src3_startofpacket),                 //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src3_endofpacket),                   //          .endofpacket
		.sink7_ready          (rsp_demux_007_src3_ready),                         //     sink7.ready
		.sink7_valid          (rsp_demux_007_src3_valid),                         //          .valid
		.sink7_channel        (rsp_demux_007_src3_channel),                       //          .channel
		.sink7_data           (rsp_demux_007_src3_data),                          //          .data
		.sink7_startofpacket  (rsp_demux_007_src3_startofpacket),                 //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src3_endofpacket),                   //          .endofpacket
		.sink8_ready          (rsp_demux_008_src3_ready),                         //     sink8.ready
		.sink8_valid          (rsp_demux_008_src3_valid),                         //          .valid
		.sink8_channel        (rsp_demux_008_src3_channel),                       //          .channel
		.sink8_data           (rsp_demux_008_src3_data),                          //          .data
		.sink8_startofpacket  (rsp_demux_008_src3_startofpacket),                 //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src3_endofpacket),                   //          .endofpacket
		.sink9_ready          (rsp_demux_014_src1_ready),                         //     sink9.ready
		.sink9_valid          (rsp_demux_014_src1_valid),                         //          .valid
		.sink9_channel        (rsp_demux_014_src1_channel),                       //          .channel
		.sink9_data           (rsp_demux_014_src1_data),                          //          .data
		.sink9_startofpacket  (rsp_demux_014_src1_startofpacket),                 //          .startofpacket
		.sink9_endofpacket    (rsp_demux_014_src1_endofpacket),                   //          .endofpacket
		.sink10_ready         (rsp_demux_015_src1_ready),                         //    sink10.ready
		.sink10_valid         (rsp_demux_015_src1_valid),                         //          .valid
		.sink10_channel       (rsp_demux_015_src1_channel),                       //          .channel
		.sink10_data          (rsp_demux_015_src1_data),                          //          .data
		.sink10_startofpacket (rsp_demux_015_src1_startofpacket),                 //          .startofpacket
		.sink10_endofpacket   (rsp_demux_015_src1_endofpacket),                   //          .endofpacket
		.sink11_ready         (rsp_demux_016_src1_ready),                         //    sink11.ready
		.sink11_valid         (rsp_demux_016_src1_valid),                         //          .valid
		.sink11_channel       (rsp_demux_016_src1_channel),                       //          .channel
		.sink11_data          (rsp_demux_016_src1_data),                          //          .data
		.sink11_startofpacket (rsp_demux_016_src1_startofpacket),                 //          .startofpacket
		.sink11_endofpacket   (rsp_demux_016_src1_endofpacket),                   //          .endofpacket
		.sink12_ready         (rsp_demux_017_src1_ready),                         //    sink12.ready
		.sink12_valid         (rsp_demux_017_src1_valid),                         //          .valid
		.sink12_channel       (rsp_demux_017_src1_channel),                       //          .channel
		.sink12_data          (rsp_demux_017_src1_data),                          //          .data
		.sink12_startofpacket (rsp_demux_017_src1_startofpacket),                 //          .startofpacket
		.sink12_endofpacket   (rsp_demux_017_src1_endofpacket),                   //          .endofpacket
		.sink13_ready         (rsp_demux_018_src1_ready),                         //    sink13.ready
		.sink13_valid         (rsp_demux_018_src1_valid),                         //          .valid
		.sink13_channel       (rsp_demux_018_src1_channel),                       //          .channel
		.sink13_data          (rsp_demux_018_src1_data),                          //          .data
		.sink13_startofpacket (rsp_demux_018_src1_startofpacket),                 //          .startofpacket
		.sink13_endofpacket   (rsp_demux_018_src1_endofpacket),                   //          .endofpacket
		.sink14_ready         (rsp_demux_019_src1_ready),                         //    sink14.ready
		.sink14_valid         (rsp_demux_019_src1_valid),                         //          .valid
		.sink14_channel       (rsp_demux_019_src1_channel),                       //          .channel
		.sink14_data          (rsp_demux_019_src1_data),                          //          .data
		.sink14_startofpacket (rsp_demux_019_src1_startofpacket),                 //          .startofpacket
		.sink14_endofpacket   (rsp_demux_019_src1_endofpacket),                   //          .endofpacket
		.sink15_ready         (rsp_demux_020_src0_ready),                         //    sink15.ready
		.sink15_valid         (rsp_demux_020_src0_valid),                         //          .valid
		.sink15_channel       (rsp_demux_020_src0_channel),                       //          .channel
		.sink15_data          (rsp_demux_020_src0_data),                          //          .data
		.sink15_startofpacket (rsp_demux_020_src0_startofpacket),                 //          .startofpacket
		.sink15_endofpacket   (rsp_demux_020_src0_endofpacket),                   //          .endofpacket
		.sink16_ready         (rsp_demux_021_src0_ready),                         //    sink16.ready
		.sink16_valid         (rsp_demux_021_src0_valid),                         //          .valid
		.sink16_channel       (rsp_demux_021_src0_channel),                       //          .channel
		.sink16_data          (rsp_demux_021_src0_data),                          //          .data
		.sink16_startofpacket (rsp_demux_021_src0_startofpacket),                 //          .startofpacket
		.sink16_endofpacket   (rsp_demux_021_src0_endofpacket),                   //          .endofpacket
		.sink17_ready         (rsp_demux_022_src0_ready),                         //    sink17.ready
		.sink17_valid         (rsp_demux_022_src0_valid),                         //          .valid
		.sink17_channel       (rsp_demux_022_src0_channel),                       //          .channel
		.sink17_data          (rsp_demux_022_src0_data),                          //          .data
		.sink17_startofpacket (rsp_demux_022_src0_startofpacket),                 //          .startofpacket
		.sink17_endofpacket   (rsp_demux_022_src0_endofpacket),                   //          .endofpacket
		.sink18_ready         (rsp_demux_023_src0_ready),                         //    sink18.ready
		.sink18_valid         (rsp_demux_023_src0_valid),                         //          .valid
		.sink18_channel       (rsp_demux_023_src0_channel),                       //          .channel
		.sink18_data          (rsp_demux_023_src0_data),                          //          .data
		.sink18_startofpacket (rsp_demux_023_src0_startofpacket),                 //          .startofpacket
		.sink18_endofpacket   (rsp_demux_023_src0_endofpacket)                    //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_mux_004 rsp_mux_004 (
		.clk                  (System_PLL_sys_clk_clk),                //       clk.clk
		.reset                (ADC_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_004_src_ready),                 //       src.ready
		.src_valid            (rsp_mux_004_src_valid),                 //          .valid
		.src_data             (rsp_mux_004_src_data),                  //          .data
		.src_channel          (rsp_mux_004_src_channel),               //          .channel
		.src_startofpacket    (rsp_mux_004_src_startofpacket),         //          .startofpacket
		.src_endofpacket      (rsp_mux_004_src_endofpacket),           //          .endofpacket
		.sink0_ready          (rsp_demux_src4_ready),                  //     sink0.ready
		.sink0_valid          (rsp_demux_src4_valid),                  //          .valid
		.sink0_channel        (rsp_demux_src4_channel),                //          .channel
		.sink0_data           (rsp_demux_src4_data),                   //          .data
		.sink0_startofpacket  (rsp_demux_src4_startofpacket),          //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src4_endofpacket),            //          .endofpacket
		.sink1_ready          (rsp_demux_001_src4_ready),              //     sink1.ready
		.sink1_valid          (rsp_demux_001_src4_valid),              //          .valid
		.sink1_channel        (rsp_demux_001_src4_channel),            //          .channel
		.sink1_data           (rsp_demux_001_src4_data),               //          .data
		.sink1_startofpacket  (rsp_demux_001_src4_startofpacket),      //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src4_endofpacket),        //          .endofpacket
		.sink2_ready          (rsp_demux_002_src4_ready),              //     sink2.ready
		.sink2_valid          (rsp_demux_002_src4_valid),              //          .valid
		.sink2_channel        (rsp_demux_002_src4_channel),            //          .channel
		.sink2_data           (rsp_demux_002_src4_data),               //          .data
		.sink2_startofpacket  (rsp_demux_002_src4_startofpacket),      //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src4_endofpacket),        //          .endofpacket
		.sink3_ready          (rsp_demux_003_src4_ready),              //     sink3.ready
		.sink3_valid          (rsp_demux_003_src4_valid),              //          .valid
		.sink3_channel        (rsp_demux_003_src4_channel),            //          .channel
		.sink3_data           (rsp_demux_003_src4_data),               //          .data
		.sink3_startofpacket  (rsp_demux_003_src4_startofpacket),      //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src4_endofpacket),        //          .endofpacket
		.sink4_ready          (rsp_demux_004_src4_ready),              //     sink4.ready
		.sink4_valid          (rsp_demux_004_src4_valid),              //          .valid
		.sink4_channel        (rsp_demux_004_src4_channel),            //          .channel
		.sink4_data           (rsp_demux_004_src4_data),               //          .data
		.sink4_startofpacket  (rsp_demux_004_src4_startofpacket),      //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src4_endofpacket),        //          .endofpacket
		.sink5_ready          (rsp_demux_005_src4_ready),              //     sink5.ready
		.sink5_valid          (rsp_demux_005_src4_valid),              //          .valid
		.sink5_channel        (rsp_demux_005_src4_channel),            //          .channel
		.sink5_data           (rsp_demux_005_src4_data),               //          .data
		.sink5_startofpacket  (rsp_demux_005_src4_startofpacket),      //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src4_endofpacket),        //          .endofpacket
		.sink6_ready          (rsp_demux_006_src4_ready),              //     sink6.ready
		.sink6_valid          (rsp_demux_006_src4_valid),              //          .valid
		.sink6_channel        (rsp_demux_006_src4_channel),            //          .channel
		.sink6_data           (rsp_demux_006_src4_data),               //          .data
		.sink6_startofpacket  (rsp_demux_006_src4_startofpacket),      //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src4_endofpacket),        //          .endofpacket
		.sink7_ready          (rsp_demux_007_src4_ready),              //     sink7.ready
		.sink7_valid          (rsp_demux_007_src4_valid),              //          .valid
		.sink7_channel        (rsp_demux_007_src4_channel),            //          .channel
		.sink7_data           (rsp_demux_007_src4_data),               //          .data
		.sink7_startofpacket  (rsp_demux_007_src4_startofpacket),      //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src4_endofpacket),        //          .endofpacket
		.sink8_ready          (rsp_demux_008_src4_ready),              //     sink8.ready
		.sink8_valid          (rsp_demux_008_src4_valid),              //          .valid
		.sink8_channel        (rsp_demux_008_src4_channel),            //          .channel
		.sink8_data           (rsp_demux_008_src4_data),               //          .data
		.sink8_startofpacket  (rsp_demux_008_src4_startofpacket),      //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src4_endofpacket),        //          .endofpacket
		.sink9_ready          (rsp_demux_009_src3_ready),              //     sink9.ready
		.sink9_valid          (rsp_demux_009_src3_valid),              //          .valid
		.sink9_channel        (rsp_demux_009_src3_channel),            //          .channel
		.sink9_data           (rsp_demux_009_src3_data),               //          .data
		.sink9_startofpacket  (rsp_demux_009_src3_startofpacket),      //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src3_endofpacket),        //          .endofpacket
		.sink10_ready         (rsp_demux_010_src3_ready),              //    sink10.ready
		.sink10_valid         (rsp_demux_010_src3_valid),              //          .valid
		.sink10_channel       (rsp_demux_010_src3_channel),            //          .channel
		.sink10_data          (rsp_demux_010_src3_data),               //          .data
		.sink10_startofpacket (rsp_demux_010_src3_startofpacket),      //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src3_endofpacket),        //          .endofpacket
		.sink11_ready         (rsp_demux_013_src1_ready),              //    sink11.ready
		.sink11_valid         (rsp_demux_013_src1_valid),              //          .valid
		.sink11_channel       (rsp_demux_013_src1_channel),            //          .channel
		.sink11_data          (rsp_demux_013_src1_data),               //          .data
		.sink11_startofpacket (rsp_demux_013_src1_startofpacket),      //          .startofpacket
		.sink11_endofpacket   (rsp_demux_013_src1_endofpacket),        //          .endofpacket
		.sink12_ready         (rsp_demux_014_src2_ready),              //    sink12.ready
		.sink12_valid         (rsp_demux_014_src2_valid),              //          .valid
		.sink12_channel       (rsp_demux_014_src2_channel),            //          .channel
		.sink12_data          (rsp_demux_014_src2_data),               //          .data
		.sink12_startofpacket (rsp_demux_014_src2_startofpacket),      //          .startofpacket
		.sink12_endofpacket   (rsp_demux_014_src2_endofpacket),        //          .endofpacket
		.sink13_ready         (rsp_demux_015_src2_ready),              //    sink13.ready
		.sink13_valid         (rsp_demux_015_src2_valid),              //          .valid
		.sink13_channel       (rsp_demux_015_src2_channel),            //          .channel
		.sink13_data          (rsp_demux_015_src2_data),               //          .data
		.sink13_startofpacket (rsp_demux_015_src2_startofpacket),      //          .startofpacket
		.sink13_endofpacket   (rsp_demux_015_src2_endofpacket),        //          .endofpacket
		.sink14_ready         (rsp_demux_016_src2_ready),              //    sink14.ready
		.sink14_valid         (rsp_demux_016_src2_valid),              //          .valid
		.sink14_channel       (rsp_demux_016_src2_channel),            //          .channel
		.sink14_data          (rsp_demux_016_src2_data),               //          .data
		.sink14_startofpacket (rsp_demux_016_src2_startofpacket),      //          .startofpacket
		.sink14_endofpacket   (rsp_demux_016_src2_endofpacket),        //          .endofpacket
		.sink15_ready         (rsp_demux_017_src2_ready),              //    sink15.ready
		.sink15_valid         (rsp_demux_017_src2_valid),              //          .valid
		.sink15_channel       (rsp_demux_017_src2_channel),            //          .channel
		.sink15_data          (rsp_demux_017_src2_data),               //          .data
		.sink15_startofpacket (rsp_demux_017_src2_startofpacket),      //          .startofpacket
		.sink15_endofpacket   (rsp_demux_017_src2_endofpacket),        //          .endofpacket
		.sink16_ready         (rsp_demux_018_src2_ready),              //    sink16.ready
		.sink16_valid         (rsp_demux_018_src2_valid),              //          .valid
		.sink16_channel       (rsp_demux_018_src2_channel),            //          .channel
		.sink16_data          (rsp_demux_018_src2_data),               //          .data
		.sink16_startofpacket (rsp_demux_018_src2_startofpacket),      //          .startofpacket
		.sink16_endofpacket   (rsp_demux_018_src2_endofpacket),        //          .endofpacket
		.sink17_ready         (rsp_demux_019_src2_ready),              //    sink17.ready
		.sink17_valid         (rsp_demux_019_src2_valid),              //          .valid
		.sink17_channel       (rsp_demux_019_src2_channel),            //          .channel
		.sink17_data          (rsp_demux_019_src2_data),               //          .data
		.sink17_startofpacket (rsp_demux_019_src2_startofpacket),      //          .startofpacket
		.sink17_endofpacket   (rsp_demux_019_src2_endofpacket)         //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_mux_005 rsp_mux_005 (
		.clk                 (System_PLL_sys_clk_clk),                           //       clk.clk
		.reset               (Nios2_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_005_src_ready),                            //       src.ready
		.src_valid           (rsp_mux_005_src_valid),                            //          .valid
		.src_data            (rsp_mux_005_src_data),                             //          .data
		.src_channel         (rsp_mux_005_src_channel),                          //          .channel
		.src_startofpacket   (rsp_mux_005_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (rsp_mux_005_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (rsp_demux_021_src1_ready),                         //     sink0.ready
		.sink0_valid         (rsp_demux_021_src1_valid),                         //          .valid
		.sink0_channel       (rsp_demux_021_src1_channel),                       //          .channel
		.sink0_data          (rsp_demux_021_src1_data),                          //          .data
		.sink0_startofpacket (rsp_demux_021_src1_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (rsp_demux_021_src1_endofpacket),                   //          .endofpacket
		.sink1_ready         (rsp_demux_024_src0_ready),                         //     sink1.ready
		.sink1_valid         (rsp_demux_024_src0_valid),                         //          .valid
		.sink1_channel       (rsp_demux_024_src0_channel),                       //          .channel
		.sink1_data          (rsp_demux_024_src0_data),                          //          .data
		.sink1_startofpacket (rsp_demux_024_src0_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (rsp_demux_024_src0_endofpacket),                   //          .endofpacket
		.sink2_ready         (rsp_demux_025_src0_ready),                         //     sink2.ready
		.sink2_valid         (rsp_demux_025_src0_valid),                         //          .valid
		.sink2_channel       (rsp_demux_025_src0_channel),                       //          .channel
		.sink2_data          (rsp_demux_025_src0_data),                          //          .data
		.sink2_startofpacket (rsp_demux_025_src0_startofpacket),                 //          .startofpacket
		.sink2_endofpacket   (rsp_demux_025_src0_endofpacket),                   //          .endofpacket
		.sink3_ready         (rsp_demux_026_src0_ready),                         //     sink3.ready
		.sink3_valid         (rsp_demux_026_src0_valid),                         //          .valid
		.sink3_channel       (rsp_demux_026_src0_channel),                       //          .channel
		.sink3_data          (rsp_demux_026_src0_data),                          //          .data
		.sink3_startofpacket (rsp_demux_026_src0_startofpacket),                 //          .startofpacket
		.sink3_endofpacket   (rsp_demux_026_src0_endofpacket)                    //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_mux_005 rsp_mux_006 (
		.clk                 (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset               (Nios2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_006_src_ready),                   //       src.ready
		.src_valid           (rsp_mux_006_src_valid),                   //          .valid
		.src_data            (rsp_mux_006_src_data),                    //          .data
		.src_channel         (rsp_mux_006_src_channel),                 //          .channel
		.src_startofpacket   (rsp_mux_006_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (rsp_mux_006_src_endofpacket),             //          .endofpacket
		.sink0_ready         (rsp_demux_024_src1_ready),                //     sink0.ready
		.sink0_valid         (rsp_demux_024_src1_valid),                //          .valid
		.sink0_channel       (rsp_demux_024_src1_channel),              //          .channel
		.sink0_data          (rsp_demux_024_src1_data),                 //          .data
		.sink0_startofpacket (rsp_demux_024_src1_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (rsp_demux_024_src1_endofpacket),          //          .endofpacket
		.sink1_ready         (rsp_demux_025_src1_ready),                //     sink1.ready
		.sink1_valid         (rsp_demux_025_src1_valid),                //          .valid
		.sink1_channel       (rsp_demux_025_src1_channel),              //          .channel
		.sink1_data          (rsp_demux_025_src1_data),                 //          .data
		.sink1_startofpacket (rsp_demux_025_src1_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (rsp_demux_025_src1_endofpacket),          //          .endofpacket
		.sink2_ready         (rsp_demux_026_src1_ready),                //     sink2.ready
		.sink2_valid         (rsp_demux_026_src1_valid),                //          .valid
		.sink2_channel       (rsp_demux_026_src1_channel),              //          .channel
		.sink2_data          (rsp_demux_026_src1_data),                 //          .data
		.sink2_startofpacket (rsp_demux_026_src1_startofpacket),        //          .startofpacket
		.sink2_endofpacket   (rsp_demux_026_src1_endofpacket),          //          .endofpacket
		.sink3_ready         (rsp_demux_027_src1_ready),                //     sink3.ready
		.sink3_valid         (rsp_demux_027_src1_valid),                //          .valid
		.sink3_channel       (rsp_demux_027_src1_channel),              //          .channel
		.sink3_data          (rsp_demux_027_src1_data),                 //          .data
		.sink3_startofpacket (rsp_demux_027_src1_startofpacket),        //          .startofpacket
		.sink3_endofpacket   (rsp_demux_027_src1_endofpacket)           //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_mux_007 rsp_mux_007 (
		.clk                 (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset               (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_007_src_ready),                                                    //       src.ready
		.src_valid           (rsp_mux_007_src_valid),                                                    //          .valid
		.src_data            (rsp_mux_007_src_data),                                                     //          .data
		.src_channel         (rsp_mux_007_src_channel),                                                  //          .channel
		.src_startofpacket   (rsp_mux_007_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket     (rsp_mux_007_src_endofpacket),                                              //          .endofpacket
		.sink0_ready         (rsp_demux_014_src3_ready),                                                 //     sink0.ready
		.sink0_valid         (rsp_demux_014_src3_valid),                                                 //          .valid
		.sink0_channel       (rsp_demux_014_src3_channel),                                               //          .channel
		.sink0_data          (rsp_demux_014_src3_data),                                                  //          .data
		.sink0_startofpacket (rsp_demux_014_src3_startofpacket),                                         //          .startofpacket
		.sink0_endofpacket   (rsp_demux_014_src3_endofpacket),                                           //          .endofpacket
		.sink1_ready         (rsp_demux_015_src3_ready),                                                 //     sink1.ready
		.sink1_valid         (rsp_demux_015_src3_valid),                                                 //          .valid
		.sink1_channel       (rsp_demux_015_src3_channel),                                               //          .channel
		.sink1_data          (rsp_demux_015_src3_data),                                                  //          .data
		.sink1_startofpacket (rsp_demux_015_src3_startofpacket),                                         //          .startofpacket
		.sink1_endofpacket   (rsp_demux_015_src3_endofpacket),                                           //          .endofpacket
		.sink2_ready         (rsp_demux_016_src3_ready),                                                 //     sink2.ready
		.sink2_valid         (rsp_demux_016_src3_valid),                                                 //          .valid
		.sink2_channel       (rsp_demux_016_src3_channel),                                               //          .channel
		.sink2_data          (rsp_demux_016_src3_data),                                                  //          .data
		.sink2_startofpacket (rsp_demux_016_src3_startofpacket),                                         //          .startofpacket
		.sink2_endofpacket   (rsp_demux_016_src3_endofpacket)                                            //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_mux_007 rsp_mux_008 (
		.clk                 (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset               (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_008_src_ready),                                                    //       src.ready
		.src_valid           (rsp_mux_008_src_valid),                                                    //          .valid
		.src_data            (rsp_mux_008_src_data),                                                     //          .data
		.src_channel         (rsp_mux_008_src_channel),                                                  //          .channel
		.src_startofpacket   (rsp_mux_008_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket     (rsp_mux_008_src_endofpacket),                                              //          .endofpacket
		.sink0_ready         (rsp_demux_014_src4_ready),                                                 //     sink0.ready
		.sink0_valid         (rsp_demux_014_src4_valid),                                                 //          .valid
		.sink0_channel       (rsp_demux_014_src4_channel),                                               //          .channel
		.sink0_data          (rsp_demux_014_src4_data),                                                  //          .data
		.sink0_startofpacket (rsp_demux_014_src4_startofpacket),                                         //          .startofpacket
		.sink0_endofpacket   (rsp_demux_014_src4_endofpacket),                                           //          .endofpacket
		.sink1_ready         (rsp_demux_015_src4_ready),                                                 //     sink1.ready
		.sink1_valid         (rsp_demux_015_src4_valid),                                                 //          .valid
		.sink1_channel       (rsp_demux_015_src4_channel),                                               //          .channel
		.sink1_data          (rsp_demux_015_src4_data),                                                  //          .data
		.sink1_startofpacket (rsp_demux_015_src4_startofpacket),                                         //          .startofpacket
		.sink1_endofpacket   (rsp_demux_015_src4_endofpacket),                                           //          .endofpacket
		.sink2_ready         (rsp_demux_016_src4_ready),                                                 //     sink2.ready
		.sink2_valid         (rsp_demux_016_src4_valid),                                                 //          .valid
		.sink2_channel       (rsp_demux_016_src4_channel),                                               //          .channel
		.sink2_data          (rsp_demux_016_src4_data),                                                  //          .data
		.sink2_startofpacket (rsp_demux_016_src4_startofpacket),                                         //          .startofpacket
		.sink2_endofpacket   (rsp_demux_016_src4_endofpacket)                                            //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (117),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (125),
		.IN_PKT_BURSTWRAP_L            (118),
		.IN_PKT_BURST_SIZE_H           (128),
		.IN_PKT_BURST_SIZE_L           (126),
		.IN_PKT_RESPONSE_STATUS_H      (165),
		.IN_PKT_RESPONSE_STATUS_L      (164),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (130),
		.IN_PKT_BURST_TYPE_L           (129),
		.IN_PKT_ORI_BURST_SIZE_L       (166),
		.IN_PKT_ORI_BURST_SIZE_H       (168),
		.IN_ST_DATA_W                  (169),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (81),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (92),
		.OUT_PKT_BURST_SIZE_L          (90),
		.OUT_PKT_RESPONSE_STATUS_H     (129),
		.OUT_PKT_RESPONSE_STATUS_L     (128),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (94),
		.OUT_PKT_BURST_TYPE_L          (93),
		.OUT_PKT_ORI_BURST_SIZE_L      (130),
		.OUT_PKT_ORI_BURST_SIZE_H      (132),
		.OUT_ST_DATA_W                 (133),
		.ST_CHANNEL_W                  (28),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) arm_a9_hps_h2f_axi_master_wr_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset                (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_valid),                       //      sink.valid
		.in_channel           (arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_channel),                     //          .channel
		.in_startofpacket     (arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_startofpacket),               //          .startofpacket
		.in_endofpacket       (arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_endofpacket),                 //          .endofpacket
		.in_ready             (arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_ready),                       //          .ready
		.in_data              (arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_data),                        //          .data
		.out_endofpacket      (arm_a9_hps_h2f_axi_master_wr_cmd_width_adapter_src_endofpacket),           //       src.endofpacket
		.out_data             (arm_a9_hps_h2f_axi_master_wr_cmd_width_adapter_src_data),                  //          .data
		.out_channel          (arm_a9_hps_h2f_axi_master_wr_cmd_width_adapter_src_channel),               //          .channel
		.out_valid            (arm_a9_hps_h2f_axi_master_wr_cmd_width_adapter_src_valid),                 //          .valid
		.out_ready            (arm_a9_hps_h2f_axi_master_wr_cmd_width_adapter_src_ready),                 //          .ready
		.out_startofpacket    (arm_a9_hps_h2f_axi_master_wr_cmd_width_adapter_src_startofpacket),         //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (81),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (89),
		.IN_PKT_BURSTWRAP_L            (82),
		.IN_PKT_BURST_SIZE_H           (92),
		.IN_PKT_BURST_SIZE_L           (90),
		.IN_PKT_RESPONSE_STATUS_H      (129),
		.IN_PKT_RESPONSE_STATUS_L      (128),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (94),
		.IN_PKT_BURST_TYPE_L           (93),
		.IN_PKT_ORI_BURST_SIZE_L       (130),
		.IN_PKT_ORI_BURST_SIZE_H       (132),
		.IN_ST_DATA_W                  (133),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (117),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (128),
		.OUT_PKT_BURST_SIZE_L          (126),
		.OUT_PKT_RESPONSE_STATUS_H     (165),
		.OUT_PKT_RESPONSE_STATUS_L     (164),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (130),
		.OUT_PKT_BURST_TYPE_L          (129),
		.OUT_PKT_ORI_BURST_SIZE_L      (166),
		.OUT_PKT_ORI_BURST_SIZE_H      (168),
		.OUT_ST_DATA_W                 (169),
		.ST_CHANNEL_W                  (28),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset                (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (rsp_mux_007_src_valid),                                                    //      sink.valid
		.in_channel           (rsp_mux_007_src_channel),                                                  //          .channel
		.in_startofpacket     (rsp_mux_007_src_startofpacket),                                            //          .startofpacket
		.in_endofpacket       (rsp_mux_007_src_endofpacket),                                              //          .endofpacket
		.in_ready             (rsp_mux_007_src_ready),                                                    //          .ready
		.in_data              (rsp_mux_007_src_data),                                                     //          .data
		.out_endofpacket      (arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket),           //       src.endofpacket
		.out_data             (arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_data),                  //          .data
		.out_channel          (arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_channel),               //          .channel
		.out_valid            (arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_valid),                 //          .valid
		.out_ready            (arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_ready),                 //          .ready
		.out_startofpacket    (arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket),         //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (117),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (125),
		.IN_PKT_BURSTWRAP_L            (118),
		.IN_PKT_BURST_SIZE_H           (128),
		.IN_PKT_BURST_SIZE_L           (126),
		.IN_PKT_RESPONSE_STATUS_H      (165),
		.IN_PKT_RESPONSE_STATUS_L      (164),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (130),
		.IN_PKT_BURST_TYPE_L           (129),
		.IN_PKT_ORI_BURST_SIZE_L       (166),
		.IN_PKT_ORI_BURST_SIZE_H       (168),
		.IN_ST_DATA_W                  (169),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (81),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (92),
		.OUT_PKT_BURST_SIZE_L          (90),
		.OUT_PKT_RESPONSE_STATUS_H     (129),
		.OUT_PKT_RESPONSE_STATUS_L     (128),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (94),
		.OUT_PKT_BURST_TYPE_L          (93),
		.OUT_PKT_ORI_BURST_SIZE_L      (130),
		.OUT_PKT_ORI_BURST_SIZE_H      (132),
		.OUT_ST_DATA_W                 (133),
		.ST_CHANNEL_W                  (28),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) arm_a9_hps_h2f_axi_master_rd_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset                (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_valid),                       //      sink.valid
		.in_channel           (arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_channel),                     //          .channel
		.in_startofpacket     (arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_startofpacket),               //          .startofpacket
		.in_endofpacket       (arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_endofpacket),                 //          .endofpacket
		.in_ready             (arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_ready),                       //          .ready
		.in_data              (arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_data),                        //          .data
		.out_endofpacket      (arm_a9_hps_h2f_axi_master_rd_cmd_width_adapter_src_endofpacket),           //       src.endofpacket
		.out_data             (arm_a9_hps_h2f_axi_master_rd_cmd_width_adapter_src_data),                  //          .data
		.out_channel          (arm_a9_hps_h2f_axi_master_rd_cmd_width_adapter_src_channel),               //          .channel
		.out_valid            (arm_a9_hps_h2f_axi_master_rd_cmd_width_adapter_src_valid),                 //          .valid
		.out_ready            (arm_a9_hps_h2f_axi_master_rd_cmd_width_adapter_src_ready),                 //          .ready
		.out_startofpacket    (arm_a9_hps_h2f_axi_master_rd_cmd_width_adapter_src_startofpacket),         //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (81),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (89),
		.IN_PKT_BURSTWRAP_L            (82),
		.IN_PKT_BURST_SIZE_H           (92),
		.IN_PKT_BURST_SIZE_L           (90),
		.IN_PKT_RESPONSE_STATUS_H      (129),
		.IN_PKT_RESPONSE_STATUS_L      (128),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (94),
		.IN_PKT_BURST_TYPE_L           (93),
		.IN_PKT_ORI_BURST_SIZE_L       (130),
		.IN_PKT_ORI_BURST_SIZE_H       (132),
		.IN_ST_DATA_W                  (133),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (117),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (128),
		.OUT_PKT_BURST_SIZE_L          (126),
		.OUT_PKT_RESPONSE_STATUS_H     (165),
		.OUT_PKT_RESPONSE_STATUS_L     (164),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (130),
		.OUT_PKT_BURST_TYPE_L          (129),
		.OUT_PKT_ORI_BURST_SIZE_L      (166),
		.OUT_PKT_ORI_BURST_SIZE_H      (168),
		.OUT_ST_DATA_W                 (169),
		.ST_CHANNEL_W                  (28),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset                (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (rsp_mux_008_src_valid),                                                    //      sink.valid
		.in_channel           (rsp_mux_008_src_channel),                                                  //          .channel
		.in_startofpacket     (rsp_mux_008_src_startofpacket),                                            //          .startofpacket
		.in_endofpacket       (rsp_mux_008_src_endofpacket),                                              //          .endofpacket
		.in_ready             (rsp_mux_008_src_ready),                                                    //          .ready
		.in_data              (rsp_mux_008_src_data),                                                     //          .data
		.out_endofpacket      (arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket),           //       src.endofpacket
		.out_data             (arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_data),                  //          .data
		.out_channel          (arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_channel),               //          .channel
		.out_valid            (arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_valid),                 //          .valid
		.out_ready            (arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_ready),                 //          .ready
		.out_startofpacket    (arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket),         //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                   // in_clk_0.clk
		.in_rst_0_reset (ADC_reset_reset_bridge_in_reset_reset),    // in_rst_0.reset
		.in_0_data      (adc_adc_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (adc_adc_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (adc_adc_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)             //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                         // in_clk_0.clk
		.in_rst_0_reset (ADC_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (sysid_control_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (sysid_control_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (sysid_control_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)               //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                // in_clk_0.clk
		.in_rst_0_reset (ADC_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (leds_s1_agent_rdata_fifo_out_data),     //     in_0.data
		.in_0_valid     (leds_s1_agent_rdata_fifo_out_valid),    //         .valid
		.in_0_ready     (leds_s1_agent_rdata_fifo_out_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),      //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),     //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),     //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)      //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                        // in_clk_0.clk
		.in_rst_0_reset (ADC_reset_reset_bridge_in_reset_reset),         // in_rst_0.reset
		.in_0_data      (slider_switches_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (slider_switches_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (slider_switches_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)              //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                    // in_clk_0.clk
		.in_rst_0_reset (ADC_reset_reset_bridge_in_reset_reset),     // in_rst_0.reset
		.in_0_data      (pushbuttons_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (pushbuttons_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (pushbuttons_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),          //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),         //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),         //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)          //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                      // in_clk_0.clk
		.in_rst_0_reset (ADC_reset_reset_bridge_in_reset_reset),       // in_rst_0.reset
		.in_0_data      (expansion_jp1_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (expansion_jp1_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (expansion_jp1_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),            //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),           //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),           //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)            //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                      // in_clk_0.clk
		.in_rst_0_reset (ADC_reset_reset_bridge_in_reset_reset),       // in_rst_0.reset
		.in_0_data      (expansion_jp7_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (expansion_jp7_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (expansion_jp7_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),            //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),           //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),           //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)            //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                     // in_clk_0.clk
		.in_rst_0_reset (ADC_reset_reset_bridge_in_reset_reset),      // in_rst_0.reset
		.in_0_data      (arduino_gpio_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (arduino_gpio_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (arduino_gpio_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),           //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),          //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),          //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)           //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                        // in_clk_0.clk
		.in_rst_0_reset (ADC_reset_reset_bridge_in_reset_reset),         // in_rst_0.reset
		.in_0_data      (arduino_reset_n_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (arduino_reset_n_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (arduino_reset_n_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)              //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                       // in_clk_0.clk
		.in_rst_0_reset (ADC_reset_reset_bridge_in_reset_reset),        // in_rst_0.reset
		.in_0_data      (interval_timer_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (interval_timer_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (interval_timer_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)             //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                         // in_clk_0.clk
		.in_rst_0_reset (ADC_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (interval_timer_2_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (interval_timer_2_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (interval_timer_2_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)               //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (ADC_reset_reset_bridge_in_reset_reset),                            // in_rst_0.reset
		.in_0_data      (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),                                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),                                //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),                                //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)                                 //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (ADC_reset_reset_bridge_in_reset_reset),                            // in_rst_0.reset
		.in_0_data      (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),                                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),                                //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),                                //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)                                 //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_013 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (ADC_reset_reset_bridge_in_reset_reset),                  // in_rst_0.reset
		.in_0_data      (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_013_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_013_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_013_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_013_out_0_error)                       //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_014 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                   // in_clk_0.clk
		.in_rst_0_reset (ADC_reset_reset_bridge_in_reset_reset),    // in_rst_0.reset
		.in_0_data      (nios2_sram_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (nios2_sram_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (nios2_sram_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_014_out_0_data),         //    out_0.data
		.out_0_valid    (avalon_st_adapter_014_out_0_valid),        //         .valid
		.out_0_ready    (avalon_st_adapter_014_out_0_ready),        //         .ready
		.out_0_error    (avalon_st_adapter_014_out_0_error)         //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_015 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                            // in_clk_0.clk
		.in_rst_0_reset (ADC_reset_reset_bridge_in_reset_reset),             // in_rst_0.reset
		.in_0_data      (nios2_2nd_core_sram_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (nios2_2nd_core_sram_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (nios2_2nd_core_sram_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_015_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_015_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_015_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_015_out_0_error)                  //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_016 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                    // in_clk_0.clk
		.in_rst_0_reset (ADC_reset_reset_bridge_in_reset_reset),     // in_rst_0.reset
		.in_0_data      (onchip_sram_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (onchip_sram_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (onchip_sram_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_016_out_0_data),          //    out_0.data
		.out_0_valid    (avalon_st_adapter_016_out_0_valid),         //         .valid
		.out_0_ready    (avalon_st_adapter_016_out_0_ready),         //         .ready
		.out_0_error    (avalon_st_adapter_016_out_0_error)          //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_017 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (ADC_reset_reset_bridge_in_reset_reset),                             // in_rst_0.reset
		.in_0_data      (f2h_mem_window_00000000_windowed_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (f2h_mem_window_00000000_windowed_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (f2h_mem_window_00000000_windowed_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_017_out_0_data),                                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_017_out_0_valid),                                 //         .valid
		.out_0_ready    (avalon_st_adapter_017_out_0_ready),                                 //         .ready
		.out_0_error    (avalon_st_adapter_017_out_0_error)                                  //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_018 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (ADC_reset_reset_bridge_in_reset_reset),                             // in_rst_0.reset
		.in_0_data      (f2h_mem_window_ff600000_windowed_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (f2h_mem_window_ff600000_windowed_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (f2h_mem_window_ff600000_windowed_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_018_out_0_data),                                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_018_out_0_valid),                                 //         .valid
		.out_0_ready    (avalon_st_adapter_018_out_0_ready),                                 //         .ready
		.out_0_error    (avalon_st_adapter_018_out_0_error)                                  //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_019 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (ADC_reset_reset_bridge_in_reset_reset),                             // in_rst_0.reset
		.in_0_data      (f2h_mem_window_ff800000_windowed_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (f2h_mem_window_ff800000_windowed_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (f2h_mem_window_ff800000_windowed_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_019_out_0_data),                                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_019_out_0_valid),                                 //         .valid
		.out_0_ready    (avalon_st_adapter_019_out_0_ready),                                 //         .ready
		.out_0_error    (avalon_st_adapter_019_out_0_error)                                  //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_020 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (ADC_reset_reset_bridge_in_reset_reset),                           // in_rst_0.reset
		.in_0_data      (jtag_uart_2nd_core_avalon_jtag_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (jtag_uart_2nd_core_avalon_jtag_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (jtag_uart_2nd_core_avalon_jtag_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_020_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_020_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_020_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_020_out_0_error)                                //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_021 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (Nios2_2nd_Core_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (nios2_2nd_core_debug_mem_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (nios2_2nd_core_debug_mem_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (nios2_2nd_core_debug_mem_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_021_out_0_data),                          //    out_0.data
		.out_0_valid    (avalon_st_adapter_021_out_0_valid),                         //         .valid
		.out_0_ready    (avalon_st_adapter_021_out_0_ready),                         //         .ready
		.out_0_error    (avalon_st_adapter_021_out_0_error)                          //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_022 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                // in_clk_0.clk
		.in_rst_0_reset (ADC_reset_reset_bridge_in_reset_reset),                 // in_rst_0.reset
		.in_0_data      (interval_timer_2nd_core_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (interval_timer_2nd_core_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (interval_timer_2nd_core_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_022_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_022_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_022_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_022_out_0_error)                      //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_023 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (ADC_reset_reset_bridge_in_reset_reset),                   // in_rst_0.reset
		.in_0_data      (interval_timer_2nd_core_2_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (interval_timer_2nd_core_2_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (interval_timer_2nd_core_2_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_023_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_023_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_023_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_023_out_0_error)                        //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_024 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                   // in_clk_0.clk
		.in_rst_0_reset (ADC_reset_reset_bridge_in_reset_reset),    // in_rst_0.reset
		.in_0_data      (nios2_sram_s2_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (nios2_sram_s2_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (nios2_sram_s2_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_024_out_0_data),         //    out_0.data
		.out_0_valid    (avalon_st_adapter_024_out_0_valid),        //         .valid
		.out_0_ready    (avalon_st_adapter_024_out_0_ready),        //         .ready
		.out_0_error    (avalon_st_adapter_024_out_0_error)         //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_025 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                            // in_clk_0.clk
		.in_rst_0_reset (ADC_reset_reset_bridge_in_reset_reset),             // in_rst_0.reset
		.in_0_data      (nios2_2nd_core_sram_s2_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (nios2_2nd_core_sram_s2_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (nios2_2nd_core_sram_s2_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_025_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_025_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_025_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_025_out_0_error)                  //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_026 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                    // in_clk_0.clk
		.in_rst_0_reset (ADC_reset_reset_bridge_in_reset_reset),     // in_rst_0.reset
		.in_0_data      (onchip_sram_s2_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (onchip_sram_s2_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (onchip_sram_s2_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_026_out_0_data),          //    out_0.data
		.out_0_valid    (avalon_st_adapter_026_out_0_valid),         //         .valid
		.out_0_ready    (avalon_st_adapter_026_out_0_ready),         //         .ready
		.out_0_error    (avalon_st_adapter_026_out_0_error)          //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_027 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                           // in_clk_0.clk
		.in_rst_0_reset (Nios2_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (nios2_debug_mem_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (nios2_debug_mem_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (nios2_debug_mem_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_027_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_027_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_027_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_027_out_0_error)                 //         .error
	);

endmodule
